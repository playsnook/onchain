{
  "address": "0x4569F997E4314E924fdBf21617FB6dc6fEcD3DcA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endIdx",
          "type": "uint256"
        }
      ],
      "name": "Bury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Resurrection",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LIVES_PER_SNOOK_ON_RESURRECTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestedBurials",
          "type": "uint256"
        }
      ],
      "name": "bury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAliveSnookCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurialDelayInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIdx",
          "type": "uint256"
        }
      ],
      "name": "getMorgue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMorgueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIdx",
          "type": "uint256"
        }
      ],
      "name": "getRemovedFromMorgue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemovedFromMorgueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getResurrectionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSNKAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSNOOKAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnookGameAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnookStateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraitHist",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapUSDCSkillAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "state",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "skill",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "snook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "game",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "BurialDelayInSeconds",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resurrect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "toMorgue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "updateAliveSnookCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "traitCount",
          "type": "uint256"
        }
      ],
      "name": "updateOnDeath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "onGameEntryTraitCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitCount",
          "type": "uint256"
        }
      ],
      "name": "updateOnExtraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "traitCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "snookCount",
          "type": "uint256"
        }
      ],
      "name": "updateOnMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7eaef25b72e3aa3ca681d2503412966cee4062c1922780c955f40cbaead1e93",
  "receipt": {
    "to": null,
    "from": "0x9a1187cB7084F3E60a8b99eb195D9f3c29361a8a",
    "contractAddress": "0x4569F997E4314E924fdBf21617FB6dc6fEcD3DcA",
    "transactionIndex": 0,
    "gasUsed": "2568525",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x84c0f32e0ee4af2ccc54f8857728c46ac23815d3f7d7e3b21c2fba07fa3a2c75",
    "transactionHash": "0xd7eaef25b72e3aa3ca681d2503412966cee4062c1922780c955f40cbaead1e93",
    "logs": [],
    "blockNumber": 11208154,
    "cumulativeGasUsed": "2568525",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "773758c6cb7796fc33376193135cc715",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endIdx\",\"type\":\"uint256\"}],\"name\":\"Bury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Resurrection\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIVES_PER_SNOOK_ON_RESURRECTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedBurials\",\"type\":\"uint256\"}],\"name\":\"bury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAliveSnookCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurialDelayInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIdx\",\"type\":\"uint256\"}],\"name\":\"getMorgue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMorgueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIdx\",\"type\":\"uint256\"}],\"name\":\"getRemovedFromMorgue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemovedFromMorgueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getResurrectionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSNKAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSNOOKAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnookGameAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnookStateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraitHist\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapUSDCSkillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"state\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"skill\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"snook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BurialDelayInSeconds\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resurrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"toMorgue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"updateAliveSnookCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"}],\"name\":\"updateOnDeath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"onGameEntryTraitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"}],\"name\":\"updateOnExtraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snookCount\",\"type\":\"uint256\"}],\"name\":\"updateOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Afterdeath.sol\":\"Afterdeath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Upgradeable).interfaceId\\n            || interfaceId == type(IERC721MetadataUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2ab92ebd3f4d4d85f30b39bd678ec3489e00aadd0a432c7a0ffa98adc2799004\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x33620beff0655c5e728a72fff76fb6ce2dc32fc6b61eb8e435b12ed1adf31525\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9ef7f2874f4a491f253a81eb4c5b9a7b6467a287aa0c32ac3dd684260a3cd7ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe2a579e3c0d885b5a230215af8964922bb6cea9c3cc2c96cd035dc84c063f276\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xb980ca221be9fc789a1af6f2bf33f4f7b5950e32ac1d55c8e83422cdcf0b4d1d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb16ff89dbc7c288e670fabe2aaf59bd6eeb7869febec09eccc248d584ca0d89f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64581a092c059ab0cb74f473545e379b8a88f36a6a57f805515ef8c6ae061847\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"abdk-libraries-solidity/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0685b096aa1831616f64d3954abb70479e1af27cfbb848307f81ef4b34e9dc21\",\"license\":\"BSD-4-Clause\"},\"contracts/Afterdeath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ABDKMath64x64} from \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./IDescriptorUser.sol\\\";\\nimport \\\"./ISnookState.sol\\\";\\nimport \\\"./SnookToken.sol\\\";\\n//import \\\"./ISkinRewards.sol\\\";\\nimport \\\"./IUniswapUSDCSkill.sol\\\";\\nimport \\\"./ISkillToken.sol\\\";\\nimport \\\"./IAfterdeath.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./ISnookGame.sol\\\";\\n\\ncontract Afterdeath is IAfterdeath, IDescriptorUser, Initializable {\\n  uint public constant LIVES_PER_SNOOK_ON_RESURRECTION = 1;\\n  IUniswapUSDCSkill private _uniswap;\\n  ISnookState private _state;\\n  SnookToken private _snook;\\n  ISkillToken private _skill;\\n  //ISkinRewards private _skinRewards;\\n  uint private _UNUSED;\\n  uint private _BurialDelayInSeconds; \\n  address private _treasury;\\n  address private _game;\\n  // address private _sge\\n  address private _UNUSED2;\\n\\n  // resurrection variables\\n  int128[] private _traitHist;\\n  uint private _aliveSnookCount; \\n\\n  uint[] private _morgue;\\n  uint[] private _removedFromMorgue;\\n  \\n  // remove after upgrade\\n  function updateAliveSnookCount(uint count) external {\\n    require(msg.sender == 0x23fCA1B66C39F2B6ef226B9f0F47686E27e0dFa0, 'Forbidden');\\n    _aliveSnookCount = count;\\n  }\\n\\n  // Getters\\n  function getUniswapUSDCSkillAddress() external override view returns (address) {\\n    return address(_uniswap);\\n  }\\n\\n  function getSnookStateAddress() external override view returns (address) {\\n    return address(_state);\\n  }\\n\\n  function getSNOOKAddress() external override view returns (address) {\\n    return address(_snook);\\n  }\\n\\n  function getSNKAddress() external override view returns (address) {\\n    return address(_skill);\\n  }\\n\\n  // function getSkinRewardsAddress() external override view returns (address) {\\n  //   return address(_skinRewards);\\n  // }\\n\\n  function getBurialDelayInSeconds() external view override returns(uint) {\\n    return _BurialDelayInSeconds;\\n  }\\n\\n  function getTreasuryAddress() external override view returns (address) {\\n    return _treasury;\\n  }\\n\\n  function getSnookGameAddress() external override view returns (address) {\\n    return _game;\\n  }\\n\\n  // function getSGEAddress() external override view returns (address) {\\n  //   return _sge;\\n  // }\\n\\n  function getTraitHist() external override view returns (uint64[] memory) {\\n    uint bins = _traitHist.length;\\n    uint64[] memory result = new uint64[](bins);\\n    for (uint i=0; i<bins; i++) {\\n      result[i] = ABDKMath64x64.toUInt(_traitHist[i]);\\n    }\\n    return result;\\n  }\\n\\n  function getAliveSnookCount() external override view returns (uint) {\\n    return _aliveSnookCount;\\n  }\\n\\n  modifier onlyGameContracts {\\n    require(\\n      msg.sender == _game, //|| \\n      // msg.sender == _sge, \\n      'Afterdeath: Not game contracts'\\n    );\\n    _;\\n  }\\n\\n  function initialize(\\n    address state,\\n    address skill,\\n    address snook,\\n    //address skinRewards,\\n    address uniswap,\\n    address treasury,\\n    address game,\\n    // address sge,\\n    uint BurialDelayInSeconds\\n  ) initializer public {\\n    _state = ISnookState(state);\\n    _snook = SnookToken(snook);\\n    _skill = ISkillToken(skill);\\n    //_skinRewards = ISkinRewards(skinRewards);\\n    _uniswap = IUniswapUSDCSkill(uniswap);\\n    _treasury = treasury;\\n    _game = game;\\n    // _sge = sge;\\n\\n    _BurialDelayInSeconds = BurialDelayInSeconds;\\n    _traitHist = new int128[](0);\\n    _aliveSnookCount = 0;\\n\\n    _morgue = new uint[](0);\\n    _removedFromMorgue = new uint[](0);\\n  }\\n\\n  function _updateTraitHistOnMint(uint traitCount) private {\\n    uint bin = traitCount; // bin starts from 0\\n    if (_traitHist.length < (bin+1) ) {\\n      // resize array\\n      int128[] memory temp = new int128[](bin+1);\\n      for (uint i=0; i<_traitHist.length; i++) {\\n        temp[i] = _traitHist[i];\\n      }\\n      _traitHist = temp;\\n    }\\n    _traitHist[bin] = ABDKMath64x64.add(_traitHist[bin], ABDKMath64x64.fromUInt(1));\\n  }\\n\\n  function _updateTraitHistOnDeath(uint traitCount) private {\\n    uint bin = traitCount;\\n    _traitHist[bin] = ABDKMath64x64.sub(_traitHist[bin], ABDKMath64x64.fromUInt(1));\\n  }\\n\\n  function _updateTraitHistOnResurrection(uint traitCount) private {\\n    _updateTraitHistOnMint(traitCount);\\n  }\\n\\n  function _updateTraitHistOnExtraction(uint onEntryTraitCount, uint onExtractionTraitCount) private {\\n    _updateTraitHistOnDeath(onEntryTraitCount);\\n    _updateTraitHistOnResurrection(onExtractionTraitCount);\\n  }\\n\\n  function updateOnMint(uint traitCount, uint snookCount) onlyGameContracts external override {\\n    _updateTraitHistOnMint(traitCount);\\n    _aliveSnookCount += snookCount;\\n  }\\n\\n  function updateOnExtraction(uint onGameEntryTraitCount, uint traitCount) onlyGameContracts \\n    external override \\n  {\\n    _updateTraitHistOnExtraction(onGameEntryTraitCount, traitCount);\\n  }\\n\\n  function updateOnDeath(uint traitCount) onlyGameContracts external override {\\n    _updateTraitHistOnDeath(traitCount);\\n    _aliveSnookCount -= 1;\\n  }\\n\\n  function resurrect(uint256 tokenId) external override {\\n    Descriptor memory d = _state.getDescriptor(tokenId);\\n    require(_snook.isLocked(tokenId) == true, 'Not in game'); // for alive or *buried* snooks \\n    require(d.deathTime > 0, 'Alive');\\n    require(d.deathTime + _BurialDelayInSeconds * 1 seconds >= block.timestamp, 'Too late');\\n    \\n    require(_skill.transferFrom(msg.sender, address(this), d.resurrectionPrice), 'No funds');\\n    _skill.approve(_treasury, d.resurrectionPrice);\\n    ITreasury(_treasury).acceptResurrectionFunds(d.resurrectionPrice);\\n    ISnookGame(_game).increamentPpkCounter();\\n    d.resurrectionCount += 1; // no overflow with solc8\\n    d.deathTime = 0;\\n\\n    _snook.setTokenURI(tokenId, d.onResurrectionTokenURI);\\n    d.traitCount = d.onResurrectionTraitCount;\\n    d.onGameEntryTraitCount = d.onResurrectionTraitCount;\\n    d.stars = d.onResurrectionStars;\\n    d.score = d.onResurrectionScore;\\n    \\n    d.lives = LIVES_PER_SNOOK_ON_RESURRECTION;\\n    _state.setDescriptor(tokenId, d);\\n    _snook.lock(tokenId, false, 'resurrect');\\n\\n    _updateTraitHistOnResurrection(d.onResurrectionTraitCount);\\n    _aliveSnookCount += 1;\\n    \\n    emit Resurrection(msg.sender, tokenId);\\n  }\\n\\n  function getResurrectionPrice(uint256 tokenId) \\n    external override view returns (uint256) \\n  {\\n    uint256 k = _uniswap.getSnookPriceInSkills(); // in wei\\n    int128 d = _getResurrectionDifficulty(tokenId); \\n    uint price = ABDKMath64x64.mulu(d, k); // in wei\\n    if (price < k) {\\n      price = k;\\n    }\\n    return price;\\n  }\\n\\n  function _getResurrectionDifficulty(uint256 tokenId) private view returns (int128) {\\n    Descriptor memory d = _state.getDescriptor(tokenId);\\n    uint bin = d.traitCount;\\n    int128 s = ABDKMath64x64.fromUInt(0);  // difficulty to be calculated\\n    for (uint i=0; i<=bin ; i++) {\\n      s = ABDKMath64x64.add(s, _traitHist[i]);\\n    }\\n\\n    s = ABDKMath64x64.div(s, ABDKMath64x64.fromUInt(_aliveSnookCount)); // standing, s(b)\\n    int128 numOfTraits = ABDKMath64x64.fromUInt(bin);\\n    \\n    // difficulty coef,  d = exp(s) * traits^2\\n    return ABDKMath64x64.mul(ABDKMath64x64.exp(s), ABDKMath64x64.mul(numOfTraits, numOfTraits));\\n  }\\n\\n  function _isToBeBuried(uint tokenId, uint deathTime) private view returns(bool) {\\n    return \\n      _snook.isLocked(tokenId) == true && \\n      deathTime > 0 && \\n      deathTime + _BurialDelayInSeconds * 1 seconds < block.timestamp;\\n  }\\n\\n  function _isWaitingForResurrection(uint tokenId, uint deathTime) private view returns(bool) {\\n    return \\n      _snook.isLocked(tokenId) == true && \\n      deathTime > 0 && \\n      deathTime + _BurialDelayInSeconds * 1 seconds >= block.timestamp;\\n  }\\n\\n  function bury(uint requestedBurials) external override {\\n    // _removedFromMorgue = _removedFromMorgue\\n    uint startIdx = _removedFromMorgue.length;\\n    uint uncheckedMorgueLength = _morgue.length - startIdx;\\n    uint maxBurials = requestedBurials > uncheckedMorgueLength ? uncheckedMorgueLength : requestedBurials;\\n    \\n    for (uint i = 0; i < maxBurials; i++) {\\n      uint tokenId = _morgue[startIdx+i];\\n      try _snook.ownerOf(tokenId) returns(address) {\\n        // snook is not burnt\\n      } catch { // the only reason to revert is burnt snook\\n        _removedFromMorgue.push(tokenId);\\n        continue;\\n      }\\n      Descriptor memory d = _state.getDescriptor(tokenId);\\n      if (_isToBeBuried(tokenId, d.deathTime)) {\\n        _snook.lock(tokenId, false, 'bury');\\n        _snook.burn(tokenId);\\n        _state.deleteDescriptor(tokenId);\\n        _removedFromMorgue.push(tokenId);\\n      }\\n      else if (_isWaitingForResurrection(tokenId, d.deathTime)) {\\n        break;\\n      } else { // ressurected snook\\n        _removedFromMorgue.push(tokenId);\\n      }\\n    }\\n    \\n    emit Bury(startIdx, _removedFromMorgue.length);\\n  }\\n\\n  function toMorgue(uint tokenId) external override onlyGameContracts {\\n    _morgue.push(tokenId);\\n  }\\n\\n  function getMorgueLength() external view override returns (uint) {\\n    return _morgue.length;\\n  }\\n\\n  function getRemovedFromMorgueLength() external view override returns (uint) {\\n    return _removedFromMorgue.length;\\n  }\\n\\n  function getMorgue(uint startIdx, uint endIdx) external view override returns(uint[] memory) {\\n    require(\\n      startIdx >= 0 && \\n      endIdx <= _morgue.length &&\\n      startIdx < endIdx, \\n    'Afterdeath: invalid indexes'\\n    );\\n    uint[] memory slice = new uint[](endIdx-startIdx);\\n    for (uint i=startIdx; i<endIdx; i++) {\\n      slice[i-startIdx] = _morgue[i];\\n    }\\n    return slice;\\n  }  \\n\\n  function getRemovedFromMorgue(uint startIdx, uint endIdx) external view override returns(uint[] memory) {\\n    require(\\n      startIdx >= 0 && \\n      endIdx <= _removedFromMorgue.length &&\\n      startIdx < endIdx,\\n      'Afterdeath: invalid indexes'\\n    );\\n    uint[] memory slice = new uint[](endIdx-startIdx);\\n    for (uint i=startIdx; i<endIdx; i++) {\\n      slice[i-startIdx] = _removedFromMorgue[i];\\n    }\\n    return slice;\\n  }\\n}\",\"keccak256\":\"0x52120ccb0621167a03dd73b1fa9ad4534960a6ef3dfbc0ff7151a52d2d32a080\",\"license\":\"MIT\"},\"contracts/IAfterdeath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAfterdeath {\\n  event Resurrection(address indexed from, uint tokenId);\\n  event Bury(uint startIdx, uint endIdx);\\n\\n  function getUniswapUSDCSkillAddress() external view returns (address);\\n  function getSnookStateAddress() external view returns (address);\\n  function getSNOOKAddress() external view returns (address);\\n  function getSNKAddress() external view returns (address);\\n  //function getSkinRewardsAddress() external view returns (address);\\n  function getBurialDelayInSeconds() external view  returns(uint);\\n  function getTreasuryAddress() external view returns (address);\\n  function getSnookGameAddress() external view returns (address);\\n  //function getSGEAddress() external view returns (address);\\n  function getTraitHist() external view returns (uint64[] memory);  \\n  function getAliveSnookCount() external view returns (uint);\\n\\n  function updateOnMint(uint traitCount, uint count) external;\\n  function updateOnExtraction(uint onGameEntryTraitCount, uint traitCount) external;\\n  function updateOnDeath(uint traitCount) external;\\n  function resurrect(uint256 tokenId) external;\\n  function getResurrectionPrice(uint256 tokenId) external view returns (uint256 price);\\n\\n  function toMorgue(uint tokenId) external;\\n  function bury(uint requestedBurials) external;\\n  \\n  function getMorgue(uint startIdx, uint endIdx) external view returns(uint[] memory);\\n  function getRemovedFromMorgue(uint startIdx, uint endIdx) external view  returns(uint[] memory);\\n  function getMorgueLength() external view returns (uint);\\n  function getRemovedFromMorgueLength() external view returns (uint);\\n  \\n}\",\"keccak256\":\"0x87b662c2fdb967103f77ed5b021d513b5e81f25dc01043b44f86c5909c68e9d5\",\"license\":\"MIT\"},\"contracts/IDescriptorUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://ethereum.stackexchange.com/questions/27259/how-can-you-share-a-struct-definition-between-contracts-in-separate-files\\ninterface IDescriptorUser {\\n  struct Descriptor {\\n    uint score;\\n    uint stars;\\n    uint traitCount;\\n\\n    uint resurrectionPrice;\\n    uint resurrectionCount;\\n    uint onResurrectionScore;\\n    uint onResurrectionStars;\\n    uint onResurrectionTraitCount;\\n    string onResurrectionTokenURI;\\n\\n    // required to recalculate probability density on exit from the game\\n    uint onGameEntryTraitCount; \\n    uint deathTime;\\n    bool gameAllowed; // UNUSED; \\n  \\n    uint lives; \\n    bool forSale;\\n\\n  }\\n}\",\"keccak256\":\"0x7609d22e47e34f2ca2efe67b3d58ada3442de8543b9f4e6b732b84ab784124c1\",\"license\":\"MIT\"},\"contracts/ISkillToken.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.5.0;\\n\\ninterface ISkillToken {\\n    // IERC20Metadata\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    // IERC20\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);    \\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    // SnookGame extension\\n    function burn(address, uint256) external;\\n}\",\"keccak256\":\"0x2a28799b5cf2bdc40bee27444bcb8566fe226ae57b4f47fb02f3f990a051218a\",\"license\":\"Unlicense\"},\"contracts/ISnookGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IDescriptorUser.sol\\\";\\n\\ninterface ISnookGame is IDescriptorUser {\\n  event GameAllowed(address indexed from, uint tokenId);\\n  event Entry(address indexed from, uint tokenId);\\n  event Extraction(address indexed to, uint tokenId);\\n  event Death(\\n    address indexed to, \\n    uint tokenId, \\n    uint killerTokenId, \\n    uint remainingLives,\\n    uint killerChainId\\n  );\\n  event Killing(\\n    address indexed to,\\n    uint tokenId,\\n    uint killedTokenId,\\n    uint killedChainId\\n  );\\n  event Birth2(address indexed to, uint tokenId, uint price, uint traitId);\\n  event PpkClaimed(address indexed to, uint rewardsAmount);\\n  \\n  function getBurnSafeAddress() view external returns(address);\\n  function isBridged() view external returns(bool);\\n  function getSNOOKAddress() external view returns (address);\\n  function getSNKAddress() external view returns (address);\\n  // function getSkinRewardsAddress() external view returns (address);\\n  function getSnookStateAddress() external view returns (address);\\n  function getAfterdeathAddress() external view returns (address);\\n  function getUniswapUSDCSkillAddress() external view returns (address);\\n\\n  function describe(uint tokenId) external view returns (Descriptor memory d);\\n  function mint2(uint count) external returns (uint[] memory);\\n  function enterGame2(uint256 tokenId) external;\\n\\n  function extractSnooksWithoutUpdate(uint256[] memory tokenIds) external;\\n  \\n  function extractSnook(\\n    uint256 tokenId, \\n    uint traitCount, \\n    uint stars, \\n    uint score, \\n    string memory tokenURI_\\n  ) external;\\n  \\n  function reportKill(\\n      uint256 tokenId, \\n      uint traitCount,\\n      uint stars,\\n      string memory tokenURI,\\n      uint killerTokenId,\\n      bool unlock\\n  ) external;\\n  \\n  function reportKilled(\\n    uint tokenId,\\n    uint traitCount,\\n    uint stars,\\n    string calldata tokenURI,\\n    uint killerTokenId,\\n    bool unlock,\\n    uint killerChainId // for log only\\n  ) external;\\n  \\n  function reportKiller(\\n    uint tokenId,\\n    uint killedTokenId,   // for log only\\n    uint killedChainId    // for log only\\n  ) external;\\n\\n  function getPpkCounter() view external returns(uint);\\n  function increamentPpkCounter() external;\\n  function computePpk() view external returns (uint);\\n  function getKillsAndComputePpkRewards(address account) \\n    view external returns (uint kills, uint rewardsAmount);\\n  function claimPpkRewards() external;\\n  function getLivesPerSnook() external pure returns(uint);\\n\\n  function pause() external;\\n  function unpause() external;\\n}\",\"keccak256\":\"0x82c42941e9c62ecf736d32b6c59543cf18fd2cf42ccbc2bab1e84579c27b6232\",\"license\":\"MIT\"},\"contracts/ISnookState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDescriptorUser.sol\\\";\\n\\ninterface ISnookState is IDescriptorUser { \\n  function getSnookGameAddress() external view returns (address);\\n  function getMarketplaceAddress() external view returns (address);\\n  function getAfterdeathAddress() external view returns (address);\\n  \\n  function getDescriptor(uint tokenId) external view returns(Descriptor memory);\\n  function setDescriptor(uint tokenId, Descriptor memory descriptor) external;\\n  function setDescriptors(uint[] calldata tokenIds, Descriptor[] calldata descriptors) external;\\n\\n  function deleteDescriptor(uint tokenId) external;\\n}\",\"keccak256\":\"0x76a11b67e83719bb16fd3904b95d521d18866e8c9249d74f9a4087cd01623178\",\"license\":\"MIT\"},\"contracts/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nuint constant PayeeCount = 3;\\n\\ninterface ITreasury {\\n  enum PayeeIds { FOUNDERS, STAKING, SKIN }\\n  \\n  event Transfer(address payee, uint amount);\\n  event MintFundsAccepted(uint amount);\\n  event ResurrectionFundsAccepted(uint amount);\\n  event AcceptedFundsDistributed(uint amountPpk, uint amountStaking, uint amountTournaments);\\n\\n  function transfer() external;\\n  function getPayees() external view returns (address[PayeeCount] memory);\\n  function getSharesInCentipercents() external view returns (uint[PayeeCount] memory);\\n  function getCyclesInDays() external view returns (uint[PayeeCount] memory);\\n  function getPayTimes() external view returns (uint[PayeeCount] memory);\\n  function getSecondsInDay() external view returns (uint);\\n  function getSNKAddress() external view returns (address);\\n\\n  // ev2\\n  function getPpkBalance() external view returns (uint);\\n  function getTournamentsBalance() external view returns (uint);\\n  function getLpStakingBalance() external view returns (uint);\\n  function acceptMintFunds(uint amount) external; \\n  function acceptResurrectionFunds(uint amount) external;\\n  \\n  function payPpkRewards(address recipient, uint amount) external;\\n\\n  // luckwheel\\n  function mintLuckWheelSNOOK(address to) external returns(uint);\\n  function awardLuckWheelSNK(address to, uint prizeAmount) external;\\n}\",\"keccak256\":\"0xcc5e42400c7d218c0b6121d95962288c7899374395abc0270be21a3e124ec525\",\"license\":\"MIT\"},\"contracts/IUniswapUSDCSkill.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.6;\\n\\ninterface IUniswapUSDCSkill {\\n  function getSnookPriceInSkills() external view returns (uint);\\n}\",\"keccak256\":\"0xfda1e98c3860b17d44675695bcb690e286d2f160f8276c450c17ffbd34ad4e29\",\"license\":\"Unlicense\"},\"contracts/SnookToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n// about tokenURI in v4: https://forum.openzeppelin.com/t/function-settokenuri-in-erc721-is-gone-with-pragma-0-8-0/5978\\n\\ncontract SnookToken is ERC721Upgradeable, ERC721BurnableUpgradeable, ERC721EnumerableUpgradeable, OwnableUpgradeable {\\n    event Locked(address indexed from, uint tokenId, bool locked, string reason);\\n\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n    mapping (uint => string) private _tokenURIs;\\n    mapping (uint => bool ) private _locked;\\n    \\n    address private _game;\\n    address private _afterdeath;\\n    address private _UNUSED;\\n\\n    mapping(uint => uint[2]) private _UNUSED2; \\n    address private _UNUSED3; \\n    mapping(uint=>uint) _tokenKillerToken;\\n\\n    address private _marketplace;\\n\\n    modifier onlyGameContracts {\\n      require(\\n        msg.sender == _game ||         \\n        msg.sender == _afterdeath ||\\n        msg.sender == _marketplace,\\n        'SnookToken: Not game contracts'\\n      );\\n      _;\\n    }\\n\\n    function initialize(\\n      address game,\\n      address afterdeath,\\n      //address sge,\\n      string memory tokenName,\\n      string memory tokenSymbol\\n    ) initializer public {\\n        __ERC721_init(tokenName, tokenSymbol);\\n        __ERC721Burnable_init();\\n        __ERC721Enumerable_init();\\n        __Ownable_init();\\n\\n        _game = game;\\n        _afterdeath = afterdeath;\\n        //_sge = sge;\\n\\n    }\\n    \\n    function initialize3(address marketplace) public {\\n      require(_marketplace == address(0), 'SnookToken: already initialized');\\n      _marketplace = marketplace;\\n    }\\n\\n    \\n\\n    function setKillerTokenId(uint tokenId, uint killerTokenId) public onlyGameContracts {\\n      _tokenKillerToken[tokenId] = killerTokenId;\\n    } \\n\\n    function getKillerTokenId(uint tokenId) public view returns (uint) {\\n      require(_exists(tokenId), \\\"SnookToken: token does not exist\\\");\\n      return _tokenKillerToken[tokenId];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return _tokenURIs[tokenId];\\n    }\\n    \\n    // used by resurrection from Game constract\\n    function setTokenURI(uint256 tokenId, string memory tokenURI_) public onlyGameContracts() {  \\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = tokenURI_;\\n    }\\n\\n    function mint(address to, string memory tokenURI_) public onlyGameContracts() returns (uint256)\\n    {\\n        _tokenIds.increment(); // start token sequence from 1\\n        uint256 tokenId = _tokenIds.current();\\n        _mint(to, tokenId);  \\n        setTokenURI(tokenId, tokenURI_);\\n        return tokenId;\\n    }\\n\\n    function multimint(address to, string[] calldata tokenURIs) \\n      external onlyGameContracts() returns (uint[] memory) \\n    {\\n      uint[] memory tokenIds = new uint[](tokenURIs.length);\\n      for (uint i=0; i<tokenURIs.length; i++) {\\n        tokenIds[i] = mint(to, tokenURIs[i]);\\n      }\\n      return tokenIds;\\n    }\\n\\n    function burn(uint256 tokenId) public virtual override onlyGameContracts() {\\n        _burn(tokenId);\\n    }\\n\\n    function exists(uint256 tokenId) public view returns(bool) {\\n      return _exists(tokenId);\\n    }\\n\\n    // lock token if it's in play\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) \\n        internal virtual \\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable) \\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        require(_locked[tokenId] == false, 'SnookToken: Token is locked');\\n    }\\n\\n    // https://forum.openzeppelin.com/t/derived-contract-must-override-function-supportsinterface/6315/2\\n    function supportsInterface(bytes4 interfaceId) public view \\n      virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) \\n      returns (bool) \\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function lock(uint tokenId, bool on, string memory reason) external onlyGameContracts() {\\n        _locked[tokenId] = on;\\n        emit Locked(ownerOf(tokenId), tokenId, on, reason);\\n    } \\n\\n    function isLocked(uint tokenId) view external returns (bool) {\\n        require(_exists(tokenId) == true, \\\"ERC721: isLocked query for nonexistent token\\\");\\n        return _locked[tokenId];\\n    }\\n}\",\"keccak256\":\"0x45646c6da6adbbe2f74fa56f3623796440e1d2ab76ae728e850f038dafb6326c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d9d806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638765c91f116100c3578063cab85f371161007c578063cab85f3714610271578063e002460414610279578063e0a87cfb14610281578063e9b1d66414610289578063eb427dcf1461029c578063f61fef74146102af5761014d565b80638765c91f14610220578063938ce1f714610228578063a5a2295c14610230578063abf74d5f14610243578063bde28ef514610256578063c97bafe11461025e5761014d565b80632fd6a344116101155780632fd6a344146101c25780634b6d2b82146101d757806352691516146101df5780637a9aa2b0146101f25780637e99a74e146101fa578063811c2bab1461020d5761014d565b80630b751db5146101525780631460e3901461017057806317971ca01461018557806323d0b9e41461019a57806329b54832146101a2575b600080fd5b61015a6102c2565b60405161016791906128be565b60405180910390f35b61018361017e366004612685565b6102d1565b005b61018d61042d565b6040516101679190612afc565b61015a610433565b6101b56101b036600461286b565b610442565b604051610167919061290f565b6101ca610557565b6040516101679190612953565b61018d61065b565b6101836101ed36600461286b565b610661565b61015a6106af565b61018d61020836600461283b565b6106be565b61018361021b36600461283b565b610779565b61015a610ce2565b61018d610cf7565b6101b561023e36600461286b565b610cfd565b61018361025136600461283b565b610e08565b61018d6111d2565b61018361026c36600461286b565b6111d7565b61015a61120f565b61015a61121e565b61018d61122d565b61018361029736600461283b565b611233565b6101836102aa36600461283b565b61126b565b6101836102bd36600461283b565b6112ca565b6003546001600160a01b031690565b600054610100900460ff16806102ea575060005460ff16155b61030f5760405162461bcd60e51b8152600401610306906129f9565b60405180910390fd5b600054610100900460ff1615801561033a576000805460ff1961ff0019909116610100171660011790555b600180546001600160a01b03199081166001600160a01b038b8116919091179092556002805482168984161790556003805482168a84161790556000805462010000600160b01b031916620100008985160217815560068054831688851617905560078054909216928616929092179055600583905560408051918252602082019081905290516103cd916009916124e4565b506000600a81905560408051918252602082019081905290516103f291600b9161259f565b50604080516000815260208101918290525161041091600c9161259f565b508015610423576000805461ff00191690555b5050505050505050565b600c5490565b6002546001600160a01b031690565b6060600c54821115801561045557508183105b6104715760405162461bcd60e51b815260040161030690612ac5565b600061047d8484612cc4565b67ffffffffffffffff8111156104a357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104cc578160200160208202803683370190505b509050835b8381101561054d57600c81815481106104fa57634e487b7160e01b600052603260045260246000fd5b90600052602060002001548286836105129190612cc4565b8151811061053057634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061054581612d0b565b9150506104d1565b5090505b92915050565b60095460609060008167ffffffffffffffff81111561058657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156105af578160200160208202803683370190505b50905060005b8281101561065457610609600982815481106105e157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a9004600f0b611318565b82828151811061062957634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff909216602092830291909101909101528061064c81612d0b565b9150506105b5565b5091505090565b600b5490565b6007546001600160a01b0316331461068b5760405162461bcd60e51b815260040161030690612a47565b61069482611334565b80600a60008282546106a69190612c8d565b90915550505050565b6007546001600160a01b031690565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663b7d002076040518163ffffffff1660e01b815260040160206040518083038186803b15801561070f57600080fd5b505afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190612853565b905060006107548461150c565b90506000610762828461165e565b90508281101561076f5750815b925050505b919050565b600154604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d906107aa908590600401612afc565b60006040518083038186803b1580156107c257600080fd5b505afa1580156107d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107fe919081019061272b565b60025460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb19061082f908590600401612afc565b60206040518083038186803b15801561084757600080fd5b505afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f9190612711565b15156001146108a05760405162461bcd60e51b815260040161030690612a7e565b6000816101400151116108c55760405162461bcd60e51b815260040161030690612995565b4260055460016108d59190612ca5565b8261014001516108e59190612c8d565b10156109035760405162461bcd60e51b8152600401610306906129d7565b60035460608201516040516323b872dd60e01b81526001600160a01b03909216916323b872dd9161093a91339130916004016128d2565b602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190612711565b6109a85760405162461bcd60e51b815260040161030690612aa3565b600354600654606083015160405163095ea7b360e01b81526001600160a01b039384169363095ea7b3936109e1939116916004016128f6565b602060405180830381600087803b1580156109fb57600080fd5b505af1158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a339190612711565b50600654606082015160405163021e7be960e41b81526001600160a01b03909216916321e7be9091610a6791600401612afc565b600060405180830381600087803b158015610a8157600080fd5b505af1158015610a95573d6000803e3d6000fd5b50505050600760009054906101000a90046001600160a01b03166001600160a01b031663bf042def6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b50505050600181608001818151610b149190612c8d565b9052506000610140820152600254610100820151604051630588253160e21b81526001600160a01b039092169163162094c491610b5691869190600401612b62565b600060405180830381600087803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b50505060e0820151604080840182905261012084019190915260c0830151602084015260a083015183526001610180840181905254905163366a446b60e21b81526001600160a01b03909116915063d9a911ac90610be89085908590600401612b7b565b600060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b505060025460405163bfbf01d760e01b81526001600160a01b03909116925063bfbf01d79150610c4d908590600090600401612b05565b600060405180830381600087803b158015610c6757600080fd5b505af1158015610c7b573d6000803e3d6000fd5b50505050610c8c8160e001516116c6565b6001600a6000828254610c9f9190612c8d565b909155505060405133907f9e30025c6e9b06c7d57ffe526a70b917b8d5c44462a953c7aa1b875661e192c590610cd6908590612afc565b60405180910390a25050565b6000546201000090046001600160a01b031690565b600a5490565b6060600b548211158015610d1057508183105b610d2c5760405162461bcd60e51b815260040161030690612ac5565b6000610d388484612cc4565b67ffffffffffffffff811115610d5e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d87578160200160208202803683370190505b509050835b8381101561054d57600b8181548110610db557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154828683610dcd9190612cc4565b81518110610deb57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610e0081612d0b565b915050610d8c565b600c54600b54600090610e1c908390612cc4565b90506000818411610e2d5783610e2f565b815b905060005b8181101561118f576000600b610e4a8387612c8d565b81548110610e6857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546002546040516331a9108f60e11b81529192506001600160a01b031690636352211e90610ea5908490600401612afc565b60206040518083038186803b158015610ebd57600080fd5b505afa925050508015610eed575060408051601f3d908101601f19168201909252610eea91810190612669565b60015b610f2957600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7015561117d565b50600154604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90610f5b908590600401612afc565b60006040518083038186803b158015610f7357600080fd5b505afa158015610f87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610faf919081019061272b565b9050610fc0828261014001516116d2565b156111295760025460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d790610ff8908590600090600401612b36565b600060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b5050600254604051630852cd8d60e31b81526001600160a01b0390911692506342966c68915061105a908590600401612afc565b600060405180830381600087803b15801561107457600080fd5b505af1158015611088573d6000803e3d6000fd5b5050600154604051631d62956160e31b81526001600160a01b03909116925063eb14ab0891506110bc908590600401612afc565b600060405180830381600087803b1580156110d657600080fd5b505af11580156110ea573d6000803e3d6000fd5b5050600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018490555061117a9050565b6111388282610140015161178e565b1561114457505061118f565b600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018290555b50505b8061118781612d0b565b915050610e34565b50600c546040517f5e5f8c58bbcf5f3d574136b8d3ee4884fa429c07ae4c07a37ecf1b3b02f43b99916111c491869190612c55565b60405180910390a150505050565b600181565b6007546001600160a01b031633146112015760405162461bcd60e51b815260040161030690612a47565b61120b828261184a565b5050565b6001546001600160a01b031690565b6006546001600160a01b031690565b60055490565b7323fca1b66c39f2b6ef226b9f0f47686e27e0dfa033146112665760405162461bcd60e51b8152600401610306906129b4565b600a55565b6007546001600160a01b031633146112955760405162461bcd60e51b815260040161030690612a47565b600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b6007546001600160a01b031633146112f45760405162461bcd60e51b815260040161030690612a47565b6112fd8161185c565b6001600a60008282546113109190612cc4565b909155505050565b60008082600f0b121561132a57600080fd5b50600f0b60401d90565b80611340816001612c8d565b6009541015611457576000611356826001612c8d565b67ffffffffffffffff81111561137c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113a5578160200160208202803683370190505b50905060005b60095481101561144057600981815481106113d657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a9004600f0b82828151811061141957634e487b7160e01b600052603260045260246000fd5b6020026020010190600f0b9081600f0b81525050808061143890612d0b565b9150506113ab565b5080516114549060099060208401906124e4565b50505b6114ab6009828154811061147b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460106001928316026101000a9004600f0b906114a6906118b5565b6118d3565b600982815481106114cc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010026101000a8154816001600160801b030219169083600f0b6001600160801b031602179055505050565b600154604051636a6f3e1d60e01b815260009182916001600160a01b0390911690636a6f3e1d90611541908690600401612afc565b60006040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611595919081019061272b565b604081015190915060006115a8816118b5565b905060005b8281116116155761160182600983815481106115d957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600291828204019190066010029054906101000a9004600f0b6118d3565b91508061160d81612d0b565b9150506115ad565b5061162a81611625600a546118b5565b611907565b90506000611637836118b5565b90506116546116458361196d565b61164f83846119c2565b6119c2565b9695505050505050565b60008161166d57506000610551565b600083600f0b121561167e57600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b038111156116ad57600080fd5b60401b81198111156116be57600080fd5b019392505050565b6116cf81611334565b50565b60025460405163f6aacfb160e01b81526000916001600160a01b03169063f6aacfb190611703908690600401612afc565b60206040518083038186803b15801561171b57600080fd5b505afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190612711565b151560011480156117645750600082115b8015611787575042600554600161177b9190612ca5565b6117859084612c8d565b105b9392505050565b60025460405163f6aacfb160e01b81526000916001600160a01b03169063f6aacfb1906117bf908690600401612afc565b60206040518083038186803b1580156117d757600080fd5b505afa1580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f9190612711565b151560011480156118205750600082115b801561178757504260055460016118379190612ca5565b6118419084612c8d565b10159392505050565b6118538261185c565b61120b816116c6565b60008190506114ab6009828154811061188557634e487b7160e01b600052603260045260246000fd5b6000918252602090912060028204015460106001928316026101000a9004600f0b906118b0906118b5565b6119f8565b6000677fffffffffffffff8211156118cc57600080fd5b5060401b90565b6000600f83810b9083900b0160016001607f1b031981128015906118fe575060016001607f1b038113155b61178757600080fd5b600081600f0b6000141561191a57600080fd5b600082600f0b604085600f0b901b8161194357634e487b7160e01b600052601260045260246000fd5b05905060016001607f1b031981128015906118fe575060016001607f1b0381131561178757600080fd5b6000600160461b82600f0b1261198257600080fd5b683fffffffffffffffff1982600f0b121561199f57506000610774565b610551608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d611a2b565b6000600f83810b9083900b0260401d60016001607f1b031981128015906118fe575060016001607f1b0381131561178757600080fd5b6000600f82810b9084900b0360016001607f1b031981128015906118fe575060016001607f1b0381131561178757600080fd5b6000600160461b82600f0b12611a4057600080fd5b683fffffffffffffffff1982600f0b1215611a5d57506000610774565b6001607f1b60006780000000000000008416600f0b1315611a8f5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b1315611abc577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315611ae9577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b1315611b165770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315611b43577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b1315611b7057700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b1315611b9d5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b1315611bca57700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b1315611bf65770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315611c22577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b1315611c4e57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315611c7a577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b1315611ca657700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b1315611cd25770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b1315611cfe577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b1315611d2a5770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315611d55577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315611d8057700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315611dab5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315611dd657700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315611e015770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315611e2c577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315611e5757700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315611e82577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315611eac57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315611ed65770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315611f00577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315611f2a5770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315611f54577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315611f7e57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315611fa85770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b1315611fd257700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315611ffb5770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315612024577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b131561204d57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315612076577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b131561209f57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b13156120c85770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b13156120f1577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b131561211a5770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315612142577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b131561216a57700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b13156121925770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b13156121ba57700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b13156121e25770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b131561220a577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b131561223257700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b131561225a577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b131561228157700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b13156122a85770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b13156122cf577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b13156122f65770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b131561231d577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b131561234457700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b131561236b5770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561239257700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156123b85770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b13156123de577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b131561240457700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b131561242a577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b131561245057700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156124765770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b131561249c577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156124c25770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b0381111561055157600080fd5b8280548282559060005260206000209060010160029004810192821561258f5791602002820160005b8382111561255a57835183826101000a8154816001600160801b030219169083600f0b6001600160801b031602179055509260200192601001602081600f0104928301926001030261250d565b801561258d5782816101000a8154906001600160801b030219169055601001602081600f0104928301926001030261255a565b505b5061259b9291506125da565b5090565b82805482825590600052602060002090810192821561258f579160200282015b8281111561258f5782518255916020019190600101906125bf565b5b8082111561259b57600081556001016125db565b8051801515811461077457600080fd5b600082601f83011261260f578081fd5b815167ffffffffffffffff81111561262957612629612d3c565b61263c601f8201601f1916602001612c63565b818152846020838601011115612650578283fd5b612661826020830160208701612cdb565b949350505050565b60006020828403121561267a578081fd5b815161178781612d52565b600080600080600080600060e0888a03121561269f578283fd5b87356126aa81612d52565b965060208801356126ba81612d52565b955060408801356126ca81612d52565b945060608801356126da81612d52565b935060808801356126ea81612d52565b925060a08801356126fa81612d52565b8092505060c0880135905092959891949750929550565b600060208284031215612722578081fd5b611787826125ef565b60006020828403121561273c578081fd5b815167ffffffffffffffff80821115612753578283fd5b81840191506101c0808387031215612769578384fd5b61277281612c63565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151838111156127d1578586fd5b6127dd888287016125ff565b918301919091525061012083810151908201526101408084015190820152610160915061280b8284016125ef565b82820152610180915081830151828201526101a0915061282c8284016125ef565b91810191909152949350505050565b60006020828403121561284c578081fd5b5035919050565b600060208284031215612864578081fd5b5051919050565b6000806040838503121561287d578182fd5b50508035926020909101359150565b15159052565b600081518084526128aa816020860160208601612cdb565b601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156129475783518352928401929184019160010161292b565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561294757835167ffffffffffffffff168352928401929184019160010161296f565b602080825260059082015264416c69766560d81b604082015260600190565b6020808252600990820152682337b93134b23232b760b91b604082015260600190565b602080825260089082015267546f6f206c61746560c01b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601e908201527f416674657264656174683a204e6f742067616d6520636f6e7472616374730000604082015260600190565b6020808252600b908201526a4e6f7420696e2067616d6560a81b604082015260600190565b6020808252600890820152674e6f2066756e647360c01b604082015260600190565b6020808252601b908201527f416674657264656174683a20696e76616c696420696e64657865730000000000604082015260600190565b90815260200190565b91825215156020820152606060408201819052600990820152681c995cdd5c9c9958dd60ba1b608082015260a00190565b91825215156020820152606060408201819052600490820152636275727960e01b608082015260a00190565b6000838252604060208301526126616040830184612892565b600083825260406020830152825160408301526020830151606083015260408301516080830152606083015160a0830152608083015160c083015260a083015160e083015260c0830151610100818185015260e0850151915061012082818601528186015192506101c091506101408281870152612bfd610200870185612892565b91870151610160878101919091529087015161018080880191909152908701519193506101a0612c2f8188018461288c565b908701519286019290925250840151612c4c6101e085018261288c565b50949350505050565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612c8557612c85612d3c565b604052919050565b60008219821115612ca057612ca0612d26565b500190565b6000816000190483118215151615612cbf57612cbf612d26565b500290565b600082821015612cd657612cd6612d26565b500390565b60005b83811015612cf6578181015183820152602001612cde565b83811115612d05576000848401525b50505050565b6000600019821415612d1f57612d1f612d26565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146116cf57600080fdfea2646970667358221220a5b3dbfeae29f04637660c8adf0ac8298242e8b3ff31f3d35c40a2792c4a3d1e64736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7942,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_uniswap",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IUniswapUSDCSkill)10364"
      },
      {
        "astId": 7945,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_state",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISnookState)10092"
      },
      {
        "astId": 7948,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_snook",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SnookToken)13881"
      },
      {
        "astId": 7951,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_skill",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISkillToken)9826"
      },
      {
        "astId": 7953,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_UNUSED",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7955,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_BurialDelayInSeconds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7957,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7959,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_game",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7961,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_UNUSED2",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7964,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_traitHist",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_int128)dyn_storage"
      },
      {
        "astId": 7966,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_aliveSnookCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7969,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_morgue",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7972,
        "contract": "contracts/Afterdeath.sol:Afterdeath",
        "label": "_removedFromMorgue",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_int128)dyn_storage": {
        "base": "t_int128",
        "encoding": "dynamic_array",
        "label": "int128[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISkillToken)9826": {
        "encoding": "inplace",
        "label": "contract ISkillToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISnookState)10092": {
        "encoding": "inplace",
        "label": "contract ISnookState",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapUSDCSkill)10364": {
        "encoding": "inplace",
        "label": "contract IUniswapUSDCSkill",
        "numberOfBytes": "20"
      },
      "t_contract(SnookToken)13881": {
        "encoding": "inplace",
        "label": "contract SnookToken",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}