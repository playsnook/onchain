{
  "address": "0x45984341DC1ABFBAc26B0Fc8bB8113713A993688",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "traitId",
          "type": "uint256"
        }
      ],
      "name": "Birth2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "killerTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingLives",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "killerChainId",
          "type": "uint256"
        }
      ],
      "name": "Death",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Entry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Extraction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "GameAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "g1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "g2",
          "type": "uint256"
        }
      ],
      "name": "GasUsage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "killedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "killedChainId",
          "type": "uint256"
        }
      ],
      "name": "Killing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAmount",
          "type": "uint256"
        }
      ],
      "name": "PpkClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_EXTRACTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTRACTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KILLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_BURN_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ECOSYSTEM_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_TREASURY_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRAITCOUNT_MINT2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPpkRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "computePpk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "describe",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stars",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "traitCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resurrectionPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resurrectionCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onResurrectionScore",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onResurrectionStars",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onResurrectionTraitCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "onResurrectionTokenURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "onGameEntryTraitCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deathTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "gameAllowed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lives",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "forSale",
              "type": "bool"
            }
          ],
          "internalType": "struct IDescriptorUser.Descriptor",
          "name": "d",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "enterGame2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stars",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        }
      ],
      "name": "extractSnook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "extractSnooksWithoutUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAfterdeathAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnSafeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getKillsAndComputePpkRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLivesPerSnook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPpkCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSNKAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSNOOKAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnookStateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapUSDCSkillAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increamentPpkCounter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "state",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "snook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "skill",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "afterdeath",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adminAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prng",
          "type": "address"
        },
        {
          "internalType": "string[52]",
          "name": "mintTokenCIDs",
          "type": "string[52]"
        }
      ],
      "name": "initialize2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ecosystem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "initialize3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isBridged_",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "burnsafe",
          "type": "address"
        }
      ],
      "name": "initialize4",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBridged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mint2",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stars",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "killerTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unlock",
          "type": "bool"
        }
      ],
      "name": "reportKill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stars",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "killerTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unlock",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "killerChainId",
          "type": "uint256"
        }
      ],
      "name": "reportKilled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "killedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "killedChainId",
          "type": "uint256"
        }
      ],
      "name": "reportKiller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb97eee77d36c1591f8214f67f7e3a697b12c1010ac33e264bd94925652b06dfc",
  "receipt": {
    "to": null,
    "from": "0x9a1187cB7084F3E60a8b99eb195D9f3c29361a8a",
    "contractAddress": "0x45984341DC1ABFBAc26B0Fc8bB8113713A993688",
    "transactionIndex": 0,
    "gasUsed": "4433484",
    "logsBloom": "0x
    "blockHash": "0x5844ac94b6942d39047d5900400069427835bf859752c3a933a92c37d9fb7a82",
    "transactionHash": "0xb97eee77d36c1591f8214f67f7e3a697b12c1010ac33e264bd94925652b06dfc",
    "logs": [],
    "blockNumber": 11208148,
    "cumulativeGasUsed": "4433484",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "773758c6cb7796fc33376193135cc715",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"traitId\",\"type\":\"uint256\"}],\"name\":\"Birth2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"killerTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingLives\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"killerChainId\",\"type\":\"uint256\"}],\"name\":\"Death\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Entry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Extraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GameAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"g1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"g2\",\"type\":\"uint256\"}],\"name\":\"GasUsage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"killedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"killedChainId\",\"type\":\"uint256\"}],\"name\":\"Killing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"PpkClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_EXTRACTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTRACTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KILLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BURN_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ECOSYSTEM_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TREASURY_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRAITCOUNT_MINT2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPpkRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"computePpk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"describe\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stars\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resurrectionCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onResurrectionScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onResurrectionStars\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onResurrectionTraitCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"onResurrectionTokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"onGameEntryTraitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deathTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gameAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lives\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forSale\",\"type\":\"bool\"}],\"internalType\":\"struct IDescriptorUser.Descriptor\",\"name\":\"d\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enterGame2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stars\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"extractSnook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"extractSnooksWithoutUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAfterdeathAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnSafeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getKillsAndComputePpkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLivesPerSnook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPpkCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSNKAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSNOOKAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnookStateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapUSDCSkillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increamentPpkCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"state\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"snook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"skill\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afterdeath\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prng\",\"type\":\"address\"},{\"internalType\":\"string[52]\",\"name\":\"mintTokenCIDs\",\"type\":\"string[52]\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecosystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"initialize3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isBridged_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"burnsafe\",\"type\":\"address\"}],\"name\":\"initialize4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stars\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"killerTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlock\",\"type\":\"bool\"}],\"name\":\"reportKill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stars\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"killerTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"killerChainId\",\"type\":\"uint256\"}],\"name\":\"reportKilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"killedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"killedChainId\",\"type\":\"uint256\"}],\"name\":\"reportKiller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SnookGame.sol\":\"SnookGame\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x24809d17a2d5bb3aa7195bbed04e7c228982c2d36e371e8a8cb2364877b0aa34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Upgradeable).interfaceId\\n            || interfaceId == type(IERC721MetadataUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2ab92ebd3f4d4d85f30b39bd678ec3489e00aadd0a432c7a0ffa98adc2799004\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x33620beff0655c5e728a72fff76fb6ce2dc32fc6b61eb8e435b12ed1adf31525\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9ef7f2874f4a491f253a81eb4c5b9a7b6467a287aa0c32ac3dd684260a3cd7ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Burnable_init_unchained();\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe2a579e3c0d885b5a230215af8964922bb6cea9c3cc2c96cd035dc84c063f276\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xb980ca221be9fc789a1af6f2bf33f4f7b5950e32ac1d55c8e83422cdcf0b4d1d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb16ff89dbc7c288e670fabe2aaf59bd6eeb7869febec09eccc248d584ca0d89f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64581a092c059ab0cb74f473545e379b8a88f36a6a57f805515ef8c6ae061847\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23e71de3279b56332a1d2e469efe69f82b7408847cc3d7d2d06a66f465837342\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/IAfterdeath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAfterdeath {\\n  event Resurrection(address indexed from, uint tokenId);\\n  event Bury(uint startIdx, uint endIdx);\\n\\n  function getUniswapUSDCSkillAddress() external view returns (address);\\n  function getSnookStateAddress() external view returns (address);\\n  function getSNOOKAddress() external view returns (address);\\n  function getSNKAddress() external view returns (address);\\n  //function getSkinRewardsAddress() external view returns (address);\\n  function getBurialDelayInSeconds() external view  returns(uint);\\n  function getTreasuryAddress() external view returns (address);\\n  function getSnookGameAddress() external view returns (address);\\n  //function getSGEAddress() external view returns (address);\\n  function getTraitHist() external view returns (uint64[] memory);  \\n  function getAliveSnookCount() external view returns (uint);\\n\\n  function updateOnMint(uint traitCount, uint count) external;\\n  function updateOnExtraction(uint onGameEntryTraitCount, uint traitCount) external;\\n  function updateOnDeath(uint traitCount) external;\\n  function resurrect(uint256 tokenId) external;\\n  function getResurrectionPrice(uint256 tokenId) external view returns (uint256 price);\\n\\n  function toMorgue(uint tokenId) external;\\n  function bury(uint requestedBurials) external;\\n  \\n  function getMorgue(uint startIdx, uint endIdx) external view returns(uint[] memory);\\n  function getRemovedFromMorgue(uint startIdx, uint endIdx) external view  returns(uint[] memory);\\n  function getMorgueLength() external view returns (uint);\\n  function getRemovedFromMorgueLength() external view returns (uint);\\n  \\n}\",\"keccak256\":\"0x87b662c2fdb967103f77ed5b021d513b5e81f25dc01043b44f86c5909c68e9d5\",\"license\":\"MIT\"},\"contracts/IDescriptorUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://ethereum.stackexchange.com/questions/27259/how-can-you-share-a-struct-definition-between-contracts-in-separate-files\\ninterface IDescriptorUser {\\n  struct Descriptor {\\n    uint score;\\n    uint stars;\\n    uint traitCount;\\n\\n    uint resurrectionPrice;\\n    uint resurrectionCount;\\n    uint onResurrectionScore;\\n    uint onResurrectionStars;\\n    uint onResurrectionTraitCount;\\n    string onResurrectionTokenURI;\\n\\n    // required to recalculate probability density on exit from the game\\n    uint onGameEntryTraitCount; \\n    uint deathTime;\\n    bool gameAllowed; // UNUSED; \\n  \\n    uint lives; \\n    bool forSale;\\n\\n  }\\n}\",\"keccak256\":\"0x7609d22e47e34f2ca2efe67b3d58ada3442de8543b9f4e6b732b84ab784124c1\",\"license\":\"MIT\"},\"contracts/IPRNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPRNG {\\n  function generate() external;\\n  function read(uint64 max) external returns (uint64);\\n}\",\"keccak256\":\"0x1059e1dce605822ed165f9d92ee9ede30fd7ee219d5dd8cd896ef3ca92807e7c\",\"license\":\"MIT\"},\"contracts/ISkillToken.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.5.0;\\n\\ninterface ISkillToken {\\n    // IERC20Metadata\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    // IERC20\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);    \\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    // SnookGame extension\\n    function burn(address, uint256) external;\\n}\",\"keccak256\":\"0x2a28799b5cf2bdc40bee27444bcb8566fe226ae57b4f47fb02f3f990a051218a\",\"license\":\"Unlicense\"},\"contracts/ISnookGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IDescriptorUser.sol\\\";\\n\\ninterface ISnookGame is IDescriptorUser {\\n  event GameAllowed(address indexed from, uint tokenId);\\n  event Entry(address indexed from, uint tokenId);\\n  event Extraction(address indexed to, uint tokenId);\\n  event Death(\\n    address indexed to, \\n    uint tokenId, \\n    uint killerTokenId, \\n    uint remainingLives,\\n    uint killerChainId\\n  );\\n  event Killing(\\n    address indexed to,\\n    uint tokenId,\\n    uint killedTokenId,\\n    uint killedChainId\\n  );\\n  event Birth2(address indexed to, uint tokenId, uint price, uint traitId);\\n  event PpkClaimed(address indexed to, uint rewardsAmount);\\n  \\n  function getBurnSafeAddress() view external returns(address);\\n  function isBridged() view external returns(bool);\\n  function getSNOOKAddress() external view returns (address);\\n  function getSNKAddress() external view returns (address);\\n  // function getSkinRewardsAddress() external view returns (address);\\n  function getSnookStateAddress() external view returns (address);\\n  function getAfterdeathAddress() external view returns (address);\\n  function getUniswapUSDCSkillAddress() external view returns (address);\\n\\n  function describe(uint tokenId) external view returns (Descriptor memory d);\\n  function mint2(uint count) external returns (uint[] memory);\\n  function enterGame2(uint256 tokenId) external;\\n\\n  function extractSnooksWithoutUpdate(uint256[] memory tokenIds) external;\\n  \\n  function extractSnook(\\n    uint256 tokenId, \\n    uint traitCount, \\n    uint stars, \\n    uint score, \\n    string memory tokenURI_\\n  ) external;\\n  \\n  function reportKill(\\n      uint256 tokenId, \\n      uint traitCount,\\n      uint stars,\\n      string memory tokenURI,\\n      uint killerTokenId,\\n      bool unlock\\n  ) external;\\n  \\n  function reportKilled(\\n    uint tokenId,\\n    uint traitCount,\\n    uint stars,\\n    string calldata tokenURI,\\n    uint killerTokenId,\\n    bool unlock,\\n    uint killerChainId // for log only\\n  ) external;\\n  \\n  function reportKiller(\\n    uint tokenId,\\n    uint killedTokenId,   // for log only\\n    uint killedChainId    // for log only\\n  ) external;\\n\\n  function getPpkCounter() view external returns(uint);\\n  function increamentPpkCounter() external;\\n  function computePpk() view external returns (uint);\\n  function getKillsAndComputePpkRewards(address account) \\n    view external returns (uint kills, uint rewardsAmount);\\n  function claimPpkRewards() external;\\n  function getLivesPerSnook() external pure returns(uint);\\n\\n  function pause() external;\\n  function unpause() external;\\n}\",\"keccak256\":\"0x82c42941e9c62ecf736d32b6c59543cf18fd2cf42ccbc2bab1e84579c27b6232\",\"license\":\"MIT\"},\"contracts/ISnookState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDescriptorUser.sol\\\";\\n\\ninterface ISnookState is IDescriptorUser { \\n  function getSnookGameAddress() external view returns (address);\\n  function getMarketplaceAddress() external view returns (address);\\n  function getAfterdeathAddress() external view returns (address);\\n  \\n  function getDescriptor(uint tokenId) external view returns(Descriptor memory);\\n  function setDescriptor(uint tokenId, Descriptor memory descriptor) external;\\n  function setDescriptors(uint[] calldata tokenIds, Descriptor[] calldata descriptors) external;\\n\\n  function deleteDescriptor(uint tokenId) external;\\n}\",\"keccak256\":\"0x76a11b67e83719bb16fd3904b95d521d18866e8c9249d74f9a4087cd01623178\",\"license\":\"MIT\"},\"contracts/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nuint constant PayeeCount = 3;\\n\\ninterface ITreasury {\\n  enum PayeeIds { FOUNDERS, STAKING, SKIN }\\n  \\n  event Transfer(address payee, uint amount);\\n  event MintFundsAccepted(uint amount);\\n  event ResurrectionFundsAccepted(uint amount);\\n  event AcceptedFundsDistributed(uint amountPpk, uint amountStaking, uint amountTournaments);\\n\\n  function transfer() external;\\n  function getPayees() external view returns (address[PayeeCount] memory);\\n  function getSharesInCentipercents() external view returns (uint[PayeeCount] memory);\\n  function getCyclesInDays() external view returns (uint[PayeeCount] memory);\\n  function getPayTimes() external view returns (uint[PayeeCount] memory);\\n  function getSecondsInDay() external view returns (uint);\\n  function getSNKAddress() external view returns (address);\\n\\n  // ev2\\n  function getPpkBalance() external view returns (uint);\\n  function getTournamentsBalance() external view returns (uint);\\n  function getLpStakingBalance() external view returns (uint);\\n  function acceptMintFunds(uint amount) external; \\n  function acceptResurrectionFunds(uint amount) external;\\n  \\n  function payPpkRewards(address recipient, uint amount) external;\\n\\n  // luckwheel\\n  function mintLuckWheelSNOOK(address to) external returns(uint);\\n  function awardLuckWheelSNK(address to, uint prizeAmount) external;\\n}\",\"keccak256\":\"0xcc5e42400c7d218c0b6121d95962288c7899374395abc0270be21a3e124ec525\",\"license\":\"MIT\"},\"contracts/IUniswapUSDCSkill.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.6;\\n\\ninterface IUniswapUSDCSkill {\\n  function getSnookPriceInSkills() external view returns (uint);\\n}\",\"keccak256\":\"0xfda1e98c3860b17d44675695bcb690e286d2f160f8276c450c17ffbd34ad4e29\",\"license\":\"Unlicense\"},\"contracts/SnookGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./ISkillToken.sol\\\";\\nimport \\\"./SnookToken.sol\\\";\\nimport \\\"./IDescriptorUser.sol\\\";\\nimport \\\"./ISnookState.sol\\\";\\nimport \\\"./IAfterdeath.sol\\\";\\nimport \\\"./IUniswapUSDCSkill.sol\\\";\\nimport \\\"./ISnookGame.sol\\\";\\nimport \\\"./IPRNG.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\n\\n// about tokenURI in v4: https://forum.openzeppelin.com/t/function-settokenuri-in-erc721-is-gone-with-pragma-0-8-0/5978\\n\\ncontract SnookGame is ISnookGame, AccessControlEnumerableUpgradeable, PausableUpgradeable {\\n    event GasUsage(uint g1, uint g2);\\n\\n    uint private constant LIVES_PER_SNOOK = 5;\\n    uint public constant TRAITCOUNT_MINT2 = 1;\\n\\n    bytes32 public constant EXTRACTOR_ROLE = keccak256(\\\"EXTRACTOR_ROLE\\\");\\n    bytes32 public constant EMERGENCY_EXTRACTOR_ROLE = keccak256(\\\"EMERGENCY_EXTRACTOR_ROLE\\\");\\n    bytes32 public constant KILLER_ROLE = keccak256(\\\"KILLER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    string private constant IPFS_URL_PREFIX = 'ipfs://';\\n\\n    uint private constant BASE_COLORS = 0;\\n    uint64 private constant LENGTH_COLORS = 20;\\n\\n    uint private constant BASE_PATTERNS = BASE_COLORS + LENGTH_COLORS;\\n    uint64 private constant LENGTH_PATTERNS = 20;\\n\\n    uint private constant BASE_WEARABLE_UPPER_BODY = BASE_PATTERNS + LENGTH_PATTERNS;\\n    uint64 private constant LENGTH_WEARABLE_UPPER_BODY = 3;\\n\\n    uint private constant BASE_WEARABLE_BOTTOM_BODY = BASE_WEARABLE_UPPER_BODY + LENGTH_WEARABLE_UPPER_BODY;\\n    uint64 private constant LENGTH_WEARABLE_BOTTOM_BODY = 3;\\n\\n    uint private constant BASE_WEARABLE_UPPER_HEAD = BASE_WEARABLE_BOTTOM_BODY + LENGTH_WEARABLE_BOTTOM_BODY;\\n    uint64 private constant LENGTH_WEARABLE_UPPER_HEAD = 3;\\n\\n    uint private constant BASE_WEARABLE_BOTTOM_HEAD = BASE_WEARABLE_UPPER_HEAD + LENGTH_WEARABLE_UPPER_HEAD;\\n    uint64 private constant LENGTH_WEARABLE_BOTTOM_HEAD = 3;\\n\\n    uint public constant MINT_BURN_PERCENTAGE = 20;\\n    uint public constant MINT_ECOSYSTEM_PERCENTAGE = 4;\\n    uint public constant MINT_TREASURY_PERCENTAGE = 76;\\n\\n    SnookToken private _snook;\\n    ISkillToken private _skill;\\n    IUniswapUSDCSkill private _uniswap;\\n    // ISkinRewards private _skinRewards;\\n    uint private _UNUSED; // has non-default value (removed skinRewards contract address)\\n    ISnookState private _state;\\n    IAfterdeath private _afterdeath;\\n\\n    IPRNG private _prng;\\n    string[52] private _mintTokenCIDs;\\n\\n    // ev2\\n    uint private _spc; // adjusted on reward claim;\\n    mapping(address => uint) private accountKills;\\n    address private _ecosystem;  \\n    ITreasury private _treasury; \\n\\n    address private _burnsafe;\\n    bool private _isBridged;\\n    bool private _isInitialized4;\\n\\n    function getBurnSafeAddress() view external override returns(address) {\\n      return _burnsafe; \\n    }\\n\\n    function isBridged() view external override returns(bool) {\\n      return _isBridged;\\n    }\\n\\n    function getSNOOKAddress() external override view returns (address) {\\n      return address(_snook);\\n    }\\n\\n    function getSNKAddress() external override view returns (address) {\\n      return address(_skill);\\n    }\\n\\n    function getUniswapUSDCSkillAddress() external override view returns (address) {\\n      return address(_uniswap);\\n    }\\n\\n    function getSnookStateAddress() external override view returns (address) {\\n      return address(_state);\\n    }\\n\\n    function getAfterdeathAddress() external override view returns (address) {\\n      return address(_afterdeath);\\n    }\\n\\n    function getLivesPerSnook() external override pure returns (uint) {\\n      return LIVES_PER_SNOOK;\\n    }\\n\\n    function initialize(\\n        address state, \\n        address snook, \\n        address skill, \\n        address uniswap,\\n        address afterdeath,\\n        address adminAccount \\n    ) initializer public {\\n        __AccessControlEnumerable_init();\\n        __Pausable_init();\\n        _uniswap = IUniswapUSDCSkill(uniswap);\\n        _snook = SnookToken(snook);\\n        _skill = ISkillToken(skill);\\n        _state = ISnookState(state);\\n        _afterdeath = IAfterdeath(afterdeath);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, adminAccount);\\n        _setupRole(PAUSER_ROLE, adminAccount);\\n    }\\n\\n    function initialize2(\\n      address prng,\\n      string[52] memory mintTokenCIDs\\n    ) public {\\n      require(address(_prng) == address(0), 'SnookGame: already executed');\\n      _prng = IPRNG(prng);\\n      _mintTokenCIDs = mintTokenCIDs;\\n    }\\n\\n    // ev2\\n    modifier onlyAfterdeath {\\n      require(msg.sender == address(_afterdeath), 'Not afterdeath');\\n      _;\\n    }\\n\\n    function initialize3(address ecosystem, address treasury) public {\\n      require(_ecosystem == address(0), 'SnookGame: already executed');\\n      _ecosystem = ecosystem;\\n      _treasury = ITreasury(treasury);\\n      _spc = _afterdeath.getAliveSnookCount();\\n    }\\n\\n    function initialize4(bool isBridged_, address burnsafe) public {\\n      require(_isInitialized4 == false, 'SnookGame: already executed');\\n      _UNUSED = 0; // to make it default 0 value\\n      _isBridged = isBridged_;\\n      _burnsafe = burnsafe;\\n      _isInitialized4 = true;\\n    }\\n\\n    function increamentPpkCounter() external override onlyAfterdeath {\\n      _spc++;\\n    }\\n\\n    function getPpkCounter() view external override returns(uint) {\\n      return _spc;\\n    }\\n\\n    function describe(uint tokenId) external override view returns (Descriptor memory d)\\n    {\\n      d = _state.getDescriptor(tokenId);\\n    }\\n\\n    function strConcat(string memory s1, string memory s2) pure internal returns (string memory) {\\n      bytes memory b1 = bytes(s1);\\n      bytes memory b2 = bytes(s2);\\n      bytes memory b3 = new bytes(b1.length + b2.length);\\n      uint i = 0;\\n      for (uint j=0; j<b1.length; j++) {\\n        b3[i++] = b1[j];\\n      }\\n      for (uint j=0; j<b2.length; j++) {\\n        b3[i++] = b2[j];\\n      }\\n      return string(b3);\\n    }\\n    \\n    function _generateTokenURI() internal returns (string memory, uint) {\\n      _prng.generate();\\n      uint traitId = _prng.read(27) + 1; // getRnd(1,27)\\n      string memory tokenURI = '';\\n      uint base = 0;\\n      uint offset = 0;\\n      \\n\\n      if (traitId >= 1 && traitId <=5) {\\n        base = BASE_COLORS;\\n        offset = _prng.read(LENGTH_COLORS); // rnd[0,19]\\n      } \\n      else if (traitId >= 6 && traitId <= 15) { \\n        base = BASE_PATTERNS;\\n        offset = _prng.read(LENGTH_PATTERNS); // rnd[0,19]\\n      } \\n      else if (traitId >= 16 && traitId <=18) {\\n        base = BASE_WEARABLE_UPPER_BODY;\\n        offset = _prng.read(LENGTH_WEARABLE_UPPER_BODY); // rnd[0,2] \\n      }\\n\\n      else if (traitId >= 19 && traitId <= 21) {\\n        base = BASE_WEARABLE_BOTTOM_BODY;\\n        offset = _prng.read(LENGTH_WEARABLE_BOTTOM_BODY);\\n      }\\n\\n      else if (traitId >= 22 && traitId <= 24) {\\n        base = BASE_WEARABLE_UPPER_HEAD; // rnd[16,18]\\n        offset = _prng.read(LENGTH_WEARABLE_UPPER_HEAD);\\n      }\\n\\n      else if (traitId >= 25 && traitId <= 27) {\\n        base = BASE_WEARABLE_BOTTOM_HEAD;\\n        offset = _prng.read(LENGTH_WEARABLE_BOTTOM_HEAD);\\n      }\\n\\n      else { // exception \\n      }\\n\\n      tokenURI = strConcat(IPFS_URL_PREFIX, _mintTokenCIDs[base+offset]);\\n      return (tokenURI, traitId);\\n    }\\n\\n    function mint2(uint count) external override whenNotPaused() returns (uint[] memory){\\n      require(count > 0, 'SnookGame: should be greater than 0');\\n      \\n      uint price = _uniswap.getSnookPriceInSkills();\\n      uint amountPaid = count * price * LIVES_PER_SNOOK;\\n      require(\\n        _skill.transferFrom(\\n          msg.sender, // from \\n          address(this),  // to \\n          amountPaid\\n        ), \\n        'SnookGame: No funds'\\n      );\\n      \\n      string[] memory tokenURIs = new string[](count);\\n      Descriptor[] memory descriptors = new Descriptor[](count);\\n\\n      for (uint i=0; i<count; i++) {\\n        (string memory tokenURI, ) = _generateTokenURI();\\n        tokenURIs[i] = tokenURI;\\n\\n        descriptors[i] = Descriptor({\\n            score: 0,\\n            onResurrectionScore: 0,\\n            stars: 0,\\n            onResurrectionStars: 0,\\n            onGameEntryTraitCount: TRAITCOUNT_MINT2,\\n            traitCount: TRAITCOUNT_MINT2,\\n            onResurrectionTraitCount: 0,\\n            onResurrectionTokenURI: \\\"\\\",\\n            deathTime: 0,\\n            resurrectionPrice: 0,\\n            resurrectionCount: 0,\\n            gameAllowed: false,\\n            lives: LIVES_PER_SNOOK,\\n            forSale: false\\n        });\\n      }\\n\\n      uint[] memory tokenIds = _snook.multimint(msg.sender, tokenURIs);\\n      _state.setDescriptors(tokenIds, descriptors); \\n      \\n      _spc += count * LIVES_PER_SNOOK;\\n      uint amountToBurn = amountPaid * MINT_BURN_PERCENTAGE / 100;\\n      if (_isBridged == false) {\\n        _skill.burn(address(this), amountToBurn);\\n      } else {\\n        _skill.transfer(_burnsafe, amountToBurn);\\n      }\\n        \\n      uint amountToTreasury = amountPaid * MINT_TREASURY_PERCENTAGE / 100;\\n      // let treasury pull it's part from this contract and distribute it as it wants\\n      _skill.approve(address(_treasury), amountToTreasury);     \\n      _treasury.acceptMintFunds(amountToTreasury);\\n\\n      uint amountToEcosystem = amountPaid - amountToBurn - amountToTreasury;\\n      _skill.transfer(_ecosystem, amountToEcosystem);\\n\\n      _afterdeath.updateOnMint(TRAITCOUNT_MINT2*count, count);\\n\\n      return tokenIds;\\n    }\\n\\n    function enterGame2(uint256 tokenId) external override whenNotPaused() {\\n      require(msg.sender == _snook.ownerOf(tokenId), 'Not snook owner');\\n      require(_snook.isLocked(tokenId) == false, 'In play');\\n      _snook.lock(tokenId, true, 'enterGame2');\\n      emit Entry(_snook.ownerOf(tokenId), tokenId);\\n    }\\n\\n    // extract snook without updating traits and url\\n    function _extractSnookWithoutUpdate(uint256 tokenId) private {\\n      Descriptor memory d = _state.getDescriptor(tokenId);\\n      require(_snook.isLocked(tokenId) == true, 'Not in play');\\n      require(d.deathTime == 0, 'Dead');\\n      _snook.lock(tokenId, false, 'emergencyExtract');\\n      emit Extraction(_snook.ownerOf(tokenId), tokenId);\\n    }\\n\\n    // Extracts snooks with ids without updating traits and uris. \\n    // Called on GS failure.\\n    // Can be replaced by looping over _extractFromGame from WS, but we want to save gas. \\n    function extractSnooksWithoutUpdate(uint256[] memory tokenIds) \\n      external override onlyRole(EMERGENCY_EXTRACTOR_ROLE) whenNotPaused()\\n    {\\n      for (uint i = 0; i < tokenIds.length; i++) {\\n        _extractSnookWithoutUpdate(tokenIds[i]);\\n      }\\n    }\\n\\n    // called by WS when snook successfully extracts snook\\n    function extractSnook(\\n      uint256 tokenId, \\n      uint traitCount, \\n      uint stars, \\n      uint score, \\n      string calldata tokenURI_\\n    ) external override onlyRole(EXTRACTOR_ROLE) whenNotPaused()\\n    {\\n      Descriptor memory d = _state.getDescriptor(tokenId);\\n      require(_snook.isLocked(tokenId) == true, 'Not in play');\\n      require(d.deathTime == 0, 'Dead');\\n\\n      require(stars<=4, 'SnookGame: cannot assign more than 4 stars');\\n\\n      _afterdeath.updateOnExtraction(d.onGameEntryTraitCount, traitCount);\\n      _snook.setTokenURI(tokenId, tokenURI_); \\n      d.traitCount = traitCount; \\n      d.onGameEntryTraitCount = traitCount;\\n      d.stars = stars;\\n      d.score = score;\\n    \\n      _state.setDescriptor(tokenId, d);\\n      _snook.lock(tokenId, false, 'extract');\\n\\n      emit Extraction(_snook.ownerOf(tokenId), tokenId);\\n    }\\n\\n    \\n    function reportKiller(\\n      uint tokenId,\\n      uint killedTokenId,   // for log only\\n      uint killedChainId    // for log only\\n    ) external override onlyRole(KILLER_ROLE) whenNotPaused \\n    {\\n      require(_snook.exists(tokenId) == true, 'SnookGame: killer token does not exist');\\n      address account = _snook.ownerOf(tokenId);\\n      accountKills[account] += 1;\\n\\n      emit Killing(\\n        _snook.ownerOf(tokenId),\\n        tokenId,\\n        killedTokenId, \\n        killedChainId\\n      );\\n    }\\n\\n    function reportKilled(\\n      uint tokenId,\\n      uint traitCount,\\n      uint stars,\\n      string calldata tokenURI,\\n      uint killerTokenId,\\n      bool unlock,\\n      uint killerChainId // for log only\\n    ) external override onlyRole(KILLER_ROLE) whenNotPaused\\n    {\\n      Descriptor memory d = _state.getDescriptor(tokenId);\\n      require(_snook.isLocked(tokenId) == true, 'SnookGame: not in play'); // prevent wallet server from errors\\n      require(d.deathTime == 0, 'SnookGame: token is already dead');\\n\\n      if (killerTokenId == tokenId) {\\n        _spc -= 1;\\n      }\\n\\n      if (d.lives > 0) {\\n        d.lives -= 1;\\n      }\\n     \\n      if (d.lives == 0) { \\n        d.deathTime = block.timestamp;\\n        d.resurrectionPrice = _afterdeath.getResurrectionPrice(tokenId);\\n        d.onResurrectionTraitCount = traitCount;\\n        d.onResurrectionStars = stars; \\n        d.onResurrectionTokenURI = tokenURI;\\n        _afterdeath.toMorgue(tokenId);\\n        _afterdeath.updateOnDeath(d.traitCount);\\n      } else { // lives > 0 therefore we look at unlock request by user\\n        if (unlock == true) {\\n          _snook.lock(tokenId, false, 'unlock by user');\\n        }\\n      }\\n      _state.setDescriptor(tokenId, d);\\n      emit Death(_snook.ownerOf(tokenId), tokenId, killerTokenId, d.lives, killerChainId);\\n    }\\n\\n    function reportKill(\\n      uint256 tokenId, \\n      uint traitCount,\\n      uint stars,\\n      string calldata tokenURI,\\n      uint killerTokenId,\\n      bool unlock\\n    ) external override onlyRole(KILLER_ROLE) whenNotPaused {\\n      Descriptor memory d = _state.getDescriptor(tokenId);\\n      require(_snook.exists(killerTokenId) == true, 'Killer token does not exist');\\n      require(_snook.isLocked(tokenId) == true, 'Not in play'); // prevent wallet server from errors\\n            \\n      require(d.deathTime == 0, 'SnookGame: token is already dead');\\n      \\n      if (killerTokenId == tokenId) {\\n        _spc -= 1;\\n      }\\n      else { // not suicide\\n        address account = _snook.ownerOf(killerTokenId);\\n        accountKills[account] += 1;\\n      }\\n      // Commented out to save gas: no usage except tracking\\n      // _snook.setKillerTokenId(tokenId, killerTokenId); \\n      \\n      if (d.lives > 0) {\\n        d.lives -= 1;\\n      }\\n     \\n      if (d.lives == 0) { \\n        d.deathTime = block.timestamp;\\n        d.resurrectionPrice = _afterdeath.getResurrectionPrice(tokenId);\\n        d.onResurrectionTraitCount = traitCount;\\n        d.onResurrectionStars = stars; \\n        d.onResurrectionTokenURI = tokenURI;\\n        _afterdeath.toMorgue(tokenId);\\n        _afterdeath.updateOnDeath(d.traitCount);\\n      } else { // lives > 0 therefore we look at unlock request by user\\n        if (unlock == true) {\\n          _snook.lock(tokenId, false, 'unlock by user');\\n        }\\n      }\\n      _state.setDescriptor(tokenId, d);\\n      \\n      emit Death(_snook.ownerOf(tokenId), tokenId, killerTokenId, d.lives, block.chainid);\\n    }\\n\\n    function _computePpk() view internal returns (uint) {\\n      uint ppk = 0;\\n      if (_spc > 0) {\\n        ppk = _treasury.getPpkBalance() / _spc;\\n      }\\n      return ppk;\\n    }\\n\\n    function computePpk() view external override returns(uint) {\\n      return _computePpk();\\n    }\\n\\n    function _getKillsAndComputePpkRewards(address account) view internal returns(uint, uint) {\\n      uint rewards = _computePpk() * accountKills[account];\\n      return (accountKills[account], rewards);\\n    }\\n\\n    function getKillsAndComputePpkRewards(address account) view external override returns(uint, uint) {\\n      return _getKillsAndComputePpkRewards(account);\\n    }\\n\\n    function claimPpkRewards() external override {\\n      address account = msg.sender;\\n      (, uint rewardsAmount) = _getKillsAndComputePpkRewards(account);\\n      require(rewardsAmount>0, 'No rewards');\\n      _spc -= accountKills[account];\\n      accountKills[account] = 0;\\n      _treasury.payPpkRewards(account, rewardsAmount);\\n      emit PpkClaimed(account, rewardsAmount);\\n    }\\n\\n    function pause() external override onlyRole(PAUSER_ROLE) whenNotPaused() {\\n      _pause();\\n    }\\n\\n    function unpause() external override onlyRole(PAUSER_ROLE) whenPaused() {\\n      _unpause();\\n    }\\n}\",\"keccak256\":\"0xa80e54e99f03954e69b8f9dc1b9b3dc2b791bb1fa4b356726ad964109554a780\",\"license\":\"MIT\"},\"contracts/SnookToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n// about tokenURI in v4: https://forum.openzeppelin.com/t/function-settokenuri-in-erc721-is-gone-with-pragma-0-8-0/5978\\n\\ncontract SnookToken is ERC721Upgradeable, ERC721BurnableUpgradeable, ERC721EnumerableUpgradeable, OwnableUpgradeable {\\n    event Locked(address indexed from, uint tokenId, bool locked, string reason);\\n\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n    mapping (uint => string) private _tokenURIs;\\n    mapping (uint => bool ) private _locked;\\n    \\n    address private _game;\\n    address private _afterdeath;\\n    address private _UNUSED;\\n\\n    mapping(uint => uint[2]) private _UNUSED2; \\n    address private _UNUSED3; \\n    mapping(uint=>uint) _tokenKillerToken;\\n\\n    address private _marketplace;\\n\\n    modifier onlyGameContracts {\\n      require(\\n        msg.sender == _game ||         \\n        msg.sender == _afterdeath ||\\n        msg.sender == _marketplace,\\n        'SnookToken: Not game contracts'\\n      );\\n      _;\\n    }\\n\\n    function initialize(\\n      address game,\\n      address afterdeath,\\n      //address sge,\\n      string memory tokenName,\\n      string memory tokenSymbol\\n    ) initializer public {\\n        __ERC721_init(tokenName, tokenSymbol);\\n        __ERC721Burnable_init();\\n        __ERC721Enumerable_init();\\n        __Ownable_init();\\n\\n        _game = game;\\n        _afterdeath = afterdeath;\\n        //_sge = sge;\\n\\n    }\\n    \\n    function initialize3(address marketplace) public {\\n      require(_marketplace == address(0), 'SnookToken: already initialized');\\n      _marketplace = marketplace;\\n    }\\n\\n    \\n\\n    function setKillerTokenId(uint tokenId, uint killerTokenId) public onlyGameContracts {\\n      _tokenKillerToken[tokenId] = killerTokenId;\\n    } \\n\\n    function getKillerTokenId(uint tokenId) public view returns (uint) {\\n      require(_exists(tokenId), \\\"SnookToken: token does not exist\\\");\\n      return _tokenKillerToken[tokenId];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return _tokenURIs[tokenId];\\n    }\\n    \\n    // used by resurrection from Game constract\\n    function setTokenURI(uint256 tokenId, string memory tokenURI_) public onlyGameContracts() {  \\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = tokenURI_;\\n    }\\n\\n    function mint(address to, string memory tokenURI_) public onlyGameContracts() returns (uint256)\\n    {\\n        _tokenIds.increment(); // start token sequence from 1\\n        uint256 tokenId = _tokenIds.current();\\n        _mint(to, tokenId);  \\n        setTokenURI(tokenId, tokenURI_);\\n        return tokenId;\\n    }\\n\\n    function multimint(address to, string[] calldata tokenURIs) \\n      external onlyGameContracts() returns (uint[] memory) \\n    {\\n      uint[] memory tokenIds = new uint[](tokenURIs.length);\\n      for (uint i=0; i<tokenURIs.length; i++) {\\n        tokenIds[i] = mint(to, tokenURIs[i]);\\n      }\\n      return tokenIds;\\n    }\\n\\n    function burn(uint256 tokenId) public virtual override onlyGameContracts() {\\n        _burn(tokenId);\\n    }\\n\\n    function exists(uint256 tokenId) public view returns(bool) {\\n      return _exists(tokenId);\\n    }\\n\\n    // lock token if it's in play\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) \\n        internal virtual \\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable) \\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        require(_locked[tokenId] == false, 'SnookToken: Token is locked');\\n    }\\n\\n    // https://forum.openzeppelin.com/t/derived-contract-must-override-function-supportsinterface/6315/2\\n    function supportsInterface(bytes4 interfaceId) public view \\n      virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) \\n      returns (bool) \\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function lock(uint tokenId, bool on, string memory reason) external onlyGameContracts() {\\n        _locked[tokenId] = on;\\n        emit Locked(ownerOf(tokenId), tokenId, on, reason);\\n    } \\n\\n    function isLocked(uint tokenId) view external returns (bool) {\\n        require(_exists(tokenId) == true, \\\"ERC721: isLocked query for nonexistent token\\\");\\n        return _locked[tokenId];\\n    }\\n}\",\"keccak256\":\"0x45646c6da6adbbe2f74fa56f3623796440e1d2ab76ae728e850f038dafb6326c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f40806100206000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c8063a217fddf1161015c578063cc2a9a5b116100ce578063f216b71211610087578063f216b712146104e5578063f697081a146104ed578063f7707537146104f5578063f815d62f14610515578063f8d05b101461051d578063faaf9e3d146105255761027f565b8063cc2a9a5b14610494578063cf39ce4f146104a7578063d547741f146104af578063e3643046146104c2578063e63ab1e9146104ca578063e6d7d0cd146104d25761027f565b8063bbfce7e711610120578063bbfce7e714610443578063bf042def14610456578063bf499d5f1461045e578063ca15c87314610466578063cab85f3714610479578063cb3794d4146104815761027f565b8063a217fddf14610405578063ad12d5231461040d578063b3d0108114610420578063b5ef727d14610428578063b85f2108146104305761027f565b80635c975abb116101f55780638765c91f116101b95780638765c91f146103b45780639010d07c146103bc57806391d14854146103cf5780639651a2bc146103e25780639e1ca919146103f5578063a1e66c6a146103fd5761027f565b80635c975abb146103735780635c9bd33b1461037b5780635d599ee51461038357806370debac91461038b5780638456cb59146103ac5761027f565b806336568abe1161024757806336568abe146102ff5780633aa18088146103125780633f4ba83a14610332578063553a9c1a1461033a57806356f230581461034d57806356f59a46146103605761027f565b806301ffc9a7146102845780630b751db5146102ad57806323d0b9e4146102c2578063248a9ca3146102ca5780632f2ff15d146102ea575b600080fd5b610297610292366004614122565b61052d565b6040516102a4919061470f565b60405180910390f35b6102b561055a565b6040516102a491906145ca565b6102b5610569565b6102dd6102d83660046140c5565b610578565b6040516102a4919061471a565b6102fd6102f83660046140dd565b61058d565b005b6102fd61030d3660046140dd565b6105b4565b6103256103203660046140c5565b6105d6565b6040516102a4919061468c565b6102fd610d81565b6102fd610348366004614317565b610dd0565b6102fd61035b3660046140a8565b6112f9565b6102fd61036e366004613f7a565b611371565b610297611411565b61029761141a565b6102dd61142b565b61039e610399366004613dc3565b61144f565b6040516102a4929190614c93565b6102fd611464565b6102b56114ac565b6102b56103ca366004614101565b6114bb565b6102976103dd3660046140dd565b6114dc565b6102fd6103f0366004613eb4565b611507565b6102dd61155b565b6102dd611562565b6102dd611574565b6102fd61041b3660046140c5565b611579565b6102b5611813565b6102dd611823565b6102fd61043e36600461429c565b611828565b6102fd610451366004614271565b611ead565b6102fd61210e565b6102dd612151565b6102dd6104743660046140c5565b612156565b6102b561216d565b6102fd61048f36600461439b565b61217c565b6102fd6104a2366004613e33565b6125b4565b6102dd6126b9565b6102fd6104bd3660046140dd565b6126be565b6102dd6126c8565b6102dd6126cd565b6102fd6104e0366004613dfb565b6126df565b6102dd6127b7565b6102b56127db565b6105086105033660046140c5565b6127eb565b6040516102a49190614b62565b6102dd612877565b6102dd612886565b6102fd61288b565b60006001600160e01b03198216635a05180f60e01b14806105525750610552826129ac565b90505b919050565b60fc546001600160a01b031690565b60fb546001600160a01b031690565b60009081526065602052604090206001015490565b61059782826129d1565b60008281526097602052604090206105af90826129f0565b505050565b6105be8282612a05565b60008281526097602052604090206105af9082612a4b565b60606105e0611411565b156106065760405162461bcd60e51b81526004016105fd90614908565b60405180910390fd5b600082116106265760405162461bcd60e51b81526004016105fd906149f3565b60fd546040805163b7d0020760e01b815290516000926001600160a01b03169163b7d00207916004808301926020929190829003018186803b15801561066b57600080fd5b505afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190614259565b9050600060056106b38386614da8565b6106bd9190614da8565b60fc546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd906106f2903390309086906004016145de565b602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061408c565b6107605760405162461bcd60e51b81526004016105fd9061489c565b6000846001600160401b0381111561078857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107bb57816020015b60608152602001906001900390816107a65790505b5090506000856001600160401b038111156107e657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561081f57816020015b61080c613b71565b8152602001906001900390816108045790505b50905060005b86811015610923576000610837612a60565b5090508084838151811061085b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806101c0016040528060008152602001600081526020016001815260200160008152602001600081526020016000815260200160008152602001600081526020016040518060200160405280600081525081526020016001815260200160008152602001600015158152602001600581526020016000151581525083838151811061090457634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061091b90614e60565b915050610825565b5060fb5460405163f24d5aeb60e01b81526000916001600160a01b03169063f24d5aeb906109579033908790600401614602565b600060405180830381600087803b15801561097157600080fd5b505af1158015610985573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ad9190810190614009565b60ff54604051636d733a1760e01b81529192506001600160a01b031690636d733a17906109e0908490869060040161469f565b600060405180830381600087803b1580156109fa57600080fd5b505af1158015610a0e573d6000803e3d6000fd5b50505050600587610a1f9190614da8565b6101366000828254610a319190614d45565b90915550600090506064610a46601487614da8565b610a509190614d88565b61013a54909150600160a01b900460ff16610ace5760fc54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610a979030908590600401614673565b600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b50505050610b59565b60fc5461013a5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610b05929116908590600401614673565b602060405180830381600087803b158015610b1f57600080fd5b505af1158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061408c565b505b60006064610b68604c88614da8565b610b729190614d88565b60fc546101395460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392610bab9216908590600401614673565b602060405180830381600087803b158015610bc557600080fd5b505af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd919061408c565b5061013954604051636ddd6c8b60e11b81526001600160a01b039091169063dbbad91690610c2f90849060040161471a565b600060405180830381600087803b158015610c4957600080fd5b505af1158015610c5d573d6000803e3d6000fd5b505050506000818388610c709190614dc7565b610c7a9190614dc7565b60fc546101385460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92610cb39216908590600401614673565b602060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061408c565b50610100546001600160a01b03166352691516610d238c6001614da8565b8c6040518363ffffffff1660e01b8152600401610d41929190614c93565b600060405180830381600087803b158015610d5b57600080fd5b505af1158015610d6f573d6000803e3d6000fd5b50959c9b505050505050505050505050565b600080516020614eeb833981519152610da181610d9c612e62565b612e66565b610da9611411565b610dc55760405162461bcd60e51b81526004016105fd906147f1565b610dcd612eca565b50565b600080516020614ecb833981519152610deb81610d9c612e62565b610df3611411565b15610e105760405162461bcd60e51b81526004016105fd90614908565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90610e41908d9060040161471a565b60006040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e95919081019061414a565b60fb5460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb190610ec6908d9060040161471a565b60206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f16919061408c565b1515600114610f375760405162461bcd60e51b81526004016105fd906147c1565b61014081015115610f5a5760405162461bcd60e51b81526004016105fd90614aba565b89851415610f7c5760016101366000828254610f769190614dc7565b90915550505b61018081015115610f9f5760018161018001818151610f9b9190614dc7565b9052505b61018081015161114d574261014082015261010054604051633f4cd3a760e11b81526001600160a01b0390911690637e99a74e90610fe1908d9060040161471a565b60206040518083038186803b158015610ff957600080fd5b505afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190614259565b606082015260e0810189905260c08101889052604080516020601f8901819004810282018101909252878152908890889081908401838280828437600092019190915250505050610100808301919091525460405163eb427dcf60e01b81526001600160a01b039091169063eb427dcf906110b0908d9060040161471a565b600060405180830381600087803b1580156110ca57600080fd5b505af11580156110de573d6000803e3d6000fd5b5050610100546040808501519051633d87fbdd60e21b81526001600160a01b03909216935063f61fef7492506111169160040161471a565b600060405180830381600087803b15801561113057600080fd5b505af1158015611144573d6000803e3d6000fd5b505050506111be565b600184151514156111be5760fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d79061118b908d90600090600401614b75565b600060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050505b60ff5460405163366a446b60e21b81526001600160a01b039091169063d9a911ac906111f0908d908590600401614c7a565b600060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e9150611252908d9060040161471a565b60206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190613ddf565b6001600160a01b03167fa56d5cc0fe722918425eb7b68f147546cfdc6664d22823d16f60797fb9a2ba6d8b87846101800151876040516112e59493929190614cb7565b60405180910390a250505050505050505050565b61013a54600160a81b900460ff16156113245760405162461bcd60e51b81526004016105fd90614a83565b600060fe5561013a805460ff60a81b196001600160a01b039093166001600160a01b0319941515600160a01b0260ff60a01b1990921691909117939093169290921716600160a81b179055565b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e61139e81610d9c612e62565b6113a6611411565b156113c35760405162461bcd60e51b81526004016105fd90614908565b60005b82518110156105af576113ff8382815181106113f257634e487b7160e01b600052603260045260246000fd5b6020026020010151612f38565b8061140981614e60565b9150506113c6565b60c95460ff1690565b61013a54600160a01b900460ff1690565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc79281565b60008061145b8361319f565b91509150915091565b600080516020614eeb83398151915261147f81610d9c612e62565b611487611411565b156114a45760405162461bcd60e51b81526004016105fd90614908565b610dcd6131f2565b60fd546001600160a01b031690565b60008281526097602052604081206114d3908361324d565b90505b92915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610101546001600160a01b0316156115315760405162461bcd60e51b81526004016105fd90614a83565b61010180546001600160a01b0319166001600160a01b0384161790556105af610102826034613be4565b6101365490565b600080516020614ecb83398151915281565b600081565b611581611411565b1561159e5760405162461bcd60e51b81526004016105fd90614908565b60fb546040516331a9108f60e11b81526001600160a01b0390911690636352211e906115ce90849060040161471a565b60206040518083038186803b1580156115e657600080fd5b505afa1580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e9190613ddf565b6001600160a01b0316336001600160a01b03161461164e5760405162461bcd60e51b81526004016105fd906149ca565b60fb5460405163f6aacfb160e01b81526001600160a01b039091169063f6aacfb19061167e90849060040161471a565b60206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce919061408c565b156116eb5760405162461bcd60e51b81526004016105fd906148e7565b60fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d79061171e908490600190600401614bab565b600060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e915061178090849060040161471a565b60206040518083038186803b15801561179857600080fd5b505afa1580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d09190613ddf565b6001600160a01b03167f6badce09299f7f7600a82aeaaf2801e2ea536ed021bb15fde48fdc2b072934eb82604051611808919061471a565b60405180910390a250565b61013a546001600160a01b031690565b604c81565b600080516020614ecb83398151915261184381610d9c612e62565b61184b611411565b156118685760405162461bcd60e51b81526004016105fd90614908565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90611899908c9060040161471a565b60006040518083038186803b1580156118b157600080fd5b505afa1580156118c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ed919081019061414a565b60fb54604051634f558e7960e01b81529192506001600160a01b031690634f558e799061191e90879060040161471a565b60206040518083038186803b15801561193657600080fd5b505afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e919061408c565b151560011461198f5760405162461bcd60e51b81526004016105fd90614865565b60fb5460405163f6aacfb160e01b81526001600160a01b039091169063f6aacfb1906119bf908c9060040161471a565b60206040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f919061408c565b1515600114611a305760405162461bcd60e51b81526004016105fd90614a36565b61014081015115611a535760405162461bcd60e51b81526004016105fd90614aba565b88841415611a7a5760016101366000828254611a6f9190614dc7565b90915550611b319050565b60fb546040516331a9108f60e11b81526000916001600160a01b031690636352211e90611aab90889060040161471a565b60206040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb9190613ddf565b6001600160a01b0381166000908152610137602052604081208054929350600192909190611b2a908490614d45565b9091555050505b61018081015115611b545760018161018001818151611b509190614dc7565b9052505b610180810151611d02574261014082015261010054604051633f4cd3a760e11b81526001600160a01b0390911690637e99a74e90611b96908c9060040161471a565b60206040518083038186803b158015611bae57600080fd5b505afa158015611bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be69190614259565b606082015260e0810188905260c08101879052604080516020601f8801819004810282018101909252868152908790879081908401838280828437600092019190915250505050610100808301919091525460405163eb427dcf60e01b81526001600160a01b039091169063eb427dcf90611c65908c9060040161471a565b600060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b5050610100546040808501519051633d87fbdd60e21b81526001600160a01b03909216935063f61fef749250611ccb9160040161471a565b600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b50505050611d73565b60018315151415611d735760fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d790611d40908c90600090600401614b75565b600060405180830381600087803b158015611d5a57600080fd5b505af1158015611d6e573d6000803e3d6000fd5b505050505b60ff5460405163366a446b60e21b81526001600160a01b039091169063d9a911ac90611da5908c908590600401614c7a565b600060405180830381600087803b158015611dbf57600080fd5b505af1158015611dd3573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e9150611e07908c9060040161471a565b60206040518083038186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e579190613ddf565b6001600160a01b03167fa56d5cc0fe722918425eb7b68f147546cfdc6664d22823d16f60797fb9a2ba6d8a8684610180015146604051611e9a9493929190614cb7565b60405180910390a2505050505050505050565b600080516020614ecb833981519152611ec881610d9c612e62565b611ed0611411565b15611eed5760405162461bcd60e51b81526004016105fd90614908565b60fb54604051634f558e7960e01b81526001600160a01b0390911690634f558e7990611f1d90879060040161471a565b60206040518083038186803b158015611f3557600080fd5b505afa158015611f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6d919061408c565b1515600114611f8e5760405162461bcd60e51b81526004016105fd9061481f565b60fb546040516331a9108f60e11b81526000916001600160a01b031690636352211e90611fbf90889060040161471a565b60206040518083038186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613ddf565b6001600160a01b038116600090815261013760205260408120805492935060019290919061203e908490614d45565b909155505060fb546040516331a9108f60e11b81526001600160a01b0390911690636352211e9061207390889060040161471a565b60206040518083038186803b15801561208b57600080fd5b505afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c39190613ddf565b6001600160a01b03167fee68ddc9ef4813ba80957a7001ba51f8a83e3071c62f17c923d9bbb2b2071fe08686866040516120ff93929190614ca1565b60405180910390a25050505050565b610100546001600160a01b031633146121395760405162461bcd60e51b81526004016105fd90614a5b565b610136805490600061214a83614e60565b9190505550565b600590565b600081815260976020526040812061055290613259565b60ff546001600160a01b031690565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc7926121a981610d9c612e62565b6121b1611411565b156121ce5760405162461bcd60e51b81526004016105fd90614908565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d906121ff908b9060040161471a565b60006040518083038186803b15801561221757600080fd5b505afa15801561222b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612253919081019061414a565b60fb5460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb190612284908b9060040161471a565b60206040518083038186803b15801561229c57600080fd5b505afa1580156122b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d4919061408c565b15156001146122f55760405162461bcd60e51b81526004016105fd90614a36565b610140810151156123185760405162461bcd60e51b81526004016105fd906148c9565b60048611156123395760405162461bcd60e51b81526004016105fd90614980565b6101005461012082015160405163c97bafe160e01b81526001600160a01b039092169163c97bafe191612370918b90600401614c93565b600060405180830381600087803b15801561238a57600080fd5b505af115801561239e573d6000803e3d6000fd5b505060fb54604051630588253160e21b81526001600160a01b03909116925063162094c491506123d6908b9088908890600401614c44565b600060405180830381600087803b1580156123f057600080fd5b505af1158015612404573d6000803e3d6000fd5b50505050604080820188905261012082018890526020820187905285825260ff54905163366a446b60e21b81526001600160a01b039091169063d9a911ac90612453908b908590600401614c7a565b600060405180830381600087803b15801561246d57600080fd5b505af1158015612481573d6000803e3d6000fd5b505060fb5460405163bfbf01d760e01b81526001600160a01b03909116925063bfbf01d791506124b8908b90600090600401614c15565b600060405180830381600087803b1580156124d257600080fd5b505af11580156124e6573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e915061251a908b9060040161471a565b60206040518083038186803b15801561253257600080fd5b505afa158015612546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256a9190613ddf565b6001600160a01b03167f7faed872658ab10c4f98b4705a343cb26b9739b37e202617569d97fb3ddb7ef9896040516125a2919061471a565b60405180910390a25050505050505050565b600054610100900460ff16806125cd575060005460ff16155b6125e95760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff16158015612614576000805460ff1961ff0019909116610100171660011790555b61261c613264565b6126246132f8565b60fd80546001600160a01b03199081166001600160a01b038781169190911790925560fb8054821689841617905560fc8054821688841617905560ff805482168a84161790556101008054909116918516919091179055612686600083613368565b61269e600080516020614eeb83398151915283613368565b80156126b0576000805461ff00191690555b50505050505050565b600481565b6105be8282613372565b600181565b600080516020614eeb83398151915281565b610138546001600160a01b0316156127095760405162461bcd60e51b81526004016105fd90614a83565b61013880546001600160a01b038085166001600160a01b03199283161790925561013980548484169216919091179055610100546040805163938ce1f760e01b81529051919092169163938ce1f7916004808301926020929190829003018186803b15801561277757600080fd5b505afa15801561278b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127af9190614259565b610136555050565b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e81565b610100546001600160a01b031690565b6127f3613b71565b60ff54604051636a6f3e1d60e01b81526001600160a01b0390911690636a6f3e1d9061282390859060040161471a565b60006040518083038186803b15801561283b57600080fd5b505afa15801561284f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610552919081019061414a565b6000612881613391565b905090565b601481565b3360006128978261319f565b915050600081116128ba5760405162461bcd60e51b81526004016105fd90614aef565b6001600160a01b038216600090815261013760205260408120546101368054919290916128e8908490614dc7565b90915550506001600160a01b0380831660009081526101376020526040808220919091556101395490516384b13ac760e01b81529116906384b13ac7906129359085908590600401614673565b600060405180830381600087803b15801561294f57600080fd5b505af1158015612963573d6000803e3d6000fd5b50505050816001600160a01b03167f82575769d6cf83966efcd5cee6230e68d90a4f1aeca7508f57783f2e1cf2c3a6826040516129a0919061471a565b60405180910390a25050565b60006001600160e01b03198216637965db0b60e01b1480610552575061055282613434565b6129da82610578565b6129e681610d9c612e62565b6105af838361344d565b60006114d3836001600160a01b0384166134d4565b612a0d612e62565b6001600160a01b0316816001600160a01b031614612a3d5760405162461bcd60e51b81526004016105fd90614b13565b612a47828261351e565b5050565b60006114d3836001600160a01b0384166135a3565b6060600061010160009054906101000a90046001600160a01b03166001600160a01b0316632a1bbc346040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ab557600080fd5b505af1158015612ac9573d6000803e3d6000fd5b5050610101546040516344dc5a4960e11b8152600093506001600160a01b0390911691506389b8b49290612b0290601b90600401614723565b602060405180830381600087803b158015612b1c57600080fd5b505af1158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b549190614402565b612b5f906001614d5d565b6001600160401b03169050600060405180602001604052806000815250905060008060018410158015612b93575060058411155b15612c3057610101546040516344dc5a4960e11b8152600093506001600160a01b03909116906389b8b49290612bce90601490600401614723565b602060405180830381600087803b158015612be857600080fd5b505af1158015612bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c209190614402565b6001600160401b03169050612d7a565b60068410158015612c425750600f8411155b15612c8657612c5360146000614d45565b610101546040516344dc5a4960e11b81529193506001600160a01b0316906389b8b49290612bce90601490600401614723565b60108410158015612c98575060128411155b15612ce7576014612caa816000614d45565b612cb49190614d45565b610101546040516344dc5a4960e11b81529193506001600160a01b0316906389b8b49290612bce90600390600401614723565b60138410158015612cf9575060158411155b15612d175760036014612d0d816000614d45565b612caa9190614d45565b60168410158015612d29575060188411155b15612d48576003806014612d3e816000614d45565b612d0d9190614d45565b60198410158015612d5a5750601b8411155b15612d7a57600380806014612d70816000614d45565b612d3e9190614d45565b604080518082019091526007815266697066733a2f2f60c81b6020820152612e5690610102612da98486614d45565b60348110612dc757634e487b7160e01b600052603260045260246000fd5b018054612dd390614e25565b80601f0160208091040260200160405190810160405280929190818152602001828054612dff90614e25565b8015612e4c5780601f10612e2157610100808354040283529160200191612e4c565b820191906000526020600020905b815481529060010190602001808311612e2f57829003601f168201915b50505050506136ba565b95509293505050509091565b3390565b612e7082826114dc565b612a4757612e88816001600160a01b03166014613850565b612e93836020613850565b604051602001612ea4929190614555565b60408051601f198184030181529082905262461bcd60e51b82526105fd91600401614737565b612ed2611411565b612eee5760405162461bcd60e51b81526004016105fd906147f1565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f21612e62565b604051612f2e91906145ca565b60405180910390a1565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90612f6990859060040161471a565b60006040518083038186803b158015612f8157600080fd5b505afa158015612f95573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612fbd919081019061414a565b60fb5460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb190612fee90859060040161471a565b60206040518083038186803b15801561300657600080fd5b505afa15801561301a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303e919061408c565b151560011461305f5760405162461bcd60e51b81526004016105fd90614a36565b610140810151156130825760405162461bcd60e51b81526004016105fd906148c9565b60fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d7906130b5908590600090600401614bdd565b600060405180830381600087803b1580156130cf57600080fd5b505af11580156130e3573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e915061311790859060040161471a565b60206040518083038186803b15801561312f57600080fd5b505afa158015613143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131679190613ddf565b6001600160a01b03167f7faed872658ab10c4f98b4705a343cb26b9739b37e202617569d97fb3ddb7ef9836040516129a0919061471a565b6001600160a01b03811660009081526101376020526040812054819081906131c5613391565b6131cf9190614da8565b6001600160a01b0394909416600090815261013760205260409020549492505050565b6131fa611411565b156132175760405162461bcd60e51b81526004016105fd90614908565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f21612e62565b60006114d38383613a01565b600061055282613a5a565b600054610100900460ff168061327d575060005460ff16155b6132995760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff161580156132c4576000805460ff1961ff0019909116610100171660011790555b6132cc613a5e565b6132d4613a5e565b6132dc613a5e565b6132e4613a5e565b8015610dcd576000805461ff001916905550565b600054610100900460ff1680613311575060005460ff16155b61332d5760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff16158015613358576000805460ff1961ff0019909116610100171660011790555b613360613a5e565b6132e4613ad1565b6105978282613b4f565b61337b82610578565b61338781610d9c612e62565b6105af838361351e565b61013654600090819015612881576101365461013960009054906101000a90046001600160a01b03166001600160a01b0316637d817a356040518163ffffffff1660e01b815260040160206040518083038186803b1580156133f257600080fd5b505afa158015613406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342a9190614259565b6114d69190614d88565b6001600160e01b031981166301ffc9a760e01b14919050565b61345782826114dc565b612a475760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613490612e62565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006134e08383613b59565b613516575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556114d6565b5060006114d6565b61352882826114dc565b15612a475760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916905561355f612e62565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156136b05760006135c7600183614dc7565b85549091506000906135db90600190614dc7565b9050600086600001828154811061360257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061363357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526001890190915260409020849055865487908061367457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506114d6565b60009150506114d6565b80518251606091849184916000916136d29190614d45565b6001600160401b038111156136f757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613721576020820181803683370190505b5090506000805b84518110156137b45784818151811061375157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361376b81614e60565b94508151811061378b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806137ac81614e60565b915050613728565b5060005b8351811015613844578381815181106137e157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683836137fb81614e60565b94508151811061381b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061383c81614e60565b9150506137b8565b50909695505050505050565b6060600061385f836002614da8565b61386a906002614d45565b6001600160401b0381111561388f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156138b9576020820181803683370190505b509050600360fc1b816000815181106138e257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061391f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613943846002614da8565b61394e906001614d45565b90505b60018111156139e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061399057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106139b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936139db81614e0e565b9050613951565b5083156114d35760405162461bcd60e51b81526004016105fd9061478c565b81546000908210613a245760405162461bcd60e51b81526004016105fd9061474a565b826000018281548110613a4757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b5490565b600054610100900460ff1680613a77575060005460ff16155b613a935760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff161580156132e4576000805460ff1961ff0019909116610100171660011790558015610dcd576000805461ff001916905550565b600054610100900460ff1680613aea575060005460ff16155b613b065760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff16158015613b31576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191690558015610dcd576000805461ff001916905550565b612a47828261344d565b60009081526001919091016020526040902054151590565b604051806101c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600015158152602001600081526020016000151581525090565b8260348101928215613c24579160200282015b82811115613c245782518051613c14918491602090910190613c34565b5091602001919060010190613bf7565b50613c30929150613cb4565b5090565b828054613c4090614e25565b90600052602060002090601f016020900481019282613c625760008555613ca8565b82601f10613c7b57805160ff1916838001178555613ca8565b82800160010185558215613ca8579182015b82811115613ca8578251825591602001919060010190613c8d565b50613c30929150613cd1565b80821115613c30576000613cc88282613ce6565b50600101613cb4565b5b80821115613c305760008155600101613cd2565b508054613cf290614e25565b6000825580601f10613d045750610dcd565b601f016020900490600052602060002090810190610dcd9190613cd1565b805161055581614ebc565b60008083601f840112613d3e578182fd5b5081356001600160401b03811115613d54578182fd5b602083019150836020828501011115613d6c57600080fd5b9250929050565b600082601f830112613d83578081fd5b8151613d96613d9182614d1e565b614cd2565b818152846020838601011115613daa578283fd5b613dbb826020830160208701614dde565b949350505050565b600060208284031215613dd4578081fd5b81356114d381614ea7565b600060208284031215613df0578081fd5b81516114d381614ea7565b60008060408385031215613e0d578081fd5b8235613e1881614ea7565b91506020830135613e2881614ea7565b809150509250929050565b60008060008060008060c08789031215613e4b578182fd5b8635613e5681614ea7565b95506020870135613e6681614ea7565b94506040870135613e7681614ea7565b93506060870135613e8681614ea7565b92506080870135613e9681614ea7565b915060a0870135613ea681614ea7565b809150509295509295509295565b60008060408385031215613ec6578182fd5b8235613ed181614ea7565b91506020838101356001600160401b03811115613eec578283fd5b8401601f8082018713613efd578384fd5b613f08610680614cd2565b8083865b6034811015613f6a57813586018b86820112613f26578889fd5b8035613f34613d9182614d1e565b8181528d8a838501011115613f47578a8bfd5b818a84018b83013790810189018a90528552509286019290860190600101613f0c565b5096999098509650505050505050565b60006020808385031215613f8c578182fd5b82356001600160401b03811115613fa1578283fd5b8301601f81018513613fb1578283fd5b8035613fbf613d9182614cfb565b8181528381019083850185840285018601891015613fdb578687fd5b8694505b83851015613ffd578035835260019490940193918501918501613fdf565b50979650505050505050565b6000602080838503121561401b578182fd5b82516001600160401b03811115614030578283fd5b8301601f81018513614040578283fd5b805161404e613d9182614cfb565b818152838101908385018584028501860189101561406a578687fd5b8694505b83851015613ffd57805183526001949094019391850191850161406e565b60006020828403121561409d578081fd5b81516114d381614ebc565b600080604083850312156140ba578182fd5b8235613e1881614ebc565b6000602082840312156140d6578081fd5b5035919050565b600080604083850312156140ef578182fd5b823591506020830135613e2881614ea7565b60008060408385031215614113578182fd5b50508035926020909101359150565b600060208284031215614133578081fd5b81356001600160e01b0319811681146114d3578182fd5b60006020828403121561415b578081fd5b81516001600160401b0380821115614171578283fd5b81840191506101c0808387031215614187578384fd5b61419081614cd2565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151838111156141ef578586fd5b6141fb88828701613d73565b9183019190915250610120838101519082015261014080840151908201526101609150614229828401613d22565b82820152610180915081830151828201526101a0915061424a828401613d22565b91810191909152949350505050565b60006020828403121561426a578081fd5b5051919050565b600080600060608486031215614285578081fd5b505081359360208301359350604090920135919050565b600080600080600080600060c0888a0312156142b6578485fd5b87359650602088013595506040880135945060608801356001600160401b038111156142e0578182fd5b6142ec8a828b01613d2d565b9095509350506080880135915060a088013561430781614ebc565b8091505092959891949750929550565b60008060008060008060008060e0898b031215614332578182fd5b88359750602089013596506040890135955060608901356001600160401b0381111561435c578283fd5b6143688b828c01613d2d565b9096509450506080890135925060a089013561438381614ebc565b8092505060c089013590509295985092959890939650565b60008060008060008060a087890312156143b3578384fd5b8635955060208701359450604087013593506060870135925060808701356001600160401b038111156143e4578283fd5b6143f089828a01613d2d565b979a9699509497509295939492505050565b600060208284031215614413578081fd5b81516001600160401b03811681146114d3578182fd5b6000815180845260208085019450808401835b838110156144585781518752958201959082019060010161443c565b509495945050505050565b15159052565b60008151808452614481816020860160208601614dde565b601f01601f19169290920160200192915050565b60006101c0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015182828701526144fc83870182614469565b925050506101208084015181860152506101408084015181860152506101608084015161452b82870182614463565b505061018083810151908501526101a08084015161454b82870182614463565b5090949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835161458d816017850160208801614dde565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516145be816028840160208801614dde565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208083018290528351918301829052600091606081830285018101929190850190868301855b8281101561466557605f19888703018452614653868351614469565b95509284019290840190600101614637565b509398975050505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526114d36020830184614429565b6000604082526146b26040830185614429565b602083820381850152818551808452828401915082838202850101838801865b8381101561470057601f198784030185526146ee838351614495565b948601949250908501906001016146d2565b50909998505050505050505050565b901515815260200190565b90815260200190565b6001600160401b0391909116815260200190565b6000602082526114d36020830184614469565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b602080825260169082015275536e6f6f6b47616d653a206e6f7420696e20706c617960501b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526026908201527f536e6f6f6b47616d653a206b696c6c657220746f6b656e20646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b6020808252601b908201527f4b696c6c657220746f6b656e20646f6573206e6f742065786973740000000000604082015260600190565b602080825260139082015272536e6f6f6b47616d653a204e6f2066756e647360681b604082015260600190565b6020808252600490820152631119585960e21b604082015260600190565b602080825260079082015266496e20706c617960c81b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f536e6f6f6b47616d653a2063616e6e6f742061737369676e206d6f7265207468604082015269616e203420737461727360b01b606082015260800190565b6020808252600f908201526e2737ba1039b737b7b59037bbb732b960891b604082015260600190565b60208082526023908201527f536e6f6f6b47616d653a2073686f756c6420626520677265617465722074686160408201526206e20360ec1b606082015260800190565b6020808252600b908201526a4e6f7420696e20706c617960a81b604082015260600190565b6020808252600e908201526d09cdee840c2cce8cae4c8cac2e8d60931b604082015260600190565b6020808252601b908201527f536e6f6f6b47616d653a20616c72656164792065786563757465640000000000604082015260600190565b6020808252818101527f536e6f6f6b47616d653a20746f6b656e20697320616c72656164792064656164604082015260600190565b6020808252600a90820152694e6f207265776172647360b01b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6000602082526114d36020830184614495565b91825215156020820152606060408201819052600e908201526d3ab73637b1b590313c903ab9b2b960911b608082015260a00190565b91825215156020820152606060408201819052600a908201526932b73a32b923b0b6b29960b11b608082015260a00190565b918252151560208201526060604082018190526010908201526f195b595c99d95b98de515e1d1c9858dd60821b608082015260a00190565b9182521515602082015260606040820181905260079082015266195e1d1c9858dd60ca1b608082015260a00190565b60008482526040602083015282604083015282846060840137818301606090810191909152601f909201601f1916010192915050565b600083825260406020830152613dbb6040830184614495565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715614cf357614cf3614e91565b604052919050565b60006001600160401b03821115614d1457614d14614e91565b5060209081020190565b60006001600160401b03821115614d3757614d37614e91565b50601f01601f191660200190565b60008219821115614d5857614d58614e7b565b500190565b60006001600160401b03808316818516808303821115614d7f57614d7f614e7b565b01949350505050565b600082614da357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614dc257614dc2614e7b565b500290565b600082821015614dd957614dd9614e7b565b500390565b60005b83811015614df9578181015183820152602001614de1565b83811115614e08576000848401525b50505050565b600081614e1d57614e1d614e7b565b506000190190565b600281046001821680614e3957607f821691505b60208210811415614e5a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614e7457614e74614e7b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dcd57600080fd5b8015158114610dcd57600080fdfee6e3949e8a695ab324c56918234e431a010aea56ecd8572ccdd0adf70b8b664b65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212201c8adc47cd6c36419f613b2b02ffc65e99c51ca5fd1deaeec8cfe7c71739b64364736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c8063a217fddf1161015c578063cc2a9a5b116100ce578063f216b71211610087578063f216b712146104e5578063f697081a146104ed578063f7707537146104f5578063f815d62f14610515578063f8d05b101461051d578063faaf9e3d146105255761027f565b8063cc2a9a5b14610494578063cf39ce4f146104a7578063d547741f146104af578063e3643046146104c2578063e63ab1e9146104ca578063e6d7d0cd146104d25761027f565b8063bbfce7e711610120578063bbfce7e714610443578063bf042def14610456578063bf499d5f1461045e578063ca15c87314610466578063cab85f3714610479578063cb3794d4146104815761027f565b8063a217fddf14610405578063ad12d5231461040d578063b3d0108114610420578063b5ef727d14610428578063b85f2108146104305761027f565b80635c975abb116101f55780638765c91f116101b95780638765c91f146103b45780639010d07c146103bc57806391d14854146103cf5780639651a2bc146103e25780639e1ca919146103f5578063a1e66c6a146103fd5761027f565b80635c975abb146103735780635c9bd33b1461037b5780635d599ee51461038357806370debac91461038b5780638456cb59146103ac5761027f565b806336568abe1161024757806336568abe146102ff5780633aa18088146103125780633f4ba83a14610332578063553a9c1a1461033a57806356f230581461034d57806356f59a46146103605761027f565b806301ffc9a7146102845780630b751db5146102ad57806323d0b9e4146102c2578063248a9ca3146102ca5780632f2ff15d146102ea575b600080fd5b610297610292366004614122565b61052d565b6040516102a4919061470f565b60405180910390f35b6102b561055a565b6040516102a491906145ca565b6102b5610569565b6102dd6102d83660046140c5565b610578565b6040516102a4919061471a565b6102fd6102f83660046140dd565b61058d565b005b6102fd61030d3660046140dd565b6105b4565b6103256103203660046140c5565b6105d6565b6040516102a4919061468c565b6102fd610d81565b6102fd610348366004614317565b610dd0565b6102fd61035b3660046140a8565b6112f9565b6102fd61036e366004613f7a565b611371565b610297611411565b61029761141a565b6102dd61142b565b61039e610399366004613dc3565b61144f565b6040516102a4929190614c93565b6102fd611464565b6102b56114ac565b6102b56103ca366004614101565b6114bb565b6102976103dd3660046140dd565b6114dc565b6102fd6103f0366004613eb4565b611507565b6102dd61155b565b6102dd611562565b6102dd611574565b6102fd61041b3660046140c5565b611579565b6102b5611813565b6102dd611823565b6102fd61043e36600461429c565b611828565b6102fd610451366004614271565b611ead565b6102fd61210e565b6102dd612151565b6102dd6104743660046140c5565b612156565b6102b561216d565b6102fd61048f36600461439b565b61217c565b6102fd6104a2366004613e33565b6125b4565b6102dd6126b9565b6102fd6104bd3660046140dd565b6126be565b6102dd6126c8565b6102dd6126cd565b6102fd6104e0366004613dfb565b6126df565b6102dd6127b7565b6102b56127db565b6105086105033660046140c5565b6127eb565b6040516102a49190614b62565b6102dd612877565b6102dd612886565b6102fd61288b565b60006001600160e01b03198216635a05180f60e01b14806105525750610552826129ac565b90505b919050565b60fc546001600160a01b031690565b60fb546001600160a01b031690565b60009081526065602052604090206001015490565b61059782826129d1565b60008281526097602052604090206105af90826129f0565b505050565b6105be8282612a05565b60008281526097602052604090206105af9082612a4b565b60606105e0611411565b156106065760405162461bcd60e51b81526004016105fd90614908565b60405180910390fd5b600082116106265760405162461bcd60e51b81526004016105fd906149f3565b60fd546040805163b7d0020760e01b815290516000926001600160a01b03169163b7d00207916004808301926020929190829003018186803b15801561066b57600080fd5b505afa15801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190614259565b9050600060056106b38386614da8565b6106bd9190614da8565b60fc546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd906106f2903390309086906004016145de565b602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061408c565b6107605760405162461bcd60e51b81526004016105fd9061489c565b6000846001600160401b0381111561078857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107bb57816020015b60608152602001906001900390816107a65790505b5090506000856001600160401b038111156107e657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561081f57816020015b61080c613b71565b8152602001906001900390816108045790505b50905060005b86811015610923576000610837612a60565b5090508084838151811061085b57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806101c0016040528060008152602001600081526020016001815260200160008152602001600081526020016000815260200160008152602001600081526020016040518060200160405280600081525081526020016001815260200160008152602001600015158152602001600581526020016000151581525083838151811061090457634e487b7160e01b600052603260045260246000fd5b602002602001018190525050808061091b90614e60565b915050610825565b5060fb5460405163f24d5aeb60e01b81526000916001600160a01b03169063f24d5aeb906109579033908790600401614602565b600060405180830381600087803b15801561097157600080fd5b505af1158015610985573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ad9190810190614009565b60ff54604051636d733a1760e01b81529192506001600160a01b031690636d733a17906109e0908490869060040161469f565b600060405180830381600087803b1580156109fa57600080fd5b505af1158015610a0e573d6000803e3d6000fd5b50505050600587610a1f9190614da8565b6101366000828254610a319190614d45565b90915550600090506064610a46601487614da8565b610a509190614d88565b61013a54909150600160a01b900460ff16610ace5760fc54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90610a979030908590600401614673565b600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b50505050610b59565b60fc5461013a5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb92610b05929116908590600401614673565b602060405180830381600087803b158015610b1f57600080fd5b505af1158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b57919061408c565b505b60006064610b68604c88614da8565b610b729190614d88565b60fc546101395460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392610bab9216908590600401614673565b602060405180830381600087803b158015610bc557600080fd5b505af1158015610bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfd919061408c565b5061013954604051636ddd6c8b60e11b81526001600160a01b039091169063dbbad91690610c2f90849060040161471a565b600060405180830381600087803b158015610c4957600080fd5b505af1158015610c5d573d6000803e3d6000fd5b505050506000818388610c709190614dc7565b610c7a9190614dc7565b60fc546101385460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb92610cb39216908590600401614673565b602060405180830381600087803b158015610ccd57600080fd5b505af1158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d05919061408c565b50610100546001600160a01b03166352691516610d238c6001614da8565b8c6040518363ffffffff1660e01b8152600401610d41929190614c93565b600060405180830381600087803b158015610d5b57600080fd5b505af1158015610d6f573d6000803e3d6000fd5b50959c9b505050505050505050505050565b600080516020614eeb833981519152610da181610d9c612e62565b612e66565b610da9611411565b610dc55760405162461bcd60e51b81526004016105fd906147f1565b610dcd612eca565b50565b600080516020614ecb833981519152610deb81610d9c612e62565b610df3611411565b15610e105760405162461bcd60e51b81526004016105fd90614908565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90610e41908d9060040161471a565b60006040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e95919081019061414a565b60fb5460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb190610ec6908d9060040161471a565b60206040518083038186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f16919061408c565b1515600114610f375760405162461bcd60e51b81526004016105fd906147c1565b61014081015115610f5a5760405162461bcd60e51b81526004016105fd90614aba565b89851415610f7c5760016101366000828254610f769190614dc7565b90915550505b61018081015115610f9f5760018161018001818151610f9b9190614dc7565b9052505b61018081015161114d574261014082015261010054604051633f4cd3a760e11b81526001600160a01b0390911690637e99a74e90610fe1908d9060040161471a565b60206040518083038186803b158015610ff957600080fd5b505afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190614259565b606082015260e0810189905260c08101889052604080516020601f8901819004810282018101909252878152908890889081908401838280828437600092019190915250505050610100808301919091525460405163eb427dcf60e01b81526001600160a01b039091169063eb427dcf906110b0908d9060040161471a565b600060405180830381600087803b1580156110ca57600080fd5b505af11580156110de573d6000803e3d6000fd5b5050610100546040808501519051633d87fbdd60e21b81526001600160a01b03909216935063f61fef7492506111169160040161471a565b600060405180830381600087803b15801561113057600080fd5b505af1158015611144573d6000803e3d6000fd5b505050506111be565b600184151514156111be5760fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d79061118b908d90600090600401614b75565b600060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050505b60ff5460405163366a446b60e21b81526001600160a01b039091169063d9a911ac906111f0908d908590600401614c7a565b600060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e9150611252908d9060040161471a565b60206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a29190613ddf565b6001600160a01b03167fa56d5cc0fe722918425eb7b68f147546cfdc6664d22823d16f60797fb9a2ba6d8b87846101800151876040516112e59493929190614cb7565b60405180910390a250505050505050505050565b61013a54600160a81b900460ff16156113245760405162461bcd60e51b81526004016105fd90614a83565b600060fe5561013a805460ff60a81b196001600160a01b039093166001600160a01b0319941515600160a01b0260ff60a01b1990921691909117939093169290921716600160a81b179055565b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e61139e81610d9c612e62565b6113a6611411565b156113c35760405162461bcd60e51b81526004016105fd90614908565b60005b82518110156105af576113ff8382815181106113f257634e487b7160e01b600052603260045260246000fd5b6020026020010151612f38565b8061140981614e60565b9150506113c6565b60c95460ff1690565b61013a54600160a01b900460ff1690565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc79281565b60008061145b8361319f565b91509150915091565b600080516020614eeb83398151915261147f81610d9c612e62565b611487611411565b156114a45760405162461bcd60e51b81526004016105fd90614908565b610dcd6131f2565b60fd546001600160a01b031690565b60008281526097602052604081206114d3908361324d565b90505b92915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610101546001600160a01b0316156115315760405162461bcd60e51b81526004016105fd90614a83565b61010180546001600160a01b0319166001600160a01b0384161790556105af610102826034613be4565b6101365490565b600080516020614ecb83398151915281565b600081565b611581611411565b1561159e5760405162461bcd60e51b81526004016105fd90614908565b60fb546040516331a9108f60e11b81526001600160a01b0390911690636352211e906115ce90849060040161471a565b60206040518083038186803b1580156115e657600080fd5b505afa1580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e9190613ddf565b6001600160a01b0316336001600160a01b03161461164e5760405162461bcd60e51b81526004016105fd906149ca565b60fb5460405163f6aacfb160e01b81526001600160a01b039091169063f6aacfb19061167e90849060040161471a565b60206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce919061408c565b156116eb5760405162461bcd60e51b81526004016105fd906148e7565b60fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d79061171e908490600190600401614bab565b600060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e915061178090849060040161471a565b60206040518083038186803b15801561179857600080fd5b505afa1580156117ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d09190613ddf565b6001600160a01b03167f6badce09299f7f7600a82aeaaf2801e2ea536ed021bb15fde48fdc2b072934eb82604051611808919061471a565b60405180910390a250565b61013a546001600160a01b031690565b604c81565b600080516020614ecb83398151915261184381610d9c612e62565b61184b611411565b156118685760405162461bcd60e51b81526004016105fd90614908565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90611899908c9060040161471a565b60006040518083038186803b1580156118b157600080fd5b505afa1580156118c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ed919081019061414a565b60fb54604051634f558e7960e01b81529192506001600160a01b031690634f558e799061191e90879060040161471a565b60206040518083038186803b15801561193657600080fd5b505afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e919061408c565b151560011461198f5760405162461bcd60e51b81526004016105fd90614865565b60fb5460405163f6aacfb160e01b81526001600160a01b039091169063f6aacfb1906119bf908c9060040161471a565b60206040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f919061408c565b1515600114611a305760405162461bcd60e51b81526004016105fd90614a36565b61014081015115611a535760405162461bcd60e51b81526004016105fd90614aba565b88841415611a7a5760016101366000828254611a6f9190614dc7565b90915550611b319050565b60fb546040516331a9108f60e11b81526000916001600160a01b031690636352211e90611aab90889060040161471a565b60206040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb9190613ddf565b6001600160a01b0381166000908152610137602052604081208054929350600192909190611b2a908490614d45565b9091555050505b61018081015115611b545760018161018001818151611b509190614dc7565b9052505b610180810151611d02574261014082015261010054604051633f4cd3a760e11b81526001600160a01b0390911690637e99a74e90611b96908c9060040161471a565b60206040518083038186803b158015611bae57600080fd5b505afa158015611bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be69190614259565b606082015260e0810188905260c08101879052604080516020601f8801819004810282018101909252868152908790879081908401838280828437600092019190915250505050610100808301919091525460405163eb427dcf60e01b81526001600160a01b039091169063eb427dcf90611c65908c9060040161471a565b600060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b5050610100546040808501519051633d87fbdd60e21b81526001600160a01b03909216935063f61fef749250611ccb9160040161471a565b600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b50505050611d73565b60018315151415611d735760fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d790611d40908c90600090600401614b75565b600060405180830381600087803b158015611d5a57600080fd5b505af1158015611d6e573d6000803e3d6000fd5b505050505b60ff5460405163366a446b60e21b81526001600160a01b039091169063d9a911ac90611da5908c908590600401614c7a565b600060405180830381600087803b158015611dbf57600080fd5b505af1158015611dd3573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e9150611e07908c9060040161471a565b60206040518083038186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e579190613ddf565b6001600160a01b03167fa56d5cc0fe722918425eb7b68f147546cfdc6664d22823d16f60797fb9a2ba6d8a8684610180015146604051611e9a9493929190614cb7565b60405180910390a2505050505050505050565b600080516020614ecb833981519152611ec881610d9c612e62565b611ed0611411565b15611eed5760405162461bcd60e51b81526004016105fd90614908565b60fb54604051634f558e7960e01b81526001600160a01b0390911690634f558e7990611f1d90879060040161471a565b60206040518083038186803b158015611f3557600080fd5b505afa158015611f49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6d919061408c565b1515600114611f8e5760405162461bcd60e51b81526004016105fd9061481f565b60fb546040516331a9108f60e11b81526000916001600160a01b031690636352211e90611fbf90889060040161471a565b60206040518083038186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613ddf565b6001600160a01b038116600090815261013760205260408120805492935060019290919061203e908490614d45565b909155505060fb546040516331a9108f60e11b81526001600160a01b0390911690636352211e9061207390889060040161471a565b60206040518083038186803b15801561208b57600080fd5b505afa15801561209f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c39190613ddf565b6001600160a01b03167fee68ddc9ef4813ba80957a7001ba51f8a83e3071c62f17c923d9bbb2b2071fe08686866040516120ff93929190614ca1565b60405180910390a25050505050565b610100546001600160a01b031633146121395760405162461bcd60e51b81526004016105fd90614a5b565b610136805490600061214a83614e60565b9190505550565b600590565b600081815260976020526040812061055290613259565b60ff546001600160a01b031690565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc7926121a981610d9c612e62565b6121b1611411565b156121ce5760405162461bcd60e51b81526004016105fd90614908565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d906121ff908b9060040161471a565b60006040518083038186803b15801561221757600080fd5b505afa15801561222b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612253919081019061414a565b60fb5460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb190612284908b9060040161471a565b60206040518083038186803b15801561229c57600080fd5b505afa1580156122b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d4919061408c565b15156001146122f55760405162461bcd60e51b81526004016105fd90614a36565b610140810151156123185760405162461bcd60e51b81526004016105fd906148c9565b60048611156123395760405162461bcd60e51b81526004016105fd90614980565b6101005461012082015160405163c97bafe160e01b81526001600160a01b039092169163c97bafe191612370918b90600401614c93565b600060405180830381600087803b15801561238a57600080fd5b505af115801561239e573d6000803e3d6000fd5b505060fb54604051630588253160e21b81526001600160a01b03909116925063162094c491506123d6908b9088908890600401614c44565b600060405180830381600087803b1580156123f057600080fd5b505af1158015612404573d6000803e3d6000fd5b50505050604080820188905261012082018890526020820187905285825260ff54905163366a446b60e21b81526001600160a01b039091169063d9a911ac90612453908b908590600401614c7a565b600060405180830381600087803b15801561246d57600080fd5b505af1158015612481573d6000803e3d6000fd5b505060fb5460405163bfbf01d760e01b81526001600160a01b03909116925063bfbf01d791506124b8908b90600090600401614c15565b600060405180830381600087803b1580156124d257600080fd5b505af11580156124e6573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e915061251a908b9060040161471a565b60206040518083038186803b15801561253257600080fd5b505afa158015612546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256a9190613ddf565b6001600160a01b03167f7faed872658ab10c4f98b4705a343cb26b9739b37e202617569d97fb3ddb7ef9896040516125a2919061471a565b60405180910390a25050505050505050565b600054610100900460ff16806125cd575060005460ff16155b6125e95760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff16158015612614576000805460ff1961ff0019909116610100171660011790555b61261c613264565b6126246132f8565b60fd80546001600160a01b03199081166001600160a01b038781169190911790925560fb8054821689841617905560fc8054821688841617905560ff805482168a84161790556101008054909116918516919091179055612686600083613368565b61269e600080516020614eeb83398151915283613368565b80156126b0576000805461ff00191690555b50505050505050565b600481565b6105be8282613372565b600181565b600080516020614eeb83398151915281565b610138546001600160a01b0316156127095760405162461bcd60e51b81526004016105fd90614a83565b61013880546001600160a01b038085166001600160a01b03199283161790925561013980548484169216919091179055610100546040805163938ce1f760e01b81529051919092169163938ce1f7916004808301926020929190829003018186803b15801561277757600080fd5b505afa15801561278b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127af9190614259565b610136555050565b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e81565b610100546001600160a01b031690565b6127f3613b71565b60ff54604051636a6f3e1d60e01b81526001600160a01b0390911690636a6f3e1d9061282390859060040161471a565b60006040518083038186803b15801561283b57600080fd5b505afa15801561284f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610552919081019061414a565b6000612881613391565b905090565b601481565b3360006128978261319f565b915050600081116128ba5760405162461bcd60e51b81526004016105fd90614aef565b6001600160a01b038216600090815261013760205260408120546101368054919290916128e8908490614dc7565b90915550506001600160a01b0380831660009081526101376020526040808220919091556101395490516384b13ac760e01b81529116906384b13ac7906129359085908590600401614673565b600060405180830381600087803b15801561294f57600080fd5b505af1158015612963573d6000803e3d6000fd5b50505050816001600160a01b03167f82575769d6cf83966efcd5cee6230e68d90a4f1aeca7508f57783f2e1cf2c3a6826040516129a0919061471a565b60405180910390a25050565b60006001600160e01b03198216637965db0b60e01b1480610552575061055282613434565b6129da82610578565b6129e681610d9c612e62565b6105af838361344d565b60006114d3836001600160a01b0384166134d4565b612a0d612e62565b6001600160a01b0316816001600160a01b031614612a3d5760405162461bcd60e51b81526004016105fd90614b13565b612a47828261351e565b5050565b60006114d3836001600160a01b0384166135a3565b6060600061010160009054906101000a90046001600160a01b03166001600160a01b0316632a1bbc346040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ab557600080fd5b505af1158015612ac9573d6000803e3d6000fd5b5050610101546040516344dc5a4960e11b8152600093506001600160a01b0390911691506389b8b49290612b0290601b90600401614723565b602060405180830381600087803b158015612b1c57600080fd5b505af1158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b549190614402565b612b5f906001614d5d565b6001600160401b03169050600060405180602001604052806000815250905060008060018410158015612b93575060058411155b15612c3057610101546040516344dc5a4960e11b8152600093506001600160a01b03909116906389b8b49290612bce90601490600401614723565b602060405180830381600087803b158015612be857600080fd5b505af1158015612bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c209190614402565b6001600160401b03169050612d7a565b60068410158015612c425750600f8411155b15612c8657612c5360146000614d45565b610101546040516344dc5a4960e11b81529193506001600160a01b0316906389b8b49290612bce90601490600401614723565b60108410158015612c98575060128411155b15612ce7576014612caa816000614d45565b612cb49190614d45565b610101546040516344dc5a4960e11b81529193506001600160a01b0316906389b8b49290612bce90600390600401614723565b60138410158015612cf9575060158411155b15612d175760036014612d0d816000614d45565b612caa9190614d45565b60168410158015612d29575060188411155b15612d48576003806014612d3e816000614d45565b612d0d9190614d45565b60198410158015612d5a5750601b8411155b15612d7a57600380806014612d70816000614d45565b612d3e9190614d45565b604080518082019091526007815266697066733a2f2f60c81b6020820152612e5690610102612da98486614d45565b60348110612dc757634e487b7160e01b600052603260045260246000fd5b018054612dd390614e25565b80601f0160208091040260200160405190810160405280929190818152602001828054612dff90614e25565b8015612e4c5780601f10612e2157610100808354040283529160200191612e4c565b820191906000526020600020905b815481529060010190602001808311612e2f57829003601f168201915b50505050506136ba565b95509293505050509091565b3390565b612e7082826114dc565b612a4757612e88816001600160a01b03166014613850565b612e93836020613850565b604051602001612ea4929190614555565b60408051601f198184030181529082905262461bcd60e51b82526105fd91600401614737565b612ed2611411565b612eee5760405162461bcd60e51b81526004016105fd906147f1565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f21612e62565b604051612f2e91906145ca565b60405180910390a1565b60ff54604051636a6f3e1d60e01b81526000916001600160a01b031690636a6f3e1d90612f6990859060040161471a565b60006040518083038186803b158015612f8157600080fd5b505afa158015612f95573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612fbd919081019061414a565b60fb5460405163f6aacfb160e01b81529192506001600160a01b03169063f6aacfb190612fee90859060040161471a565b60206040518083038186803b15801561300657600080fd5b505afa15801561301a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303e919061408c565b151560011461305f5760405162461bcd60e51b81526004016105fd90614a36565b610140810151156130825760405162461bcd60e51b81526004016105fd906148c9565b60fb5460405163bfbf01d760e01b81526001600160a01b039091169063bfbf01d7906130b5908590600090600401614bdd565b600060405180830381600087803b1580156130cf57600080fd5b505af11580156130e3573d6000803e3d6000fd5b505060fb546040516331a9108f60e11b81526001600160a01b039091169250636352211e915061311790859060040161471a565b60206040518083038186803b15801561312f57600080fd5b505afa158015613143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131679190613ddf565b6001600160a01b03167f7faed872658ab10c4f98b4705a343cb26b9739b37e202617569d97fb3ddb7ef9836040516129a0919061471a565b6001600160a01b03811660009081526101376020526040812054819081906131c5613391565b6131cf9190614da8565b6001600160a01b0394909416600090815261013760205260409020549492505050565b6131fa611411565b156132175760405162461bcd60e51b81526004016105fd90614908565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f21612e62565b60006114d38383613a01565b600061055282613a5a565b600054610100900460ff168061327d575060005460ff16155b6132995760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff161580156132c4576000805460ff1961ff0019909116610100171660011790555b6132cc613a5e565b6132d4613a5e565b6132dc613a5e565b6132e4613a5e565b8015610dcd576000805461ff001916905550565b600054610100900460ff1680613311575060005460ff16155b61332d5760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff16158015613358576000805460ff1961ff0019909116610100171660011790555b613360613a5e565b6132e4613ad1565b6105978282613b4f565b61337b82610578565b61338781610d9c612e62565b6105af838361351e565b61013654600090819015612881576101365461013960009054906101000a90046001600160a01b03166001600160a01b0316637d817a356040518163ffffffff1660e01b815260040160206040518083038186803b1580156133f257600080fd5b505afa158015613406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342a9190614259565b6114d69190614d88565b6001600160e01b031981166301ffc9a760e01b14919050565b61345782826114dc565b612a475760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613490612e62565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006134e08383613b59565b613516575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556114d6565b5060006114d6565b61352882826114dc565b15612a475760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916905561355f612e62565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156136b05760006135c7600183614dc7565b85549091506000906135db90600190614dc7565b9050600086600001828154811061360257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061363357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526001890190915260409020849055865487908061367457634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506114d6565b60009150506114d6565b80518251606091849184916000916136d29190614d45565b6001600160401b038111156136f757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613721576020820181803683370190505b5090506000805b84518110156137b45784818151811061375157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b031916838361376b81614e60565b94508151811061378b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806137ac81614e60565b915050613728565b5060005b8351811015613844578381815181106137e157634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191683836137fb81614e60565b94508151811061381b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053508061383c81614e60565b9150506137b8565b50909695505050505050565b6060600061385f836002614da8565b61386a906002614d45565b6001600160401b0381111561388f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156138b9576020820181803683370190505b509050600360fc1b816000815181106138e257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061391f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000613943846002614da8565b61394e906001614d45565b90505b60018111156139e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061399057634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106139b457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936139db81614e0e565b9050613951565b5083156114d35760405162461bcd60e51b81526004016105fd9061478c565b81546000908210613a245760405162461bcd60e51b81526004016105fd9061474a565b826000018281548110613a4757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b5490565b600054610100900460ff1680613a77575060005460ff16155b613a935760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff161580156132e4576000805460ff1961ff0019909116610100171660011790558015610dcd576000805461ff001916905550565b600054610100900460ff1680613aea575060005460ff16155b613b065760405162461bcd60e51b81526004016105fd90614932565b600054610100900460ff16158015613b31576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191690558015610dcd576000805461ff001916905550565b612a47828261344d565b60009081526001919091016020526040902054151590565b604051806101c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600015158152602001600081526020016000151581525090565b8260348101928215613c24579160200282015b82811115613c245782518051613c14918491602090910190613c34565b5091602001919060010190613bf7565b50613c30929150613cb4565b5090565b828054613c4090614e25565b90600052602060002090601f016020900481019282613c625760008555613ca8565b82601f10613c7b57805160ff1916838001178555613ca8565b82800160010185558215613ca8579182015b82811115613ca8578251825591602001919060010190613c8d565b50613c30929150613cd1565b80821115613c30576000613cc88282613ce6565b50600101613cb4565b5b80821115613c305760008155600101613cd2565b508054613cf290614e25565b6000825580601f10613d045750610dcd565b601f016020900490600052602060002090810190610dcd9190613cd1565b805161055581614ebc565b60008083601f840112613d3e578182fd5b5081356001600160401b03811115613d54578182fd5b602083019150836020828501011115613d6c57600080fd5b9250929050565b600082601f830112613d83578081fd5b8151613d96613d9182614d1e565b614cd2565b818152846020838601011115613daa578283fd5b613dbb826020830160208701614dde565b949350505050565b600060208284031215613dd4578081fd5b81356114d381614ea7565b600060208284031215613df0578081fd5b81516114d381614ea7565b60008060408385031215613e0d578081fd5b8235613e1881614ea7565b91506020830135613e2881614ea7565b809150509250929050565b60008060008060008060c08789031215613e4b578182fd5b8635613e5681614ea7565b95506020870135613e6681614ea7565b94506040870135613e7681614ea7565b93506060870135613e8681614ea7565b92506080870135613e9681614ea7565b915060a0870135613ea681614ea7565b809150509295509295509295565b60008060408385031215613ec6578182fd5b8235613ed181614ea7565b91506020838101356001600160401b03811115613eec578283fd5b8401601f8082018713613efd578384fd5b613f08610680614cd2565b8083865b6034811015613f6a57813586018b86820112613f26578889fd5b8035613f34613d9182614d1e565b8181528d8a838501011115613f47578a8bfd5b818a84018b83013790810189018a90528552509286019290860190600101613f0c565b5096999098509650505050505050565b60006020808385031215613f8c578182fd5b82356001600160401b03811115613fa1578283fd5b8301601f81018513613fb1578283fd5b8035613fbf613d9182614cfb565b8181528381019083850185840285018601891015613fdb578687fd5b8694505b83851015613ffd578035835260019490940193918501918501613fdf565b50979650505050505050565b6000602080838503121561401b578182fd5b82516001600160401b03811115614030578283fd5b8301601f81018513614040578283fd5b805161404e613d9182614cfb565b818152838101908385018584028501860189101561406a578687fd5b8694505b83851015613ffd57805183526001949094019391850191850161406e565b60006020828403121561409d578081fd5b81516114d381614ebc565b600080604083850312156140ba578182fd5b8235613e1881614ebc565b6000602082840312156140d6578081fd5b5035919050565b600080604083850312156140ef578182fd5b823591506020830135613e2881614ea7565b60008060408385031215614113578182fd5b50508035926020909101359150565b600060208284031215614133578081fd5b81356001600160e01b0319811681146114d3578182fd5b60006020828403121561415b578081fd5b81516001600160401b0380821115614171578283fd5b81840191506101c0808387031215614187578384fd5b61419081614cd2565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151838111156141ef578586fd5b6141fb88828701613d73565b9183019190915250610120838101519082015261014080840151908201526101609150614229828401613d22565b82820152610180915081830151828201526101a0915061424a828401613d22565b91810191909152949350505050565b60006020828403121561426a578081fd5b5051919050565b600080600060608486031215614285578081fd5b505081359360208301359350604090920135919050565b600080600080600080600060c0888a0312156142b6578485fd5b87359650602088013595506040880135945060608801356001600160401b038111156142e0578182fd5b6142ec8a828b01613d2d565b9095509350506080880135915060a088013561430781614ebc565b8091505092959891949750929550565b60008060008060008060008060e0898b031215614332578182fd5b88359750602089013596506040890135955060608901356001600160401b0381111561435c578283fd5b6143688b828c01613d2d565b9096509450506080890135925060a089013561438381614ebc565b8092505060c089013590509295985092959890939650565b60008060008060008060a087890312156143b3578384fd5b8635955060208701359450604087013593506060870135925060808701356001600160401b038111156143e4578283fd5b6143f089828a01613d2d565b979a9699509497509295939492505050565b600060208284031215614413578081fd5b81516001600160401b03811681146114d3578182fd5b6000815180845260208085019450808401835b838110156144585781518752958201959082019060010161443c565b509495945050505050565b15159052565b60008151808452614481816020860160208601614dde565b601f01601f19169290920160200192915050565b60006101c0825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015182828701526144fc83870182614469565b925050506101208084015181860152506101408084015181860152506101608084015161452b82870182614463565b505061018083810151908501526101a08084015161454b82870182614463565b5090949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835161458d816017850160208801614dde565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516145be816028840160208801614dde565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604060208083018290528351918301829052600091606081830285018101929190850190868301855b8281101561466557605f19888703018452614653868351614469565b95509284019290840190600101614637565b509398975050505050505050565b6001600160a01b03929092168252602082015260400190565b6000602082526114d36020830184614429565b6000604082526146b26040830185614429565b602083820381850152818551808452828401915082838202850101838801865b8381101561470057601f198784030185526146ee838351614495565b948601949250908501906001016146d2565b50909998505050505050505050565b901515815260200190565b90815260200190565b6001600160401b0391909116815260200190565b6000602082526114d36020830184614469565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b602080825260169082015275536e6f6f6b47616d653a206e6f7420696e20706c617960501b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526026908201527f536e6f6f6b47616d653a206b696c6c657220746f6b656e20646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b6020808252601b908201527f4b696c6c657220746f6b656e20646f6573206e6f742065786973740000000000604082015260600190565b602080825260139082015272536e6f6f6b47616d653a204e6f2066756e647360681b604082015260600190565b6020808252600490820152631119585960e21b604082015260600190565b602080825260079082015266496e20706c617960c81b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602a908201527f536e6f6f6b47616d653a2063616e6e6f742061737369676e206d6f7265207468604082015269616e203420737461727360b01b606082015260800190565b6020808252600f908201526e2737ba1039b737b7b59037bbb732b960891b604082015260600190565b60208082526023908201527f536e6f6f6b47616d653a2073686f756c6420626520677265617465722074686160408201526206e20360ec1b606082015260800190565b6020808252600b908201526a4e6f7420696e20706c617960a81b604082015260600190565b6020808252600e908201526d09cdee840c2cce8cae4c8cac2e8d60931b604082015260600190565b6020808252601b908201527f536e6f6f6b47616d653a20616c72656164792065786563757465640000000000604082015260600190565b6020808252818101527f536e6f6f6b47616d653a20746f6b656e20697320616c72656164792064656164604082015260600190565b6020808252600a90820152694e6f207265776172647360b01b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6000602082526114d36020830184614495565b91825215156020820152606060408201819052600e908201526d3ab73637b1b590313c903ab9b2b960911b608082015260a00190565b91825215156020820152606060408201819052600a908201526932b73a32b923b0b6b29960b11b608082015260a00190565b918252151560208201526060604082018190526010908201526f195b595c99d95b98de515e1d1c9858dd60821b608082015260a00190565b9182521515602082015260606040820181905260079082015266195e1d1c9858dd60ca1b608082015260a00190565b60008482526040602083015282604083015282846060840137818301606090810191909152601f909201601f1916010192915050565b600083825260406020830152613dbb6040830184614495565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715614cf357614cf3614e91565b604052919050565b60006001600160401b03821115614d1457614d14614e91565b5060209081020190565b60006001600160401b03821115614d3757614d37614e91565b50601f01601f191660200190565b60008219821115614d5857614d58614e7b565b500190565b60006001600160401b03808316818516808303821115614d7f57614d7f614e7b565b01949350505050565b600082614da357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615614dc257614dc2614e7b565b500290565b600082821015614dd957614dd9614e7b565b500390565b60005b83811015614df9578181015183820152602001614de1565b83811115614e08576000848401525b50505050565b600081614e1d57614e1d614e7b565b506000190190565b600281046001821680614e3957607f821691505b60208210811415614e5a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614e7457614e74614e7b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dcd57600080fd5b8015158114610dcd57600080fdfee6e3949e8a695ab324c56918234e431a010aea56ecd8572ccdd0adf70b8b664b65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212201c8adc47cd6c36419f613b2b02ffc65e99c51ca5fd1deaeec8cfe7c71739b64364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2658,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)"
      },
      {
        "astId": 615,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 62,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3206_storage)"
      },
      {
        "astId": 219,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 814,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 905,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11651,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_snook",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(SnookToken)13881"
      },
      {
        "astId": 11654,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_skill",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ISkillToken)9826"
      },
      {
        "astId": 11657,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_uniswap",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IUniswapUSDCSkill)10364"
      },
      {
        "astId": 11659,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_UNUSED",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 11662,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_state",
        "offset": 0,
        "slot": "255",
        "type": "t_contract(ISnookState)10092"
      },
      {
        "astId": 11665,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_afterdeath",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IAfterdeath)9452"
      },
      {
        "astId": 11668,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_prng",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(IPRNG)9735"
      },
      {
        "astId": 11672,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_mintTokenCIDs",
        "offset": 0,
        "slot": "258",
        "type": "t_array(t_string_storage)52_storage"
      },
      {
        "astId": 11674,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_spc",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 11678,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "accountKills",
        "offset": 0,
        "slot": "311",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11680,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_ecosystem",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 11683,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_treasury",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(ITreasury)10356"
      },
      {
        "astId": 11685,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_burnsafe",
        "offset": 0,
        "slot": "314",
        "type": "t_address"
      },
      {
        "astId": 11687,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_isBridged",
        "offset": 20,
        "slot": "314",
        "type": "t_bool"
      },
      {
        "astId": 11689,
        "contract": "contracts/SnookGame.sol:SnookGame",
        "label": "_isInitialized4",
        "offset": 21,
        "slot": "314",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)52_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[52]",
        "numberOfBytes": "1664"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAfterdeath)9452": {
        "encoding": "inplace",
        "label": "contract IAfterdeath",
        "numberOfBytes": "20"
      },
      "t_contract(IPRNG)9735": {
        "encoding": "inplace",
        "label": "contract IPRNG",
        "numberOfBytes": "20"
      },
      "t_contract(ISkillToken)9826": {
        "encoding": "inplace",
        "label": "contract ISkillToken",
        "numberOfBytes": "20"
      },
      "t_contract(ISnookState)10092": {
        "encoding": "inplace",
        "label": "contract ISnookState",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)10356": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapUSDCSkill)10364": {
        "encoding": "inplace",
        "label": "contract IUniswapUSDCSkill",
        "numberOfBytes": "20"
      },
      "t_contract(SnookToken)13881": {
        "encoding": "inplace",
        "label": "contract SnookToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3206_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3206_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)302_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3206_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3205,
            "contract": "contracts/SnookGame.sol:SnookGame",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2931_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)302_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 299,
            "contract": "contracts/SnookGame.sol:SnookGame",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 301,
            "contract": "contracts/SnookGame.sol:SnookGame",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2931_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2926,
            "contract": "contracts/SnookGame.sol:SnookGame",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2930,
            "contract": "contracts/SnookGame.sol:SnookGame",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}