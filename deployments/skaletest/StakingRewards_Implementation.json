{
  "address": "0x7c5A0A3e4C0cdCF81f523468e52D1E12e9912b8B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTimelock",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsToBurn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsToPay",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDepositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingRewardsBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "PeriodStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnFromOldVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodInDays",
          "type": "uint256"
        }
      ],
      "name": "computeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsToBurn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsToPay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodInDays",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurningRateInPercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getDepositRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract TokenTimelock",
              "name": "tokenTimelock",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsToBurn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsToPay",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStakingRewards.DepositRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialSNKSupplyInWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterestRatePerDayInCentipercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxStakingPeriodInDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinNumberOfStakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinStakingPeriodInDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinStakingValueCoef",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrevInitTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSNKAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSecondsInDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxStakingPeriodInDays",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "skill",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minStakingPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minNumberOfStakers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRatePerDayInCentipercents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialSkillSupplyInWei",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minStakingValueCoef",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burningRateInPercents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondsInDay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "adminAccount",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ecosystem",
          "type": "address"
        }
      ],
      "name": "initialize2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e89a15974eb71325230495d00fdc550f8c081a8a2fb2a0a532d70ec204e72b1",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x9a1187cB7084F3E60a8b99eb195D9f3c29361a8a",
    "contractAddress": "0x7c5A0A3e4C0cdCF81f523468e52D1E12e9912b8B",
    "transactionIndex": 0,
    "gasUsed": "1888940",
    "logsBloom": "0x
    "blockHash": "0x978925136bd513bd12baeaacfc49768a77ca1e694b6c37afbf9a093448d6a812",
    "transactionHash": "0x5e89a15974eb71325230495d00fdc550f8c081a8a2fb2a0a532d70ec204e72b1",
    "logs": [],
    "blockNumber": 264490,
    "cumulativeGasUsed": "1888940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "44bc5b6e9efb9005c0cdf786881a4dc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTimelock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsToBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsToPay\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingRewardsBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"name\":\"PeriodStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFromOldVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"}],\"name\":\"computeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToPay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurningRateInPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getDepositRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"contract TokenTimelock\",\"name\":\"tokenTimelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsToPay\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakingRewards.DepositRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialSNKSupplyInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterestRatePerDayInCentipercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxStakingPeriodInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinNumberOfStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakingPeriodInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakingValueCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrevInitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSNKAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecondsInDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxStakingPeriodInDays\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"skill\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minStakingPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minNumberOfStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRatePerDayInCentipercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSkillSupplyInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingValueCoef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burningRateInPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsInDay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adminAccount\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecosystem\",\"type\":\"address\"}],\"name\":\"initialize2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x24809d17a2d5bb3aa7195bbed04e7c228982c2d36e371e8a8cb2364877b0aa34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23e71de3279b56332a1d2e469efe69f82b7408847cc3d7d2d06a66f465837342\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/TokenTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 immutable private _token;\\n\\n    // beneficiary of tokens after they are released\\n    address immutable private _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 immutable private _releaseTime;\\n\\n    constructor (IERC20 token_, address beneficiary_, uint256 releaseTime_) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(releaseTime_ > block.timestamp, \\\"TokenTimelock: release time is before current time\\\");\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view virtual returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view virtual returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= releaseTime(), \\\"TokenTimelock: current time is before release time\\\");\\n\\n        uint256 amount = token().balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        token().safeTransfer(beneficiary(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x42576e1738b434ce4315eae2ac6f0c20bd448d5dce6f9ec5fe527a0e6aed3be4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/ISkillToken.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.5.0;\\n\\ninterface ISkillToken {\\n    // IERC20Metadata\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    // IERC20\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);    \\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    // SnookGame extension\\n    function burn(address, uint256) external;\\n}\",\"keccak256\":\"0x2a28799b5cf2bdc40bee27444bcb8566fe226ae57b4f47fb02f3f990a051218a\",\"license\":\"Unlicense\"},\"contracts/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/TokenTimelock.sol\\\";\\n\\ninterface IStakingRewards {\\n  event PeriodStart(\\n    uint minDepositAmount,\\n    uint maxDepositAmount,\\n    uint stakingRewardsBalance,\\n    uint currentTotalSupply\\n  );\\n\\n  event Deposit(\\n    address beneficiary, \\n    address tokenTimelock,\\n    uint depositAmount, \\n    uint rewards, \\n    uint rewardsToBurn,\\n    uint rewardsToPay\\n  );\\n\\n  struct DepositRecord {\\n    TokenTimelock tokenTimelock;\\n    uint depositAmount;\\n    uint rewards; \\n    // We keep computable values rewardsToBurn and rewardsToPay for convinience: we don't want client\\n    // to calculate them because we don't want the client to know how to do this, though to \\n    // save space we could make client to calculate them.\\n    uint rewardsToBurn;\\n    uint rewardsToPay;\\n  }\\n\\n  function getSecondsInDay() external view returns (uint);\\n  function getInitialSNKSupplyInWei() external view returns (uint);\\n  function getMaxStakingPeriodInDays() external view returns (uint);\\n  function getMinStakingPeriodInDays() external view returns (uint);\\n  function getInterestRatePerDayInCentipercents() external view returns (uint);\\n  function getMinNumberOfStakers() external view returns (uint);\\n  function getMinStakingValueCoef() external view returns(uint);\\n  function getPrevInitTime() external view returns (uint);\\n  function getBurningRateInPercents() external view returns(uint);\\n  function getSNKAddress() external view returns (address);\\n  function getTreasuryAddress() external view returns (address);\\n\\n  function init(uint maxStakingPeriodInDays) external;\\n  function getDepositLimits() external view returns(uint, uint);\\n  function deposit(uint amount, uint periodInDays) external; \\n  function computeRewards(uint amount, uint periodInDays) external view \\n    returns (uint rewards, uint rewardsToBurn, uint rewardsToPay);\\n  function getDepositRecords(address beneficiary) external view \\n    returns (DepositRecord[] memory);\\n  function burnBalance() external;\\n  function pause() external;\\n  function unpause() external;\\n\\n}\",\"keccak256\":\"0x5c56ed4bd4484766fa7f41d2bb44c9ba066cade6b70dd422bab9ef4313fe0e1d\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./ISkillToken.sol\\\";\\nimport \\\"./IStakingRewards.sol\\\";\\n\\ncontract StakingRewards is IStakingRewards, AccessControlEnumerableUpgradeable, PausableUpgradeable {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  uint private _secondsInDay;\\n  uint private _initialSkillSupplyInWei; \\n  uint private _maxStakingPeriodInDays; \\n  uint private _minStakingPeriodInDays; \\n  \\n  uint constant CentiPercent = 100 * 10**2;\\n  uint private _interestRatePerDayInCentipercents; // 1 = 0.01 %\\n  \\n  uint private _minNumberOfStakers;\\n  uint private _minStakingValueCoef;\\n  uint private _cmax; // re-calculated every _maxStakingPeriod\\n  uint private _cmin;\\n  uint private _prevInitTime;\\n  uint private _burningRateInPercents; //  1 = 1%\\n  ISkillToken private _skill;\\n  address _treasury;\\n   \\n  mapping (address => DepositRecord[]) private _beneficiaryDepositRecords;\\n  \\n  bool private _burnExecuted;\\n  bool private _isInitialized2;\\n  \\n  function initialize(\\n    address skill, \\n    address treasury,\\n    uint minStakingPeriodInDays, \\n    uint minNumberOfStakers,\\n    uint interestRatePerDayInCentipercents, \\n    uint initialSkillSupplyInWei,\\n    uint minStakingValueCoef, // factor by which Cmax is devided to get Cmin, Cmin = Cmax / minStatkingValueCoef\\n    uint burningRateInPercents,\\n    uint secondsInDay,\\n    address adminAccount\\n  ) initializer public \\n  {\\n    require(\\n      interestRatePerDayInCentipercents > 0 &&  \\n      minNumberOfStakers > 0 && \\n      initialSkillSupplyInWei > 0 &&\\n      minStakingValueCoef > 0, \\\"StakingRewards: Zero values not allowed\\\"\\n    );\\n\\n\\n    __AccessControlEnumerable_init();\\n    __Pausable_init();\\n    \\n    _skill = ISkillToken(skill);\\n    _treasury = treasury;\\n    _minStakingPeriodInDays = minStakingPeriodInDays;\\n    _minNumberOfStakers = minNumberOfStakers;\\n    _interestRatePerDayInCentipercents = interestRatePerDayInCentipercents;\\n    _initialSkillSupplyInWei = initialSkillSupplyInWei;\\n    _minStakingValueCoef = minStakingValueCoef;\\n    _burningRateInPercents = burningRateInPercents;\\n    _secondsInDay = secondsInDay;\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, adminAccount);\\n    _setupRole(PAUSER_ROLE, adminAccount);\\n  }\\n\\n  function initialize2(address ecosystem) external {\\n    require(_isInitialized2 == false, 'StakingRewards: already executed');\\n    uint balance = _skill.balanceOf(address(this));\\n    _skill.transfer(ecosystem, balance);\\n    _isInitialized2 = true;\\n  }\\n\\n  function burnBalance() external override {\\n    require(_isInitialized2 == true, 'StakingRewards: requires initialize2() execution');\\n    // the only intended source of balance of the contract is BurnSafe from other networks\\n    uint balance = _skill.balanceOf(address(this)); \\n    _skill.burn(address(this), balance);\\n  }\\n  \\n  function getSecondsInDay() external override view returns (uint) {\\n    return _secondsInDay;\\n  } \\n\\n  function getInitialSNKSupplyInWei() external override view returns (uint) {\\n    return _initialSkillSupplyInWei;\\n  }\\n\\n  function getMaxStakingPeriodInDays() external override view returns (uint) {\\n    return _maxStakingPeriodInDays;\\n  }\\n\\n  function getMinStakingPeriodInDays() external override view returns (uint) {\\n    return _minStakingPeriodInDays;\\n  }\\n\\n  function getInterestRatePerDayInCentipercents() external override view returns (uint) {\\n    return _interestRatePerDayInCentipercents;\\n  }\\n\\n  function getMinNumberOfStakers() external override view returns (uint) {\\n    return _minNumberOfStakers;\\n  }\\n\\n  function getMinStakingValueCoef() external override view returns(uint) {\\n    return _minStakingValueCoef;\\n  }\\n\\n  function getPrevInitTime() external override view returns(uint) {\\n    return _prevInitTime;\\n  }\\n\\n  function getBurningRateInPercents() external override view returns(uint) {\\n    return _burningRateInPercents;\\n  }\\n\\n  // SNK is rebrandad name of SKILL\\n  function getSNKAddress() external override view returns (address) {\\n    return address(_skill);\\n  }\\n\\n  function getTreasuryAddress() external override view returns (address) {\\n    return address(_treasury);\\n  }\\n\\n  modifier onlyTreasury() {\\n    require(msg.sender == _treasury, 'StakingRewards: Not treasury');\\n    _;\\n  }\\n\\n  function init(uint maxStakingPeriodInDays) external override onlyTreasury() whenNotPaused() {\\n    \\n    _prevInitTime = block.timestamp;\\n    _maxStakingPeriodInDays = maxStakingPeriodInDays; // = tmax\\n    uint T = _skill.balanceOf(address(this));\\n    uint S = _skill.totalSupply();\\n    uint S0 = _initialSkillSupplyInWei;\\n\\n    _cmax = S0 * T  * CentiPercent / _interestRatePerDayInCentipercents / _minNumberOfStakers / S / maxStakingPeriodInDays;\\n    if (_cmax > T) { \\n      _cmax = T;\\n    }\\n    _cmin = _cmax / _minStakingValueCoef;\\n    emit PeriodStart(_cmin, _cmax, T, S);\\n  }\\n\\n  function getDepositLimits() external override view returns(uint, uint) {\\n    return (_cmin, _cmax);\\n  }\\n\\n  function computeRewards(uint amount, uint periodInDays) external override view \\n    returns (uint rewards, uint rewardsToBurn, uint rewardsToPay) \\n  {\\n    return _computeRewards(amount, periodInDays);\\n  }\\n\\n  function _computeRewards(uint amount, uint periodInDays) internal view \\n    returns (uint rewards, uint rewardsToBurn, uint rewardsToPay) \\n  {\\n    \\n    rewards = amount * periodInDays * _skill.totalSupply() * _interestRatePerDayInCentipercents / CentiPercent / _initialSkillSupplyInWei;\\n    rewardsToBurn = rewards * _burningRateInPercents / 100;\\n    rewardsToPay = rewards - rewardsToBurn;\\n  }\\n  \\n  \\n  function deposit(uint amount, uint periodInDays) external whenNotPaused() override {\\n    revert(\\\"No more deposits allowed\\\");\\n    require(block.timestamp > _prevInitTime && block.timestamp < _prevInitTime + _maxStakingPeriodInDays * _secondsInDay, 'Reward cycle is not initialized' );\\n    require(periodInDays >= _minStakingPeriodInDays && periodInDays <= _maxStakingPeriodInDays, 'Invalid staking period');\\n    require(amount >= _cmin && amount <= _cmax, 'Invalid staking amount'); \\n        \\n    uint releaseTime = block.timestamp + periodInDays * _secondsInDay;\\n    address beneficiary = msg.sender;\\n    TokenTimelock tokenTimelock = new TokenTimelock(IERC20(address(_skill)), beneficiary, releaseTime);\\n    (uint rewards, uint rewardsToBurn, uint rewardsToPay) = _computeRewards(amount, periodInDays);\\n        \\n    require(_skill.transferFrom(msg.sender, address(tokenTimelock), amount), 'Not enough funds');\\n    _skill.burn(address(this), rewardsToBurn);\\n    _skill.transfer(address(tokenTimelock), rewardsToPay);\\n\\n    DepositRecord memory depositRecord = DepositRecord(\\n      tokenTimelock,\\n      amount,\\n      rewards,\\n      rewardsToBurn,\\n      rewardsToPay\\n    );\\n\\n    _beneficiaryDepositRecords[beneficiary].push(depositRecord);\\n\\n    emit Deposit(\\n      beneficiary, \\n      address(tokenTimelock), \\n      amount, \\n      rewards,\\n      rewardsToBurn,\\n      rewardsToPay\\n    );\\n  }\\n\\n  function getDepositRecords(address beneficiary) external view override returns (DepositRecord[] memory) {\\n    return _beneficiaryDepositRecords[beneficiary];\\n  }\\n  \\n  function pause() external override onlyRole(PAUSER_ROLE) whenNotPaused() {\\n    _pause();\\n  }\\n\\n  function unpause() external override onlyRole(PAUSER_ROLE) whenPaused() {\\n    _unpause();\\n  }\\n\\n  // for adjusting vesting\\n  function burnFromOldVesting() onlyRole(PAUSER_ROLE) whenNotPaused() external {\\n    require(_burnExecuted == false, 'Already executed');\\n    address oldVestingAddress = 0x73F45FA6f81535596600b7C2C93F4b5A71Cb55E8;\\n    uint balanceOfOldVesting = _skill.balanceOf(oldVestingAddress); \\n    _skill.burn(oldVestingAddress, balanceOfOldVesting);\\n    _burnExecuted = true;\\n  }\\n\\n  \\n}\",\"keccak256\":\"0x9cd509842cc8e6f4cd708d918728336b95b3cf406732314f7e378b0806c5c7bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612154806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200022b5760003560e01c80635ad1d7f91162000135578063b7b0422d11620000bd578063d59424b01162000087578063d59424b01462000459578063e00246041462000463578063e2bbb158146200046d578063e3f838981462000484578063e63ab1e9146200048e576200022b565b8063b7b0422d146200040a578063bc68fad91462000421578063ca15c873146200042b578063d547741f1462000442576200022b565b80639010d07c11620000ff5780639010d07c14620003ac57806391d1485414620003c3578063a217fddf14620003da578063b3a523c114620003e4576200022b565b80635ad1d7f914620003675780635c975abb146200037e5780637f414cf814620003885780638456cb5914620003a2576200022b565b806329ef339911620001b95780633f4ba83a11620001835780633f4ba83a146200033f57806340c032b21462000349578063457df5e414620003535780634fefa601146200035d576200022b565b806329ef339914620002fd5780632f2ff15d146200030757806336568abe146200031e5780633cabbf721462000335576200022b565b80630b751db511620001fb5780630b751db514620002aa5780630c49898014620002c3578063248a9ca314620002cf57806326dcff1514620002e6576200022b565b8062081e37146200023057806301ffc9a7146200025257806304515c4414620002785780630ae32c5714620002a0575b600080fd5b6200023a62000498565b60405162000249919062001cd6565b60405180910390f35b620002696200026336600462001b69565b6200049e565b60405162000249919062001ccb565b6200028f6200028936600462001b47565b620004ce565b604051620002499392919062001ff2565b6200023a620004ec565b620002b4620004f2565b60405162000249919062001c25565b620002cd62000502565b005b6200023a620002e036600462001b00565b6200069e565b620002cd620002f736600462001a32565b620006b3565b6200023a62000808565b620002cd6200031836600462001b19565b6200080f565b620002cd6200032f36600462001b19565b6200083a565b6200023a62000860565b620002cd62000867565b6200023a620008bc565b6200023a620008c3565b6200023a620008c9565b620002cd6200037836600462001a4f565b620008cf565b6200026962000a32565b6200039262000a3b565b6040516200024992919062001fe4565b620002cd62000a47565b620002b4620003bd36600462001b47565b62000a9a565b62000269620003d436600462001b19565b62000abd565b6200023a62000ae8565b620003fb620003f536600462001a32565b62000aed565b60405162000249919062001c52565b620002cd6200041b36600462001b00565b62000b9a565b620002cd62000de9565b6200023a6200043c36600462001b00565b62000f0f565b620002cd6200045336600462001b19565b62000f28565b6200023a62000f34565b620002b462000f3b565b620002cd6200047e36600462001b47565b62000f4b565b6200023a62000f8f565b6200023a62000f95565b60fe5490565b60006001600160e01b03198216635a05180f60e01b1480620004c65750620004c68262000fa8565b90505b919050565b6000806000620004df858562000fd0565b9250925092509250925092565b60fc5490565b610106546001600160a01b031690565b600080516020620020ff833981519152620005278162000521620010dd565b620010e1565b6200053162000a32565b156200055a5760405162461bcd60e51b8152600401620005519062001e51565b60405180910390fd5b6101095460ff1615620005815760405162461bcd60e51b8152600401620005519062001e27565b610106546040516370a0823160e01b81527373f45fa6f81535596600b7c2c93f4b5a71cb55e8916000916001600160a01b03909116906370a0823190620005cd90859060040162001c25565b60206040518083038186803b158015620005e657600080fd5b505afa158015620005fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000621919062001b93565b61010654604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac9062000657908590859060040162001c39565b600060405180830381600087803b1580156200067257600080fd5b505af115801562000687573d6000803e3d6000fd5b5050610109805460ff191660011790555050505050565b60009081526065602052604090206001015490565b61010954610100900460ff1615620006df5760405162461bcd60e51b8152600401620005519062001f19565b610106546040516370a0823160e01b81526000916001600160a01b0316906370a08231906200071390309060040162001c25565b60206040518083038186803b1580156200072c57600080fd5b505afa15801562000741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000767919062001b93565b6101065460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906200079d908590859060040162001c39565b602060405180830381600087803b158015620007b857600080fd5b505af1158015620007cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f3919062001ade565b5050610109805461ff00191661010017905550565b6101005490565b6200081b828262001154565b60008281526097602052604090206200083590826200117a565b505050565b62000846828262001191565b6000828152609760205260409020620008359082620011da565b6101055490565b600080516020620020ff833981519152620008868162000521620010dd565b6200089062000a32565b620008af5760405162461bcd60e51b8152600401620005519062001d8b565b620008b9620011f1565b50565b6101045490565b60fb5490565b60ff5490565b600054610100900460ff1680620008e9575060005460ff16155b620009085760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff1615801562000934576000805460ff1961ff0019909116610100171660011790555b600087118015620009455750600088115b8015620009525750600086115b80156200095f5750600085115b6200097e5760405162461bcd60e51b8152600401620005519062001f4e565b6200098862001268565b620009926200130a565b61010680546001600160a01b03808e166001600160a01b0319928316179092556101078054928d169290911691909117905560fe89905561010088905560ff87905560fc86905561010185905561010584905560fb839055620009f760008362001383565b62000a12600080516020620020ff8339815191528362001383565b801562000a25576000805461ff00191690555b5050505050505050505050565b60c95460ff1690565b61010354610102549091565b600080516020620020ff83398151915262000a668162000521620010dd565b62000a7062000a32565b1562000a905760405162461bcd60e51b8152600401620005519062001e51565b620008b96200138f565b600082815260976020526040812062000ab49083620013f1565b90505b92915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b6001600160a01b038116600090815261010860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101562000b8f5760008481526020908190206040805160a0810182526005860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600401546080830152908352909201910162000b26565b505050509050919050565b610107546001600160a01b0316331462000bc85760405162461bcd60e51b8152600401620005519062001db9565b62000bd262000a32565b1562000bf25760405162461bcd60e51b8152600401620005519062001e51565b426101045560fd819055610106546040516370a0823160e01b81526000916001600160a01b0316906370a082319062000c3090309060040162001c25565b60206040518083038186803b15801562000c4957600080fd5b505afa15801562000c5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c84919062001b93565b9050600061010660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cd857600080fd5b505afa15801562000ced573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d13919062001b93565b9050600060fc54905083826101005460ff54612710878662000d3691906200205f565b62000d4291906200205f565b62000d4e91906200203e565b62000d5a91906200203e565b62000d6691906200203e565b62000d7291906200203e565b61010281905583101562000d87576101028390555b610101546101025462000d9b91906200203e565b610103819055610102546040517f1794702301983eba418ba14205a7e8c6d7c317e504d8bef769549798e55988669262000ddb9290918790879062002008565b60405180910390a150505050565b6101095460ff61010090910416151560011462000e1a5760405162461bcd60e51b8152600401620005519062001ec9565b610106546040516370a0823160e01b81526000916001600160a01b0316906370a082319062000e4e90309060040162001c25565b60206040518083038186803b15801562000e6757600080fd5b505afa15801562000e7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ea2919062001b93565b61010654604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac9062000ed8903090859060040162001c39565b600060405180830381600087803b15801562000ef357600080fd5b505af115801562000f08573d6000803e3d6000fd5b5050505050565b6000818152609760205260408120620004c690620013ff565b6200084682826200140c565b6101015490565b610107546001600160a01b031690565b62000f5562000a32565b1562000f755760405162461bcd60e51b8152600401620005519062001e51565b60405162461bcd60e51b8152600401620005519062001df0565b60fd5490565b600080516020620020ff83398151915281565b60006001600160e01b03198216637965db0b60e01b1480620004c65750620004c68262001432565b600080600060fc5461271060ff5461010660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200102e57600080fd5b505afa15801562001043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001069919062001b93565b62001075888a6200205f565b6200108191906200205f565b6200108d91906200205f565b6200109991906200203e565b620010a591906200203e565b925060646101055484620010ba91906200205f565b620010c691906200203e565b9150620010d4828462002081565b90509250925092565b3390565b620010ed828262000abd565b620011505762001108816001600160a01b031660146200144b565b620011158360206200144b565b6040516020016200112892919062001bac565b60408051601f198184030181529082905262461bcd60e51b8252620005519160040162001cdf565b5050565b6200115f826200069e565b6200116e8162000521620010dd565b62000835838362001612565b600062000ab4836001600160a01b0384166200169e565b6200119b620010dd565b6001600160a01b0316816001600160a01b031614620011ce5760405162461bcd60e51b8152600401620005519062001f95565b620011508282620016ed565b600062000ab4836001600160a01b03841662001777565b620011fb62000a32565b6200121a5760405162461bcd60e51b8152600401620005519062001d8b565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6200124f620010dd565b6040516200125e919062001c25565b60405180910390a1565b600054610100900460ff168062001282575060005460ff16155b620012a15760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff16158015620012cd576000805460ff1961ff0019909116610100171660011790555b620012d762001898565b620012e162001898565b620012eb62001898565b620012f562001898565b8015620008b9576000805461ff001916905550565b600054610100900460ff168062001324575060005460ff16155b620013435760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff161580156200136f576000805460ff1961ff0019909116610100171660011790555b6200137962001898565b620012f562001911565b6200081b828262001995565b6200139962000a32565b15620013b95760405162461bcd60e51b8152600401620005519062001e51565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586200124f620010dd565b600062000ab48383620019a1565b6000620004c682620019fe565b62001417826200069e565b620014268162000521620010dd565b620008358383620016ed565b6001600160e01b031981166301ffc9a760e01b14919050565b606060006200145c8360026200205f565b6200146990600262002023565b67ffffffffffffffff8111156200149057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620014bb576020820181803683370190505b509050600360fc1b81600081518110620014e557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200152357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620015498460026200205f565b6200155690600162002023565b90505b6001811115620015f0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200159a57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620015bf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620015e881620020ce565b905062001559565b50831562000ab45760405162461bcd60e51b8152600401620005519062001d56565b6200161e828262000abd565b620011505760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200165a620010dd565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620016ac838362001a02565b620016e45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000ab7565b50600062000ab7565b620016f9828262000abd565b15620011505760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916905562001733620010dd565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156200188d5760006200179e60018362002081565b8554909150600090620017b49060019062002081565b90506000866000018281548110620017dc57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106200180e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806200185057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505062000ab7565b600091505062000ab7565b600054610100900460ff1680620018b2575060005460ff16155b620018d15760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff16158015620012f5576000805460ff1961ff0019909116610100171660011790558015620008b9576000805461ff001916905550565b600054610100900460ff16806200192b575060005460ff16155b6200194a5760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff1615801562001976576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191690558015620008b9576000805461ff001916905550565b62001150828262001612565b81546000908210620019c75760405162461bcd60e51b8152600401620005519062001d14565b826000018281548110620019eb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b5490565b60009081526001919091016020526040902054151590565b80356001600160a01b0381168114620004c957600080fd5b60006020828403121562001a44578081fd5b62000ab48262001a1a565b6000806000806000806000806000806101408b8d03121562001a6f578586fd5b62001a7a8b62001a1a565b995062001a8a60208c0162001a1a565b985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b0135915062001acd6101208c0162001a1a565b90509295989b9194979a5092959850565b60006020828403121562001af0578081fd5b8151801515811462000ab4578182fd5b60006020828403121562001b12578081fd5b5035919050565b6000806040838503121562001b2c578182fd5b8235915062001b3e6020840162001a1a565b90509250929050565b6000806040838503121562001b5a578182fd5b50508035926020909101359150565b60006020828403121562001b7b578081fd5b81356001600160e01b03198116811462000ab4578182fd5b60006020828403121562001ba5578081fd5b5051919050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835162001be68160178501602088016200209b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162001c198160288401602088016200209b565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101562001cbe57815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080908101519085015260a0909301929085019060010162001c6f565b5091979650505050505050565b901515815260200190565b90815260200190565b600060208252825180602084015262001d008160408501602087016200209b565b601f01601f19169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601c908201527f5374616b696e67526577617264733a204e6f7420747265617375727900000000604082015260600190565b60208082526018908201527f4e6f206d6f7265206465706f7369747320616c6c6f7765640000000000000000604082015260600190565b60208082526010908201526f105b1c9958591e48195e1958dd5d195960821b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526030908201527f5374616b696e67526577617264733a20726571756972657320696e697469616c60408201526f34bd329914149032bc32b1baba34b7b760811b606082015260800190565b6020808252818101527f5374616b696e67526577617264733a20616c7265616479206578656375746564604082015260600190565b60208082526027908201527f5374616b696e67526577617264733a205a65726f2076616c756573206e6f7420604082015266185b1b1bddd95960ca1b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60008219821115620020395762002039620020e8565b500190565b6000826200205a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156200207c576200207c620020e8565b500290565b600082821015620020965762002096620020e8565b500390565b60005b83811015620020b85781810151838201526020016200209e565b83811115620020c8576000848401525b50505050565b600081620020e057620020e0620020e8565b506000190190565b634e487b7160e01b600052601160045260246000fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220645b1adab5f022c0c9e6dad692f9be151a8f58dfac71ad3c3bd82a720fc4d0b364736f6c63430008000033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200022b5760003560e01c80635ad1d7f91162000135578063b7b0422d11620000bd578063d59424b01162000087578063d59424b01462000459578063e00246041462000463578063e2bbb158146200046d578063e3f838981462000484578063e63ab1e9146200048e576200022b565b8063b7b0422d146200040a578063bc68fad91462000421578063ca15c873146200042b578063d547741f1462000442576200022b565b80639010d07c11620000ff5780639010d07c14620003ac57806391d1485414620003c3578063a217fddf14620003da578063b3a523c114620003e4576200022b565b80635ad1d7f914620003675780635c975abb146200037e5780637f414cf814620003885780638456cb5914620003a2576200022b565b806329ef339911620001b95780633f4ba83a11620001835780633f4ba83a146200033f57806340c032b21462000349578063457df5e414620003535780634fefa601146200035d576200022b565b806329ef339914620002fd5780632f2ff15d146200030757806336568abe146200031e5780633cabbf721462000335576200022b565b80630b751db511620001fb5780630b751db514620002aa5780630c49898014620002c3578063248a9ca314620002cf57806326dcff1514620002e6576200022b565b8062081e37146200023057806301ffc9a7146200025257806304515c4414620002785780630ae32c5714620002a0575b600080fd5b6200023a62000498565b60405162000249919062001cd6565b60405180910390f35b620002696200026336600462001b69565b6200049e565b60405162000249919062001ccb565b6200028f6200028936600462001b47565b620004ce565b604051620002499392919062001ff2565b6200023a620004ec565b620002b4620004f2565b60405162000249919062001c25565b620002cd62000502565b005b6200023a620002e036600462001b00565b6200069e565b620002cd620002f736600462001a32565b620006b3565b6200023a62000808565b620002cd6200031836600462001b19565b6200080f565b620002cd6200032f36600462001b19565b6200083a565b6200023a62000860565b620002cd62000867565b6200023a620008bc565b6200023a620008c3565b6200023a620008c9565b620002cd6200037836600462001a4f565b620008cf565b6200026962000a32565b6200039262000a3b565b6040516200024992919062001fe4565b620002cd62000a47565b620002b4620003bd36600462001b47565b62000a9a565b62000269620003d436600462001b19565b62000abd565b6200023a62000ae8565b620003fb620003f536600462001a32565b62000aed565b60405162000249919062001c52565b620002cd6200041b36600462001b00565b62000b9a565b620002cd62000de9565b6200023a6200043c36600462001b00565b62000f0f565b620002cd6200045336600462001b19565b62000f28565b6200023a62000f34565b620002b462000f3b565b620002cd6200047e36600462001b47565b62000f4b565b6200023a62000f8f565b6200023a62000f95565b60fe5490565b60006001600160e01b03198216635a05180f60e01b1480620004c65750620004c68262000fa8565b90505b919050565b6000806000620004df858562000fd0565b9250925092509250925092565b60fc5490565b610106546001600160a01b031690565b600080516020620020ff833981519152620005278162000521620010dd565b620010e1565b6200053162000a32565b156200055a5760405162461bcd60e51b8152600401620005519062001e51565b60405180910390fd5b6101095460ff1615620005815760405162461bcd60e51b8152600401620005519062001e27565b610106546040516370a0823160e01b81527373f45fa6f81535596600b7c2c93f4b5a71cb55e8916000916001600160a01b03909116906370a0823190620005cd90859060040162001c25565b60206040518083038186803b158015620005e657600080fd5b505afa158015620005fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000621919062001b93565b61010654604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac9062000657908590859060040162001c39565b600060405180830381600087803b1580156200067257600080fd5b505af115801562000687573d6000803e3d6000fd5b5050610109805460ff191660011790555050505050565b60009081526065602052604090206001015490565b61010954610100900460ff1615620006df5760405162461bcd60e51b8152600401620005519062001f19565b610106546040516370a0823160e01b81526000916001600160a01b0316906370a08231906200071390309060040162001c25565b60206040518083038186803b1580156200072c57600080fd5b505afa15801562000741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000767919062001b93565b6101065460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906200079d908590859060040162001c39565b602060405180830381600087803b158015620007b857600080fd5b505af1158015620007cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f3919062001ade565b5050610109805461ff00191661010017905550565b6101005490565b6200081b828262001154565b60008281526097602052604090206200083590826200117a565b505050565b62000846828262001191565b6000828152609760205260409020620008359082620011da565b6101055490565b600080516020620020ff833981519152620008868162000521620010dd565b6200089062000a32565b620008af5760405162461bcd60e51b8152600401620005519062001d8b565b620008b9620011f1565b50565b6101045490565b60fb5490565b60ff5490565b600054610100900460ff1680620008e9575060005460ff16155b620009085760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff1615801562000934576000805460ff1961ff0019909116610100171660011790555b600087118015620009455750600088115b8015620009525750600086115b80156200095f5750600085115b6200097e5760405162461bcd60e51b8152600401620005519062001f4e565b6200098862001268565b620009926200130a565b61010680546001600160a01b03808e166001600160a01b0319928316179092556101078054928d169290911691909117905560fe89905561010088905560ff87905560fc86905561010185905561010584905560fb839055620009f760008362001383565b62000a12600080516020620020ff8339815191528362001383565b801562000a25576000805461ff00191690555b5050505050505050505050565b60c95460ff1690565b61010354610102549091565b600080516020620020ff83398151915262000a668162000521620010dd565b62000a7062000a32565b1562000a905760405162461bcd60e51b8152600401620005519062001e51565b620008b96200138f565b600082815260976020526040812062000ab49083620013f1565b90505b92915050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600081565b6001600160a01b038116600090815261010860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101562000b8f5760008481526020908190206040805160a0810182526005860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600401546080830152908352909201910162000b26565b505050509050919050565b610107546001600160a01b0316331462000bc85760405162461bcd60e51b8152600401620005519062001db9565b62000bd262000a32565b1562000bf25760405162461bcd60e51b8152600401620005519062001e51565b426101045560fd819055610106546040516370a0823160e01b81526000916001600160a01b0316906370a082319062000c3090309060040162001c25565b60206040518083038186803b15801562000c4957600080fd5b505afa15801562000c5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c84919062001b93565b9050600061010660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cd857600080fd5b505afa15801562000ced573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d13919062001b93565b9050600060fc54905083826101005460ff54612710878662000d3691906200205f565b62000d4291906200205f565b62000d4e91906200203e565b62000d5a91906200203e565b62000d6691906200203e565b62000d7291906200203e565b61010281905583101562000d87576101028390555b610101546101025462000d9b91906200203e565b610103819055610102546040517f1794702301983eba418ba14205a7e8c6d7c317e504d8bef769549798e55988669262000ddb9290918790879062002008565b60405180910390a150505050565b6101095460ff61010090910416151560011462000e1a5760405162461bcd60e51b8152600401620005519062001ec9565b610106546040516370a0823160e01b81526000916001600160a01b0316906370a082319062000e4e90309060040162001c25565b60206040518083038186803b15801562000e6757600080fd5b505afa15801562000e7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ea2919062001b93565b61010654604051632770a7eb60e21b81529192506001600160a01b031690639dc29fac9062000ed8903090859060040162001c39565b600060405180830381600087803b15801562000ef357600080fd5b505af115801562000f08573d6000803e3d6000fd5b5050505050565b6000818152609760205260408120620004c690620013ff565b6200084682826200140c565b6101015490565b610107546001600160a01b031690565b62000f5562000a32565b1562000f755760405162461bcd60e51b8152600401620005519062001e51565b60405162461bcd60e51b8152600401620005519062001df0565b60fd5490565b600080516020620020ff83398151915281565b60006001600160e01b03198216637965db0b60e01b1480620004c65750620004c68262001432565b600080600060fc5461271060ff5461010660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200102e57600080fd5b505afa15801562001043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001069919062001b93565b62001075888a6200205f565b6200108191906200205f565b6200108d91906200205f565b6200109991906200203e565b620010a591906200203e565b925060646101055484620010ba91906200205f565b620010c691906200203e565b9150620010d4828462002081565b90509250925092565b3390565b620010ed828262000abd565b620011505762001108816001600160a01b031660146200144b565b620011158360206200144b565b6040516020016200112892919062001bac565b60408051601f198184030181529082905262461bcd60e51b8252620005519160040162001cdf565b5050565b6200115f826200069e565b6200116e8162000521620010dd565b62000835838362001612565b600062000ab4836001600160a01b0384166200169e565b6200119b620010dd565b6001600160a01b0316816001600160a01b031614620011ce5760405162461bcd60e51b8152600401620005519062001f95565b620011508282620016ed565b600062000ab4836001600160a01b03841662001777565b620011fb62000a32565b6200121a5760405162461bcd60e51b8152600401620005519062001d8b565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6200124f620010dd565b6040516200125e919062001c25565b60405180910390a1565b600054610100900460ff168062001282575060005460ff16155b620012a15760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff16158015620012cd576000805460ff1961ff0019909116610100171660011790555b620012d762001898565b620012e162001898565b620012eb62001898565b620012f562001898565b8015620008b9576000805461ff001916905550565b600054610100900460ff168062001324575060005460ff16155b620013435760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff161580156200136f576000805460ff1961ff0019909116610100171660011790555b6200137962001898565b620012f562001911565b6200081b828262001995565b6200139962000a32565b15620013b95760405162461bcd60e51b8152600401620005519062001e51565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586200124f620010dd565b600062000ab48383620019a1565b6000620004c682620019fe565b62001417826200069e565b620014268162000521620010dd565b620008358383620016ed565b6001600160e01b031981166301ffc9a760e01b14919050565b606060006200145c8360026200205f565b6200146990600262002023565b67ffffffffffffffff8111156200149057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620014bb576020820181803683370190505b509050600360fc1b81600081518110620014e557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200152357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620015498460026200205f565b6200155690600162002023565b90505b6001811115620015f0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200159a57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620015bf57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620015e881620020ce565b905062001559565b50831562000ab45760405162461bcd60e51b8152600401620005519062001d56565b6200161e828262000abd565b620011505760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200165a620010dd565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620016ac838362001a02565b620016e45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000ab7565b50600062000ab7565b620016f9828262000abd565b15620011505760008281526065602090815260408083206001600160a01b03851684529091529020805460ff1916905562001733620010dd565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156200188d5760006200179e60018362002081565b8554909150600090620017b49060019062002081565b90506000866000018281548110620017dc57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106200180e57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600189019091526040902084905586548790806200185057634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505062000ab7565b600091505062000ab7565b600054610100900460ff1680620018b2575060005460ff16155b620018d15760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff16158015620012f5576000805460ff1961ff0019909116610100171660011790558015620008b9576000805461ff001916905550565b600054610100900460ff16806200192b575060005460ff16155b6200194a5760405162461bcd60e51b8152600401620005519062001e7b565b600054610100900460ff1615801562001976576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191690558015620008b9576000805461ff001916905550565b62001150828262001612565b81546000908210620019c75760405162461bcd60e51b8152600401620005519062001d14565b826000018281548110620019eb57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b5490565b60009081526001919091016020526040902054151590565b80356001600160a01b0381168114620004c957600080fd5b60006020828403121562001a44578081fd5b62000ab48262001a1a565b6000806000806000806000806000806101408b8d03121562001a6f578586fd5b62001a7a8b62001a1a565b995062001a8a60208c0162001a1a565b985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b0135915062001acd6101208c0162001a1a565b90509295989b9194979a5092959850565b60006020828403121562001af0578081fd5b8151801515811462000ab4578182fd5b60006020828403121562001b12578081fd5b5035919050565b6000806040838503121562001b2c578182fd5b8235915062001b3e6020840162001a1a565b90509250929050565b6000806040838503121562001b5a578182fd5b50508035926020909101359150565b60006020828403121562001b7b578081fd5b81356001600160e01b03198116811462000ab4578182fd5b60006020828403121562001ba5578081fd5b5051919050565b60007f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008252835162001be68160178501602088016200209b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162001c198160288401602088016200209b565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101562001cbe57815180516001600160a01b0316855286810151878601528581015186860152606080820151908601526080908101519085015260a0909301929085019060010162001c6f565b5091979650505050505050565b901515815260200190565b90815260200190565b600060208252825180602084015262001d008160408501602087016200209b565b601f01601f19169190910160400192915050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601c908201527f5374616b696e67526577617264733a204e6f7420747265617375727900000000604082015260600190565b60208082526018908201527f4e6f206d6f7265206465706f7369747320616c6c6f7765640000000000000000604082015260600190565b60208082526010908201526f105b1c9958591e48195e1958dd5d195960821b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526030908201527f5374616b696e67526577617264733a20726571756972657320696e697469616c60408201526f34bd329914149032bc32b1baba34b7b760811b606082015260800190565b6020808252818101527f5374616b696e67526577617264733a20616c7265616479206578656375746564604082015260600190565b60208082526027908201527f5374616b696e67526577617264733a205a65726f2076616c756573206e6f7420604082015266185b1b1bddd95960ca1b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60008219821115620020395762002039620020e8565b500190565b6000826200205a57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156200207c576200207c620020e8565b500290565b600082821015620020965762002096620020e8565b500390565b60005b83811015620020b85781810151838201526020016200209e565b83811115620020c8576000848401525b50505050565b600081620020e057620020e0620020e8565b506000190190565b634e487b7160e01b600052601160045260246000fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220645b1adab5f022c0c9e6dad692f9be151a8f58dfac71ad3c3bd82a720fc4d0b364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2658,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)"
      },
      {
        "astId": 615,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 62,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3206_storage)"
      },
      {
        "astId": 219,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 814,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 905,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17485,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_secondsInDay",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 17487,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initialSkillSupplyInWei",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 17489,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_maxStakingPeriodInDays",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 17491,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_minStakingPeriodInDays",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 17500,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_interestRatePerDayInCentipercents",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 17502,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_minNumberOfStakers",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 17504,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_minStakingValueCoef",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 17506,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_cmax",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 17508,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_cmin",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 17510,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_prevInitTime",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 17512,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_burningRateInPercents",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 17515,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_skill",
        "offset": 0,
        "slot": "262",
        "type": "t_contract(ISkillToken)13411"
      },
      {
        "astId": 17517,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_treasury",
        "offset": 0,
        "slot": "263",
        "type": "t_address"
      },
      {
        "astId": 17523,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_beneficiaryDepositRecords",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_address,t_array(t_struct(DepositRecord)13716_storage)dyn_storage)"
      },
      {
        "astId": 17525,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_burnExecuted",
        "offset": 0,
        "slot": "265",
        "type": "t_bool"
      },
      {
        "astId": 17527,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_isInitialized2",
        "offset": 1,
        "slot": "265",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(DepositRecord)13716_storage)dyn_storage": {
        "base": "t_struct(DepositRecord)13716_storage",
        "encoding": "dynamic_array",
        "label": "struct IStakingRewards.DepositRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISkillToken)13411": {
        "encoding": "inplace",
        "label": "contract ISkillToken",
        "numberOfBytes": "20"
      },
      "t_contract(TokenTimelock)4382": {
        "encoding": "inplace",
        "label": "contract TokenTimelock",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(DepositRecord)13716_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakingRewards.DepositRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(DepositRecord)13716_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3206_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3206_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)302_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3206_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3205,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2931_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DepositRecord)13716_storage": {
        "encoding": "inplace",
        "label": "struct IStakingRewards.DepositRecord",
        "members": [
          {
            "astId": 13707,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "tokenTimelock",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(TokenTimelock)4382"
          },
          {
            "astId": 13709,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "depositAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13711,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "rewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13713,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "rewardsToBurn",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13715,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "rewardsToPay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)302_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 299,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 301,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2931_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2926,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2930,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}