{
  "address": "0xD9Cb2C073832a25c1de1B78A80bbB384Fdd587E6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "AgedActiveRoomDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "EmergencyUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "roomOwner",
          "type": "address"
        }
      ],
      "name": "FreeRoomCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "JoinedFreeRoom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "roomOwner",
          "type": "address"
        }
      ],
      "name": "RoomCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "winners",
          "type": "address[]"
        }
      ],
      "name": "RoomFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "RoomLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxParticipantCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStakeInNativeCurrency",
          "type": "bool"
        },
        {
          "internalType": "enum IBigBoyTable.ROOM_MODE",
          "name": "roomMode",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "pwdRef",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "createFreeRoom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxParticipantCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isStakeInNativeCurrency",
          "type": "bool"
        },
        {
          "internalType": "enum IBigBoyTable.ROOM_MODE",
          "name": "roomMode",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "pwdRef",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "createRoom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "deleteAgedActiveRoom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "emergencyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveRoomCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveRoomDeletionDelayInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIdx",
          "type": "uint256"
        }
      ],
      "name": "getActiveRooms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "participantCount",
              "type": "uint256"
            },
            {
              "internalType": "address payable[]",
              "name": "participants",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "requiredStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStakeInNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum IBigBoyTable.ROOM_MODE",
              "name": "roomMode",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "rounds",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canJoinForFree",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pwdRef",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBigBoyTable.Room[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmergencyExtractorRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtractorRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFinishedRoomCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIdx",
          "type": "uint256"
        }
      ],
      "name": "getFinishedRooms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "participantCount",
              "type": "uint256"
            },
            {
              "internalType": "address payable[]",
              "name": "participants",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "requiredStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isStakeInNativeCurrency",
              "type": "bool"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "enum IBigBoyTable.ROOM_MODE",
              "name": "roomMode",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "rounds",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canJoinForFree",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pwdRef",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBigBoyTable.Room[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxParticipantsPerRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinParticipantsPerRoom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimalStakeInNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimalStakeInSNK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimalStakeInUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNative2USDCRatioInEtherUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPauserRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoomCreationPriceInSNK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoomCreationPriceInUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingWindowInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinningFeeInPercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adminAccount",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "winningFeeInPercents",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roomCreationPriceInUSDC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingWindowInSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activeRoomDeletionDelayInSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimalStakeInUSDC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "native2usdcNumerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "native2usdcDenominator",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "foundersAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "skill",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ecosystem",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniswap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collectionList",
              "type": "address"
            }
          ],
          "internalType": "struct BigBoyTable.InitializerParameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "joinFreeRoom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "lockRoom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        },
        {
          "internalType": "address payable[]",
          "name": "winners",
          "type": "address[]"
        }
      ],
      "name": "reportWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "activeRoomDeletionDelayInSeconds",
          "type": "uint256"
        }
      ],
      "name": "setActiveRoomDeletionDelayInSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimalStakeInUSDC",
          "type": "uint256"
        }
      ],
      "name": "setMinimalStakeInUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "setNative2USDCRatioInEtherUnits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomCreationPriceInUSDC",
          "type": "uint256"
        }
      ],
      "name": "setRoomCreationPriceInUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakingWindowInSeconds",
          "type": "uint256"
        }
      ],
      "name": "setStakingWindowInSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "winningFeeInPercents",
          "type": "uint256"
        }
      ],
      "name": "setWinningFeeInPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "stakeNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomId",
          "type": "uint256"
        }
      ],
      "name": "stakeSNK",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x109fadb3aa7221750eb4b45a3e6dc7136cb071d10060362c43d49247382095fc",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x9a1187cB7084F3E60a8b99eb195D9f3c29361a8a",
    "contractAddress": "0xD9Cb2C073832a25c1de1B78A80bbB384Fdd587E6",
    "transactionIndex": 0,
    "gasUsed": "3844981",
    "logsBloom": "0x
    "blockHash": "0x100760cce64a5d7cb76980fcdca3edf53746f977be2811a1017864c054513d5e",
    "transactionHash": "0x109fadb3aa7221750eb4b45a3e6dc7136cb071d10060362c43d49247382095fc",
    "logs": [],
    "blockNumber": 264711,
    "cumulativeGasUsed": "3844981",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "44bc5b6e9efb9005c0cdf786881a4dc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"AgedActiveRoomDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roomOwner\",\"type\":\"address\"}],\"name\":\"FreeRoomCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"JoinedFreeRoom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roomOwner\",\"type\":\"address\"}],\"name\":\"RoomCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"RoomFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"RoomLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxParticipantCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakeInNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"enum IBigBoyTable.ROOM_MODE\",\"name\":\"roomMode\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pwdRef\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"createFreeRoom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxParticipantCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakeInNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"enum IBigBoyTable.ROOM_MODE\",\"name\":\"roomMode\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"pwdRef\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"createRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"deleteAgedActiveRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveRoomCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveRoomDeletionDelayInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIdx\",\"type\":\"uint256\"}],\"name\":\"getActiveRooms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakeInNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IBigBoyTable.ROOM_MODE\",\"name\":\"roomMode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rounds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canJoinForFree\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pwdRef\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBigBoyTable.Room[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmergencyExtractorRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtractorRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinishedRoomCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIdx\",\"type\":\"uint256\"}],\"name\":\"getFinishedRooms\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"requiredStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStakeInNativeCurrency\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"enum IBigBoyTable.ROOM_MODE\",\"name\":\"roomMode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rounds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canJoinForFree\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pwdRef\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"internalType\":\"struct IBigBoyTable.Room[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxParticipantsPerRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinParticipantsPerRoom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimalStakeInNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimalStakeInSNK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimalStakeInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNative2USDCRatioInEtherUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauserRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoomCreationPriceInSNK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoomCreationPriceInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingWindowInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinningFeeInPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adminAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningFeeInPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roomCreationPriceInUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingWindowInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeRoomDeletionDelayInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimalStakeInUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"native2usdcNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"native2usdcDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"foundersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"skill\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ecosystem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionList\",\"type\":\"address\"}],\"internalType\":\"struct BigBoyTable.InitializerParameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"joinFreeRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"lockRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"reportWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeRoomDeletionDelayInSeconds\",\"type\":\"uint256\"}],\"name\":\"setActiveRoomDeletionDelayInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimalStakeInUSDC\",\"type\":\"uint256\"}],\"name\":\"setMinimalStakeInUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"setNative2USDCRatioInEtherUnits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomCreationPriceInUSDC\",\"type\":\"uint256\"}],\"name\":\"setRoomCreationPriceInUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingWindowInSeconds\",\"type\":\"uint256\"}],\"name\":\"setStakingWindowInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winningFeeInPercents\",\"type\":\"uint256\"}],\"name\":\"setWinningFeeInPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"stakeNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomId\",\"type\":\"uint256\"}],\"name\":\"stakeSNK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BigBoyTable.sol\":\"BigBoyTable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x24809d17a2d5bb3aa7195bbed04e7c228982c2d36e371e8a8cb2364877b0aa34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23e71de3279b56332a1d2e469efe69f82b7408847cc3d7d2d06a66f465837342\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/BigBoyTable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n\\nimport \\\"./IBigBoyTable.sol\\\";\\nimport \\\"./ISkillToken.sol\\\";\\nimport \\\"./IUniswapUSDCSkill.sol\\\";\\nimport \\\"./ICollectionList.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BigBoyTable is IBigBoyTable, AccessControlEnumerableUpgradeable, PausableUpgradeable {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  struct InitializerParameters {\\n    address adminAccount;\\n    uint winningFeeInPercents;\\n    uint roomCreationPriceInUSDC;\\n    uint stakingWindowInSeconds;\\n    uint activeRoomDeletionDelayInSeconds;\\n    uint minimalStakeInUSDC;\\n    uint native2usdcNumerator;\\n    uint native2usdcDenominator;\\n    address payable foundersAddress;\\n    address skill;\\n    address ecosystem;\\n    address uniswap;\\n    address collectionList;\\n  }\\n\\n  using Counters for Counters.Counter;\\n  bytes32 private constant EXTRACTOR_ROLE = keccak256(\\\"EXTRACTOR_ROLE\\\");\\n  bytes32 private constant EMERGENCY_EXTRACTOR_ROLE = keccak256(\\\"EMERGENCY_EXTRACTOR_ROLE\\\");\\n  bytes32 private constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  uint private constant DEFAULT_ROUNDS = 1;\\n  uint private constant MIN_PARTICIPANTS_PER_ROOM = 2;\\n  uint private constant MAX_PARTICIPANTS_PER_ROOM = 100;\\n  uint private constant _nativeCurrencyDecimals = 18; // ethereum-compatible networks\\n  uint private constant _usdcDecimals = 6;\\n  uint private constant _skillDecimals = 18;\\n\\n  Counters.Counter private _roomIds;\\n  \\n  address payable private _foundersAddress;\\n  ISkillToken private _skill;\\n  ICollectionList private _collectionList;\\n  address private _ecosystem;\\n  IUniswapUSDCSkill private _uniswap;\\n  // percent of SNK or Native, depending on room currency\\n  uint private _winningFeeInPercents;\\n  uint private _roomCreationPriceInUSDC;\\n  uint private _stakingWindowInSeconds;\\n  uint private _activeRoomDeletionDelayInSeconds;\\n  uint private _minimalStakeInUSDC;\\n  uint private _native2usdcNumerator;\\n  uint private _native2usdcDenominator;\\n\\n  mapping(uint=>Room) private _rooms;\\n  EnumerableSet.UintSet private _activeRoomIds;\\n  EnumerableSet.UintSet private _finishedRoomIds;\\n\\n  modifier onlyActiveRoom(uint roomId) {\\n    require(_activeRoomIds.contains(roomId), 'BBT: room is not active');\\n    _;\\n  }\\n\\n  modifier whenStakePossible(uint roomId) {\\n    require(_activeRoomIds.contains(roomId), 'BBT: room is not active');\\n    require(\\n      _rooms[roomId].lockedAt > 0, 'BBT: room is not locked'\\n    );\\n    require(\\n      block.timestamp <= _rooms[roomId].lockedAt + _stakingWindowInSeconds,\\n      'BBT: staking window closed'\\n    );\\n    require(\\n      _rooms[roomId].participantCount < _rooms[roomId].participants.length,\\n      'BBT: no more participants possible'\\n    );\\n    _;\\n  }\\n\\n  modifier withValidCollection(uint collectionId) {\\n    require(\\n      collectionId == 0 || collectionId != 0 && _collectionList.isActive(collectionId), \\n      \\\"BBT: collection is not active\\\"\\n    );\\n    _;\\n  }\\n\\n  function getExtractorRole() external override pure returns(bytes32) {\\n    return EXTRACTOR_ROLE;\\n  }\\n\\n  function getEmergencyExtractorRole() external override pure returns(bytes32) {\\n    return EMERGENCY_EXTRACTOR_ROLE;\\n  }\\n\\n  function getPauserRole() external override pure returns(bytes32) {\\n    return PAUSER_ROLE;\\n  }\\n\\n\\n  function initialize(InitializerParameters calldata params) initializer public {\\n    __AccessControlEnumerable_init();\\n    __Pausable_init();\\n    \\n    _setupRole(DEFAULT_ADMIN_ROLE, params.adminAccount);\\n    _setupRole(EXTRACTOR_ROLE, params.adminAccount);\\n\\n    _foundersAddress = params.foundersAddress;\\n    _skill = ISkillToken(params.skill);\\n    _ecosystem = params.ecosystem;\\n    _uniswap = IUniswapUSDCSkill(params.uniswap);\\n    _collectionList = ICollectionList(params.collectionList);\\n    _winningFeeInPercents = params.winningFeeInPercents;\\n    _roomCreationPriceInUSDC = params.roomCreationPriceInUSDC;\\n    _stakingWindowInSeconds = params.stakingWindowInSeconds;\\n    _activeRoomDeletionDelayInSeconds = params.activeRoomDeletionDelayInSeconds;\\n    _minimalStakeInUSDC = params.minimalStakeInUSDC;\\n    _native2usdcNumerator = params.native2usdcNumerator;\\n    _native2usdcDenominator = params.native2usdcDenominator;\\n    \\n  }\\n\\n  function getMaxParticipantsPerRoom() external override pure returns(uint) {\\n    return MAX_PARTICIPANTS_PER_ROOM;\\n  }\\n\\n  function getMinParticipantsPerRoom() external override pure returns(uint) {\\n    return MIN_PARTICIPANTS_PER_ROOM;\\n  }\\n\\n  function getActiveRoomDeletionDelayInSeconds() external override view returns(uint) {\\n    return _activeRoomDeletionDelayInSeconds;\\n  }\\n\\n  function setActiveRoomDeletionDelayInSeconds(uint activeRoomDeletionDelayInSeconds) \\n    external override onlyRole(PAUSER_ROLE) \\n  {\\n    _activeRoomDeletionDelayInSeconds = activeRoomDeletionDelayInSeconds;\\n  }\\n\\n  function getWinningFeeInPercents() external override view returns(uint) {\\n    return _winningFeeInPercents;\\n  }\\n\\n  function setWinningFeeInPercents(uint winningFeeInPercents) \\n    external override onlyRole(PAUSER_ROLE) \\n  {\\n    _winningFeeInPercents = winningFeeInPercents;\\n  }  \\n\\n  function getStakingWindowInSeconds() external override view returns(uint) {\\n    return _stakingWindowInSeconds;\\n  }\\n\\n  function setStakingWindowInSeconds(uint stakingWindowInSeconds) \\n    external override onlyRole(PAUSER_ROLE) \\n  {\\n    _stakingWindowInSeconds = stakingWindowInSeconds;\\n  } \\n\\n  function getRoomCreationPriceInUSDC() external override view returns(uint) {\\n    return _roomCreationPriceInUSDC;\\n  }\\n\\n  function setRoomCreationPriceInUSDC(uint roomCreationPriceInUSDC) \\n    external override onlyRole(PAUSER_ROLE) \\n  {\\n    _roomCreationPriceInUSDC = roomCreationPriceInUSDC;\\n  }\\n\\n  function getMinimalStakeInUSDC() external override view returns(uint) {\\n    return _minimalStakeInUSDC;\\n  }\\n\\n  function setMinimalStakeInUSDC(uint minimalStakeInUSDC) \\n    external override onlyRole(PAUSER_ROLE)\\n  {\\n    _minimalStakeInUSDC = minimalStakeInUSDC; \\n  }\\n\\n  function _getMinimalStakeInSNK() internal view returns(uint) {\\n    return _convertUSDC2Skill(_minimalStakeInUSDC);\\n  }\\n\\n  function getMinimalStakeInSNK() external override view returns(uint) {\\n    return _getMinimalStakeInSNK();\\n  }\\n\\n  function _getMinimalStakeInNative() internal view returns(uint) {\\n    return _convertUSDC2Native(_minimalStakeInUSDC);\\n  }\\n\\n  function getMinimalStakeInNative() external override view returns(uint) {\\n    return _getMinimalStakeInNative();\\n  }\\n\\n  function _convertUSDC2Skill(uint usdc) internal view returns(uint skill) {\\n    // NOTE: priceInSNK = priceInUSDC * k / 0.25\\n    uint k = _uniswap.getSnookPriceInSkills();\\n    skill = usdc * k * (100 / 25) / (10**_usdcDecimals);\\n  }\\n\\n  function _convertUSDC2Native(uint usdc) internal view returns(uint native) {\\n    // numerator and denominator are for ETHER units of each token\\n    native = usdc * _native2usdcNumerator / _native2usdcDenominator * 10**_nativeCurrencyDecimals / 10**_usdcDecimals;\\n  }\\n\\n  function getNative2USDCRatioInEtherUnits() external override view returns(uint, uint) {\\n    return (_native2usdcNumerator, _native2usdcDenominator);\\n  }\\n\\n  function setNative2USDCRatioInEtherUnits(uint numerator, uint denominator) \\n    external override onlyRole(PAUSER_ROLE)\\n  {\\n    _native2usdcNumerator = numerator;\\n    _native2usdcDenominator = denominator;\\n  }\\n\\n  function _getRoomCreationPriceInSkill() internal view returns(uint) {\\n    return _convertUSDC2Skill(_roomCreationPriceInUSDC);\\n  }\\n\\n  function getRoomCreationPriceInSNK() external override view returns (uint) {\\n    return _getRoomCreationPriceInSkill();\\n  }\\n\\n  function _createRoom(\\n    uint maxParticipantCount,\\n    uint requiredStakeAmount,\\n    bool isStakeInNativeCurrency,\\n    ROOM_MODE roomMode,\\n    string calldata pwdRef,\\n    uint collectionId\\n  ) withValidCollection(collectionId) internal returns(uint) {\\n    require(roomMode == ROOM_MODE.SINGLE, \\\"BBT: unsupported mode\\\");\\n    require(\\n      maxParticipantCount >= 2 && \\n      maxParticipantCount <= MAX_PARTICIPANTS_PER_ROOM, \\n      \\\"BBT: invalid max number of participants\\\"\\n    );\\n\\n    require(\\n      isStakeInNativeCurrency == false && requiredStakeAmount >= _getMinimalStakeInSNK() ||\\n      isStakeInNativeCurrency == true && requiredStakeAmount >= _getMinimalStakeInNative(),\\n      \\\"BBT: requiredStake is less than minimal\\\"\\n    );\\n    ///@dev Creation fee is taken ONLY in SNK\\n    require(\\n      _skill.transferFrom(msg.sender, _ecosystem, _getRoomCreationPriceInSkill()),\\n      'BBT: Not enough SNK for room creation'\\n    );\\n    \\n    _roomIds.increment();\\n    uint roomId = _roomIds.current();\\n   _rooms[roomId] = Room({\\n      id: roomId,\\n      participantCount: 0,\\n      participants: new address payable[](maxParticipantCount),\\n      requiredStakeAmount: requiredStakeAmount,\\n      isStakeInNativeCurrency: isStakeInNativeCurrency,\\n      owner: payable(msg.sender),\\n      roomMode: roomMode,\\n      rounds: DEFAULT_ROUNDS,\\n      canJoinForFree: false,\\n      createdAt: block.timestamp,\\n      lockedAt: 0,\\n      totalStake: 0,\\n      pwdRef: pwdRef,\\n      collectionId: collectionId\\n    });\\n    _activeRoomIds.add(roomId);\\n    return roomId;\\n  }\\n  \\n  function createFreeRoom(\\n    uint maxParticipantCount,\\n    uint totalStake,\\n    bool isStakeInNativeCurrency,\\n    ROOM_MODE roomMode,\\n    string calldata pwdRef,\\n    uint collectionId\\n  ) payable external override {\\n    require(\\n      isStakeInNativeCurrency == false && _skill.transferFrom(msg.sender, address(this), totalStake) ||\\n      isStakeInNativeCurrency == true && msg.value == totalStake,\\n      'BBT: not enough funds for stake'\\n    );\\n    uint roomId = _createRoom(\\n      maxParticipantCount,\\n      totalStake,\\n      isStakeInNativeCurrency,\\n      roomMode,\\n      pwdRef,\\n      collectionId\\n    );\\n    Room storage room = _rooms[roomId]; \\n    room.totalStake = totalStake; \\n    room.canJoinForFree = true;\\n    emit FreeRoomCreated(roomId, msg.sender);\\n  }\\n\\n  function createRoom(\\n    uint maxParticipantCount,\\n    uint requiredStakeAmount,\\n    bool isStakeInNativeCurrency,\\n    ROOM_MODE roomMode,\\n    string calldata pwdRef,\\n    uint collectionId\\n  ) external override\\n  {\\n    uint roomId = _createRoom(\\n      maxParticipantCount, \\n      requiredStakeAmount, \\n      isStakeInNativeCurrency, \\n      roomMode,\\n      pwdRef,\\n      collectionId\\n    );\\n    emit RoomCreated(roomId, msg.sender); \\n  }\\n\\n  function lockRoom(uint roomId) external override onlyActiveRoom(roomId) {\\n    Room storage room = _rooms[roomId];\\n    require(msg.sender == room.owner, 'BBT: not a room owner');\\n    require(room.lockedAt == 0, 'BBT: room already locked');\\n    room.lockedAt = block.timestamp;\\n    emit RoomLocked(roomId);\\n  } \\n\\n  function joinFreeRoom(uint roomId) whenStakePossible(roomId)\\n    external override \\n  {\\n    Room storage room = _rooms[roomId];\\n    require(room.canJoinForFree == true, 'BBT: room is not free');\\n    room.participants[room.participantCount] = payable(msg.sender);\\n    room.participantCount += 1;\\n    emit JoinedFreeRoom(roomId, msg.sender); \\n  }\\n\\n  function stakeSNK(uint roomId) \\n    external override whenStakePossible(roomId) \\n  {\\n    Room storage room = _rooms[roomId];\\n    require(\\n      room.isStakeInNativeCurrency == false,\\n      'BBT: stakes should be in native currency'\\n    );\\n    require(\\n      _skill.transferFrom(msg.sender, address(this), room.requiredStakeAmount),\\n      'BBT: not enough SNK for stake'\\n    );\\n    \\n    room.participants[room.participantCount] = payable(msg.sender);\\n    room.participantCount += 1;\\n    room.totalStake += room.requiredStakeAmount;\\n    emit StakeAdded(roomId, msg.sender);\\n  }\\n\\n  function stakeNative(uint roomId) \\n    payable external override whenStakePossible(roomId)\\n  {\\n    Room storage room = _rooms[roomId];\\n    require(\\n      room.isStakeInNativeCurrency == true,\\n      'BBT: stakes should be in SNK'\\n    );\\n    require(\\n      msg.value == room.requiredStakeAmount,\\n      'BBT: not enough native currency for stake'\\n    );\\n    room.participants[room.participantCount] = payable(msg.sender);\\n    room.participantCount += 1;\\n    room.totalStake += room.requiredStakeAmount;\\n    emit StakeAdded(roomId, msg.sender);\\n  } \\n\\n\\n  function _areParticipants(Room memory room, address payable[] memory winners) \\n    internal pure returns(bool) \\n  {\\n    for (uint i=0; i<winners.length; i++) {\\n      bool found = false;\\n      for (uint j=0; j<room.participantCount; j++) {\\n        if (winners[i] == room.participants[j]) {\\n          found = true;\\n          break;\\n        }\\n      }\\n      if (found == false) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n  \\n\\n  function reportWinners(\\n    uint roomId, \\n    address payable[] memory winners\\n  ) onlyActiveRoom(roomId) onlyRole(EXTRACTOR_ROLE) external override  \\n  {\\n    Room memory room = _rooms[roomId];\\n    require(\\n      block.timestamp > room.createdAt + _stakingWindowInSeconds,\\n      \\\"BBT: cannot report winner before staking window is closed\\\"\\n    );\\n    require(\\n      winners.length >= 1 && \\n      winners.length <= room.participantCount, \\n      \\\"BBT: invalid number of winners\\\"\\n    );\\n    /// @dev This requirement ensures a stake was done.\\n    require(\\n      _areParticipants(room, winners) == true, \\n      'BBT: one or more of reported winners are not participant'\\n    );\\n    uint winningFeeAmount = room.totalStake * _winningFeeInPercents / 100;\\n    uint revshareAmount = 0;\\n    uint revshareInPercents = 0;\\n    address payable revshareRecipient;\\n    if (room.collectionId != 0) {\\n      revshareInPercents = _collectionList.getRevshareInPercents(room.collectionId);\\n      revshareRecipient = _collectionList.getRevshareRecipient(room.collectionId);\\n      revshareAmount = room.totalStake * revshareInPercents / 100;\\n    }\\n    uint prizeAmount = (room.totalStake - winningFeeAmount - revshareAmount)/winners.length;\\n\\n    /// @dev Send winning fee to Foundation.\\n    if (room.isStakeInNativeCurrency == false) {\\n      _skill.transfer(_foundersAddress, winningFeeAmount);\\n    } else {\\n      _foundersAddress.transfer(winningFeeAmount);\\n    }\\n\\n    /// @dev Send revshare if collection exists and active. \\n    if (room.collectionId != 0 && _collectionList.isActive(room.collectionId)) {\\n      if (room.isStakeInNativeCurrency == false) {\\n        _skill.transfer(revshareRecipient, revshareAmount);\\n      } else {\\n        revshareRecipient.transfer(revshareAmount);\\n      }\\n    }\\n\\n    /// @dev Send prize to the winners.\\n    for (uint i=0; i<winners.length; i++) {\\n      if (room.isStakeInNativeCurrency == false) {\\n        _skill.transfer(winners[i], prizeAmount);\\n      } else {\\n        winners[i].transfer(prizeAmount);\\n      }\\n    }\\n\\n    _activeRoomIds.remove(roomId);\\n    _finishedRoomIds.add(roomId);\\n    emit RoomFinished(roomId, winners);\\n  }\\n\\n\\n  function getActiveRoomCount() external override view returns(uint) {\\n    return _activeRoomIds.length();\\n  }\\n\\n  function getFinishedRoomCount() external override view returns(uint) {\\n    return _finishedRoomIds.length();\\n  }\\n\\n  function getActiveRooms(uint startIdx, uint endIdx) external override view \\n    returns(Room[] memory)\\n  {\\n    require(\\n      startIdx < endIdx && endIdx <= _activeRoomIds.length(), \\n      \\\"BBT: invalid indexes\\\"\\n    );\\n    Room[] memory slice = new Room[](endIdx-startIdx);\\n    for (uint i=startIdx; i<endIdx; i++) {\\n      slice[i-startIdx] = _rooms[_activeRoomIds.at(i)];\\n    } \\n    return slice;\\n  }\\n\\n  function getFinishedRooms(uint startIdx, uint endIdx) external override view \\n    returns(Room[] memory)\\n  {\\n    require(\\n      startIdx < endIdx && endIdx <= _activeRoomIds.length(), \\n      \\\"BBT: invalid indexes\\\"\\n    );\\n    Room[] memory slice = new Room[](endIdx-startIdx);\\n    for (uint i=startIdx; i<endIdx; i++) {\\n      slice[i-startIdx] = _rooms[_finishedRoomIds.at(i)];\\n    } \\n    return slice;\\n  }\\n\\n  function deleteAgedActiveRoom(uint roomId) external override onlyActiveRoom(roomId) {\\n    require(\\n      block.timestamp > _rooms[roomId].createdAt + _activeRoomDeletionDelayInSeconds,\\n      \\\"BBT: room is not aged enough\\\"\\n    );\\n    _activeRoomIds.remove(roomId);\\n    emit AgedActiveRoomDeleted(roomId);\\n  }\\n\\n  function emergencyUnstake(uint roomId) \\n    onlyActiveRoom(roomId) onlyRole(EMERGENCY_EXTRACTOR_ROLE) external override\\n  {\\n    Room storage room = _rooms[roomId];\\n    if (room.isStakeInNativeCurrency == false) {\\n      if (room.canJoinForFree == false) { // non free room, participants made stakes\\n        /// @dev Loop gas limit is prevents as during creation participantCount is limited.\\n        for (uint i=0; i<room.participantCount; i++) {\\n          _skill.transfer(room.participants[i], room.requiredStakeAmount);\\n        }\\n      } else { // free room, owner made stake\\n        _skill.transfer(room.owner, room.totalStake);\\n      }\\n    } else {\\n      if (room.canJoinForFree == false) {\\n        for (uint i=0; i<room.participantCount; i++) {\\n          room.participants[i].transfer(room.requiredStakeAmount);\\n        }\\n      } else {\\n        room.owner.transfer(room.totalStake);\\n      }\\n    }\\n\\n    room.createdAt = block.timestamp;\\n    room.lockedAt = 0;\\n    room.participantCount = 0;\\n    room.totalStake = 0;\\n    emit EmergencyUnstake(roomId);\\n  }\\n}\",\"keccak256\":\"0xef73d37e758952c0c8c44e4a243eafdbbde981c5cc00edd9078eeb25d6606c29\",\"license\":\"MIT\"},\"contracts/IBigBoyTable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBigBoyTable {\\n  event FreeRoomCreated(uint roomId, address roomOwner);\\n  event JoinedFreeRoom(uint roomId, address participant);\\n  event RoomCreated(uint roomId, address roomOwner);\\n  event RoomFinished(uint roomId, address payable[] winners);\\n  event AgedActiveRoomDeleted(uint roomId);\\n  event RoomLocked(uint roomId);\\n  event StakeAdded(uint roomId, address participant);\\n  event EmergencyUnstake(uint roomId);\\n  enum ROOM_MODE { SINGLE, TEAM }\\n\\n  struct Room {\\n    uint id;\\n    uint participantCount;\\n    address payable[] participants;\\n    uint requiredStakeAmount;\\n    bool isStakeInNativeCurrency;\\n    address payable owner;\\n    ROOM_MODE roomMode;\\n    uint rounds; // currently unused\\n    bool canJoinForFree;\\n    uint createdAt;\\n    uint lockedAt;\\n    uint totalStake;\\n    string pwdRef;\\n    uint collectionId;\\n  }\\n  \\n  function getMinParticipantsPerRoom() external pure returns(uint);\\n  function getMaxParticipantsPerRoom() external pure returns(uint);\\n  \\n  function createFreeRoom(\\n    uint maxParticipantCount,\\n    uint totalStake,\\n    bool isStakeInNativeCurrency,\\n    ROOM_MODE roomMode,\\n    string calldata pwdRef,\\n    uint collectionId\\n  ) payable external;\\n\\n  function createRoom(\\n    uint maxParticipantCount,\\n    uint requiredStakeAmount,\\n    bool isStakeInNativeCurrency,\\n    ROOM_MODE roomMode,\\n    string calldata pwdRef,\\n    uint collectionId\\n  ) external;\\n  \\n  function joinFreeRoom(uint roomId) external;\\n  function stakeSNK(uint roomId) external;\\n  function stakeNative(uint roomId) payable external;\\n  function lockRoom(uint roomId) external;\\n  function reportWinners(uint roomId, address payable[] memory) external;\\n  function deleteAgedActiveRoom(uint roomId) external;\\n  function emergencyUnstake(uint roomId) external;\\n\\n  function getActiveRoomCount() external view returns(uint);\\n  function getFinishedRoomCount() external view returns(uint);\\n  function getActiveRooms(uint, uint) external view returns (Room[] memory);\\n  function getFinishedRooms(uint, uint) external view returns(Room[] memory);\\n  \\n  function getRoomCreationPriceInSNK() external view returns (uint);\\n  function getRoomCreationPriceInUSDC() external view returns (uint);\\n  function setRoomCreationPriceInUSDC(uint) external;\\n\\n  // we have no oracle for native gas cost in usdc so we set manually\\n  function getNative2USDCRatioInEtherUnits() external view returns(uint, uint);\\n  function setNative2USDCRatioInEtherUnits(uint, uint) external;\\n\\n  function getMinimalStakeInNative() external view returns(uint);\\n  function getMinimalStakeInSNK() external view returns(uint);\\n  function getMinimalStakeInUSDC() external view returns(uint);\\n  function setMinimalStakeInUSDC(uint) external;\\n\\n  function getStakingWindowInSeconds() external view returns(uint);\\n  function setStakingWindowInSeconds(uint) external;\\n\\n  function getWinningFeeInPercents() external view returns(uint);\\n  function setWinningFeeInPercents(uint) external;\\n\\n  function getActiveRoomDeletionDelayInSeconds() external view returns(uint);\\n  function setActiveRoomDeletionDelayInSeconds(uint) external;\\n\\n  function getExtractorRole() external view returns(bytes32);\\n  function getPauserRole() external pure returns(bytes32);\\n  function getEmergencyExtractorRole() external view returns(bytes32);\\n\\n}\",\"keccak256\":\"0xf8c76d7292fa1967cd4e6d046c4e5da800a6a8c31567e8135cefd9c4e1c18ce7\",\"license\":\"MIT\"},\"contracts/ICollectionList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollectionList {\\n  struct Collection {\\n    uint id;\\n    string name;\\n    uint chainId;\\n    address token;\\n    uint accessThresholdInCollectionTokens;\\n    uint activityThresholdInSNK;\\n    uint lockPeriodInSeconds;\\n    uint revshareInPercents;\\n    address payable revshareRecipient;    \\n    uint depositedSNK;\\n    bool active;\\n    uint lockedAt;\\n    bool depositsEnabled;\\n  }\\n\\n  event CollectionAdded(uint collectionId);\\n  event SNKDeposited(uint collectionId, address depositor, uint amount, bool newStatus);\\n  event SNKWithdrawn(uint collectionId, address depositor, uint amount, bool newStatus);\\n  event DepositsReleased(uint collectionId, uint releasedCount, uint remainingCount);\\n  event CollectionRemoved(uint collectionId);\\n\\n  function addCollection(\\n    string calldata name,\\n    uint chainId,\\n    address token,\\n    uint accessThresholdInCollectionTokens,\\n    uint activityThresholdInSNK,\\n    uint lockPeriodInSeconds,\\n    uint revshareInPercents,\\n    address payable revshareRecipient\\n  ) external;\\n\\n  function removeCollection(uint collectionId) external;\\n  function setLock(uint collectionId) external;\\n  function setName(uint collectionId, string memory name) external;\\n  function setChainId(uint collectionId, uint chainId) external;\\n  function setToken(uint collectionId, address token) external;\\n  function setAccessThresholdInCollectionTokens(uint collectionId, uint accessThresholdInColectionTokens) external;\\n  function setActivityThresholdInSNK(uint collectionId, uint activityThresholdInSNK) external;\\n  function setRevshareRecipient(uint collectionId, address payable revshareRecipient) external;\\n  function setRevshareInPercents(uint collectionId, uint revshareInPercents) external;\\n  function setLockPeriodInSeconds(uint collectionId, uint lockPeriodInSeconds) external;\\n  function depositSNK(uint collectionId, uint amount) external;\\n  function withdrawSNK(uint collectionId) external;\\n  function getCollectionCount() external view returns (uint);\\n  function getCollections(uint startIdx, uint endIdx) \\n    external view returns(Collection[] memory);\\n  function getPauserRole() external pure returns(bytes32);\\n  function isActive(uint collectionId) external view returns(bool);\\n  function getRevshareRecipient(uint collectionId) external view returns(address payable);\\n  function getRevshareInPercents(uint collectionId) external view returns(uint);\\n  function releaseDeposits(uint collectionId, uint count) external;\\n  function getDepositRecordCount(uint collectionId) view external returns(uint);\\n  function toggleDepositAccepting(uint collectionId) external; \\n  \\n}\\n\",\"keccak256\":\"0x4e6b1b3271e45cd56733d3491128453fd983b820b0391b56581c135f1b85617e\",\"license\":\"MIT\"},\"contracts/ISkillToken.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.5.0;\\n\\ninterface ISkillToken {\\n    // IERC20Metadata\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    // IERC20\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);    \\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    // SnookGame extension\\n    function burn(address, uint256) external;\\n}\",\"keccak256\":\"0x2a28799b5cf2bdc40bee27444bcb8566fe226ae57b4f47fb02f3f990a051218a\",\"license\":\"Unlicense\"},\"contracts/IUniswapUSDCSkill.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.6;\\n\\ninterface IUniswapUSDCSkill {\\n  function getSnookPriceInSkills() external view returns (uint);\\n}\",\"keccak256\":\"0xfda1e98c3860b17d44675695bcb690e286d2f160f8276c450c17ffbd34ad4e29\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061449c806100206000396000f3fe6080604052600436106102675760003560e01c80639010d07c11610144578063cb741d14116100b6578063e06ff9c61161007a578063e06ff9c6146106bc578063e358df8f146106dc578063e63c6bf0146106fc578063ef2f1eeb1461070f578063f4f232631461072f578063f6c9b7441461074457610267565b8063cb741d1414610619578063ceb3ea6214610639578063d547741f14610659578063d8df056014610679578063d9ca1adc1461069c57610267565b8063a217fddf11610108578063a217fddf1461057a578063b70862411461058f578063bc12b716146105a4578063c1b931be146105c4578063c68ae885146105d9578063ca15c873146105f957610267565b80639010d07c146104e357806391d14854146105105780639447b1a4146105305780639847931f146105455780639d06c3091461055a57610267565b806336568abe116101dd57806367dbbca7116101a157806367dbbca714610439578063773ee7d01461044c5780637d6498521461046c578063834e5eaa146104995780638b2d2237146104ae5780638d320ca2146104c357610267565b806336568abe146103ba5780633b458f6e146103da5780634309ae12146103fa5780634f8f2b011461040f5780635c975abb1461042457610267565b806317c8884d1161022f57806317c8884d1461031b57806319eab0831461033b5780631e6e4e0414610350578063248a9ca3146103655780632acf73e8146103855780632f2ff15d1461039a57610267565b8063012ce5011461026c57806301ffc9a71461028e5780630d090fbb146102c45780630ef0a52f146102e6578063166ad63414610306575b600080fd5b34801561027857600080fd5b5061028c610287366004613644565b610759565b005b34801561029a57600080fd5b506102ae6102a93660046136ac565b610aa2565b6040516102bb9190613b1c565b60405180910390f35b3480156102d057600080fd5b506102d9610acf565b6040516102bb9190613b27565b3480156102f257600080fd5b5061028c61030136600461368b565b610ad6565b34801561031257600080fd5b506102d9610aff565b34801561032757600080fd5b5061028c610336366004613644565b610b06565b34801561034757600080fd5b506102d9610b28565b34801561035c57600080fd5b506102d9610b37565b34801561037157600080fd5b506102d9610380366004613644565b610b5b565b34801561039157600080fd5b506102d9610b70565b3480156103a657600080fd5b5061028c6103b536600461365c565b610b75565b3480156103c657600080fd5b5061028c6103d536600461365c565b610b9c565b3480156103e657600080fd5b5061028c6103f53660046137d1565b610bbe565b34801561040657600080fd5b506102d9610c14565b34801561041b57600080fd5b506102d9610c38565b34801561043057600080fd5b506102ae610c42565b61028c6104473660046137d1565b610c4b565b34801561045857600080fd5b5061028c610467366004613704565b610d8d565b34801561047857600080fd5b5061048c61048736600461368b565b6115b2565b6040516102bb91906139ee565b3480156104a557600080fd5b506102d96118a9565b3480156104ba57600080fd5b506102d96118b0565b3480156104cf57600080fd5b5061028c6104de366004613644565b6118b5565b3480156104ef57600080fd5b506105036104fe36600461368b565b6118d7565b6040516102bb919061399d565b34801561051c57600080fd5b506102ae61052b36600461365c565b6118f6565b34801561053c57600080fd5b506102d9611921565b34801561055157600080fd5b506102d9611928565b34801561056657600080fd5b5061028c610575366004613644565b611932565b34801561058657600080fd5b506102d9611a00565b34801561059b57600080fd5b506102d9611a05565b3480156105b057600080fd5b5061028c6105bf366004613644565b611a0c565b3480156105d057600080fd5b506102d9611a2e565b3480156105e557600080fd5b5061028c6105f4366004613644565b611a40565b34801561060557600080fd5b506102d9610614366004613644565b611ca8565b34801561062557600080fd5b5061028c610634366004613644565b611cbf565b34801561064557600080fd5b5061028c610654366004613644565b611d6f565b34801561066557600080fd5b5061028c61067436600461365c565b611d91565b34801561068557600080fd5b5061068e611d9b565b6040516102bb9291906141d0565b3480156106a857600080fd5b5061028c6106b73660046136d4565b611da7565b3480156106c857600080fd5b5061048c6106d736600461368b565b611faf565b3480156106e857600080fd5b5061028c6106f7366004613644565b61229c565b61028c61070a366004613644565b6122be565b34801561071b57600080fd5b5061028c61072a366004613644565b6123e8565b34801561073b57600080fd5b506102d9612591565b34801561075057600080fd5b506102d961259e565b80610766610109826125ab565b61078b5760405162461bcd60e51b81526004016107829061409a565b60405180910390fd5b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e6107bd816107b86125b7565b6125bb565b600083815261010860205260409020600481015460ff1661096e57600681015460ff166108d45760005b81600101548110156108ce5760fd546002830180546001600160a01b039092169163a9059cbb91908490811061082d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460038501546040516001600160e01b031960e085901b168152610869926001600160a01b031691906004016139b1565b602060405180830381600087803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190613628565b50806108c6816143dc565b9150506107e7565b50610969565b60fd54600480830154600984015460405163a9059cbb60e01b81526001600160a01b039485169463a9059cbb946109159461010090049091169291016139b1565b602060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190613628565b505b610a49565b600681015460ff16610a035760005b8160010154811015610967578160020181815481106109ac57634e487b7160e01b600052603260045260246000fd5b600091825260208220015460038401546040516001600160a01b039092169281156108fc029290818181858888f193505050501580156109f0573d6000803e3d6000fd5b50806109fb816143dc565b91505061097d565b600481015460098201546040516101009092046001600160a01b0316916108fc82150291906000818181858888f19350505050158015610a47573d6000803e3d6000fd5b505b4260078201556000600882018190556001820181905560098201556040517f0efda3452a76bf3b550355556930eba4bd2b56b2bc81b6c0eb56c4679a6a064c90610a94908690613b27565b60405180910390a150505050565b60006001600160e01b03198216635a05180f60e01b1480610ac75750610ac78261261f565b90505b919050565b6101025490565b600080516020614447833981519152610af1816107b86125b7565b506101069190915561010755565b6101055490565b600080516020614447833981519152610b21816107b86125b7565b5061010255565b6000610b32612644565b905090565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc79290565b60009081526065602052604090206001015490565b606490565b610b7f8282612652565b6000828152609760205260409020610b979082612671565b505050565b610ba68282612686565b6000828152609760205260409020610b9790826126c8565b6000610bcf888888888888886126dd565b90507fdeb4915464f2fab35f9ed95b8c2dc62a1af9edc45ebc42643517a7893e49bca88133604051610c02929190614198565b60405180910390a15050505050505050565b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e90565b6000610b32612b5f565b60c95460ff1690565b84158015610cda575060fd546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610c8890339030908b906004016139ca565b602060405180830381600087803b158015610ca257600080fd5b505af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190613628565b80610cf157506001851515148015610cf157508534145b610d0d5760405162461bcd60e51b815260040161078290613f48565b6000610d1e888888888888886126dd565b6000818152610108602052604090819020600981018a905560068101805460ff191660011790559051919250907f1a90e66d0456e3af5e76c3cfe0c1da5f6676ea4d3e51556d86fd0d1a6ad2dd0990610d7a9084903390614198565b60405180910390a1505050505050505050565b81610d9a610109826125ab565b610db65760405162461bcd60e51b81526004016107829061409a565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc792610de3816107b86125b7565b60008481526101086020908152604080832081516101c08101835281548152600182015481850152600282018054845181870281018701865281815292959394860193830182828015610e5f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e41575b505050918352505060038201546020820152600482015460ff808216151560408401526001600160a01b036101008304166060840152608090920191600160a81b909104166001811115610ec357634e487b7160e01b600052602160045260246000fd5b6001811115610ee257634e487b7160e01b600052602160045260246000fd5b815260058201546020820152600682015460ff16151560408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c090920191610f30906143a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5c906143a7565b8015610fa95780601f10610f7e57610100808354040283529160200191610fa9565b820191906000526020600020905b815481529060010190602001808311610f8c57829003601f168201915b50505050508152602001600b82015481525050905061010354816101200151610fd291906141de565b4211610ff05760405162461bcd60e51b815260040161078290613c49565b600184511015801561100757508060200151845111155b6110235760405162461bcd60e51b815260040161078290613fae565b61102d8185612b6d565b151560011461104e5760405162461bcd60e51b815260040161078290613d42565b6000606461010154836101600151611066919061432a565b61107091906141f6565b90506000806000846101a001516000146111b15760fe546101a0860151604051631cce59cb60e01b81526001600160a01b0390921691631cce59cb916110b891600401613b27565b60206040518083038186803b1580156110d057600080fd5b505afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110891906136ec565b60fe546101a08701516040516351b529e360e11b81529294506001600160a01b039091169163a36a53c69161113f91600401613b27565b60206040518083038186803b15801561115757600080fd5b505afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f919061360c565b90506064828661016001516111a4919061432a565b6111ae91906141f6565b92505b6000885184868861016001516111c79190614349565b6111d19190614349565b6111db91906141f6565b60808701519091506112755760fd5460fc5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261121d9291169089906004016139b1565b602060405180830381600087803b15801561123757600080fd5b505af115801561124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126f9190613628565b506112b1565b60fc546040516001600160a01b039091169086156108fc029087906000818181858888f193505050501580156112af573d6000803e3d6000fd5b505b6101a086015115801590611344575060fe546101a08701516040516382afd23b60e01b81526001600160a01b03909216916382afd23b916112f491600401613b27565b60206040518083038186803b15801561130c57600080fd5b505afa158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113449190613628565b156114145760808601516113dc5760fd5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061138490859088906004016139b1565b602060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d69190613628565b50611414565b6040516001600160a01b0383169085156108fc029086906000818181858888f19350505050158015611412573d6000803e3d6000fd5b505b60005b89518110156115525760808701516114de5760fd548a516001600160a01b039091169063a9059cbb908c908490811061146057634e487b7160e01b600052603260045260246000fd5b6020026020010151846040518363ffffffff1660e01b81526004016114869291906139b1565b602060405180830381600087803b1580156114a057600080fd5b505af11580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190613628565b50611540565b8981815181106114fe57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166108fc839081150290604051600060405180830381858888f1935050505015801561153e573d6000803e3d6000fd5b505b8061154a816143dc565b915050611417565b5061155f6101098b612c3f565b5061156c61010b8b612c4b565b507f9514dcc966c415c220874c23fac50f236d9bab82d9d1c6a2e00790c215145d3a8a8a60405161159e9291906141af565b60405180910390a150505050505050505050565b606081831080156115cd57506115c9610109612c57565b8211155b6115e95760405162461bcd60e51b815260040161078290613ca6565b60006115f58484614349565b67ffffffffffffffff81111561161b57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561165457816020015b61164161345c565b8152602001906001900390816116395790505b509050835b8381101561189f57610108600061167261010984612c62565b8152602001908152602001600020604051806101c00160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156116f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116db575b505050918352505060038201546020820152600482015460ff808216151560408401526001600160a01b036101008304166060840152608090920191600160a81b90910416600181111561175d57634e487b7160e01b600052602160045260246000fd5b600181111561177c57634e487b7160e01b600052602160045260246000fd5b815260058201546020820152600682015460ff16151560408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916117ca906143a7565b80601f01602080910402602001604051908101604052809291908181526020018280546117f6906143a7565b80156118435780601f1061181857610100808354040283529160200191611843565b820191906000526020600020905b81548152906001019060200180831161182657829003601f168201915b50505050508152602001600b820154815250508286836118639190614349565b8151811061188157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611897906143dc565b915050611659565b5090505b92915050565b6101045490565b600290565b6000805160206144478339815191526118d0816107b86125b7565b5061010355565b60008281526097602052604081206118ef9083612c62565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101015490565b6000610b32612c6e565b8061193f610109826125ab565b61195b5760405162461bcd60e51b81526004016107829061409a565b600082815261010860205260409020600481015461010090046001600160a01b0316331461199b5760405162461bcd60e51b815260040161078290613f7f565b6008810154156119bd5760405162461bcd60e51b815260040161078290613d0b565b4260088201556040517f76e8d3f2e1eda7b2aff7a471cc350013f132caca7b60b6c43bc09f525414b60f906119f3908590613b27565b60405180910390a1505050565b600081565b6101035490565b600080516020614447833981519152611a27816107b86125b7565b5061010555565b60008051602061444783398151915290565b80611a4d610109826125ab565b611a695760405162461bcd60e51b81526004016107829061409a565b60008181526101086020526040902060080154611a985760405162461bcd60e51b815260040161078290613eda565b6101035460008281526101086020526040902060080154611ab991906141de565b421115611ad85760405162461bcd60e51b81526004016107829061401c565b600081815261010860205260409020600281015460019091015410611b0f5760405162461bcd60e51b815260040161078290613e69565b600082815261010860205260409020600481015460ff1615611b435760405162461bcd60e51b815260040161078290613bba565b60fd5460038201546040516323b872dd60e01b81526001600160a01b03909216916323b872dd91611b7a91339130916004016139ca565b602060405180830381600087803b158015611b9457600080fd5b505af1158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190613628565b611be85760405162461bcd60e51b815260040161078290613f11565b3381600201826001015481548110611c1057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001816001016000828254611c5391906141de565b90915550506003810154600982018054600090611c719084906141de565b90915550506040517ff12a66daa955e8255b989ee232c8ad1f6d294f4448b87f72b497295e54758a4f906119f39085903390614198565b6000818152609760205260408120610ac790612c57565b80611ccc610109826125ab565b611ce85760405162461bcd60e51b81526004016107829061409a565b6101045460008381526101086020526040902060070154611d0991906141de565b4211611d275760405162461bcd60e51b815260040161078290613cd4565b611d3361010983612c3f565b507f90a6e7b3e793c835ae7bd0cdb2cafd5f03b11e536eef9eb6ad1791cb82bf0d3882604051611d639190613b27565b60405180910390a15050565b600080516020614447833981519152611d8a816107b86125b7565b5061010155565b610ba68282612c7c565b61010654610107549091565b600054610100900460ff1680611dc0575060005460ff16155b611ddc5760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015611e07576000805460ff1961ff0019909116610100171660011790555b611e0f612c9b565b611e17612d30565b611e2e6000611e2960208501856135f0565b612da0565b611e5f7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc792611e2960208501856135f0565b611e71610120830161010084016135f0565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055611ea3610140830161012084016135f0565b60fd80546001600160a01b0319166001600160a01b0392909216919091179055611ed5610160830161014084016135f0565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055611f07610180830161016084016135f0565b61010080546001600160a01b0319166001600160a01b0392909216919091179055611f3a6101a0830161018084016135f0565b60fe80546001600160a01b0319166001600160a01b039290921691909117905560208201356101015560408201356101025560608201356101035560808201356101045560a08201356101055560c08201356101065560e0820135610107558015611fab576000805461ff00191690555b5050565b60608183108015611fca5750611fc6610109612c57565b8211155b611fe65760405162461bcd60e51b815260040161078290613ca6565b6000611ff28484614349565b67ffffffffffffffff81111561201857634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561205157816020015b61203e61345c565b8152602001906001900390816120365790505b509050835b8381101561189f57610108600061206f61010b84612c62565b8152602001908152602001600020604051806101c00160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156120f657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120d8575b505050918352505060038201546020820152600482015460ff808216151560408401526001600160a01b036101008304166060840152608090920191600160a81b90910416600181111561215a57634e487b7160e01b600052602160045260246000fd5b600181111561217957634e487b7160e01b600052602160045260246000fd5b815260058201546020820152600682015460ff16151560408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916121c7906143a7565b80601f01602080910402602001604051908101604052809291908181526020018280546121f3906143a7565b80156122405780601f1061221557610100808354040283529160200191612240565b820191906000526020600020905b81548152906001019060200180831161222357829003601f168201915b50505050508152602001600b820154815250508286836122609190614349565b8151811061227e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080612294906143dc565b915050612056565b6000805160206144478339815191526122b7816107b86125b7565b5061010455565b806122cb610109826125ab565b6122e75760405162461bcd60e51b81526004016107829061409a565b600081815261010860205260409020600801546123165760405162461bcd60e51b815260040161078290613eda565b610103546000828152610108602052604090206008015461233791906141de565b4211156123565760405162461bcd60e51b81526004016107829061401c565b60008181526101086020526040902060028101546001909101541061238d5760405162461bcd60e51b815260040161078290613e69565b600082815261010860205260409020600481015460ff1615156001146123c55760405162461bcd60e51b815260040161078290613fe5565b80600301543414611be85760405162461bcd60e51b815260040161078290614100565b806123f5610109826125ab565b6124115760405162461bcd60e51b81526004016107829061409a565b600081815261010860205260409020600801546124405760405162461bcd60e51b815260040161078290613eda565b610103546000828152610108602052604090206008015461246191906141de565b4211156124805760405162461bcd60e51b81526004016107829061401c565b6000818152610108602052604090206002810154600190910154106124b75760405162461bcd60e51b815260040161078290613e69565b600082815261010860205260409020600681015460ff1615156001146124ef5760405162461bcd60e51b8152600401610782906140d1565b338160020182600101548154811061251757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600181600101600082825461255a91906141de565b90915550506040517fad05497db7681a74140530daeedc0d0178492f9de1518990947e7cf27c83de59906119f39085903390614198565b6000610b3261010b612c57565b6000610b32610109612c57565b60006118ef8383612daa565b3390565b6125c582826118f6565b611fab576125dd816001600160a01b03166014612dc2565b6125e8836020612dc2565b6040516020016125f9929190613928565b60408051601f198184030181529082905262461bcd60e51b825261078291600401613b30565b60006001600160e01b03198216637965db0b60e01b1480610ac75750610ac782612f74565b6000610b3261010554612f8d565b61265b82610b5b565b612667816107b86125b7565b610b978383613044565b60006118ef836001600160a01b0384166130cb565b61268e6125b7565b6001600160a01b0316816001600160a01b0316146126be5760405162461bcd60e51b815260040161078290614149565b611fab8282613115565b60006118ef836001600160a01b03841661319a565b60008180158061277257508015801590612772575060fe546040516382afd23b60e01b81526001600160a01b03909116906382afd23b90612722908490600401613b27565b60206040518083038186803b15801561273a57600080fd5b505afa15801561274e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127729190613628565b61278e5760405162461bcd60e51b815260040161078290613d9f565b60008660018111156127b057634e487b7160e01b600052602160045260246000fd5b146127cd5760405162461bcd60e51b815260040161078290613eab565b600289101580156127df575060648911155b6127fb5760405162461bcd60e51b815260040161078290613c02565b86158015612810575061280c612644565b8810155b8061282f5750600187151514801561282f575061282b612b5f565b8810155b61284b5760405162461bcd60e51b815260040161078290614053565b60fd5460ff546001600160a01b03918216916323b872dd9133911661286e612c6e565b6040518463ffffffff1660e01b815260040161288c939291906139ca565b602060405180830381600087803b1580156128a657600080fd5b505af11580156128ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128de9190613628565b6128fa5760405162461bcd60e51b815260040161078290613dd6565b61290460fb6132b1565b600061291060fb6132ba565b9050604051806101c00160405280828152602001600081526020018b67ffffffffffffffff81111561295257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561297b578160200160208202803683370190505b508152602081018b905289151560408201523360608201526080018860018111156129b657634e487b7160e01b600052602160045260246000fd5b815260200160018152602001600015158152602001428152602001600081526020016000815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060209182018790528381526101088252604090819020835181558383015160018201559083015180519192612a54926002850192909101906134f7565b5060608201516003820155608082015160048201805460a08501516001600160a01b031661010002610100600160a81b031993151560ff1990921691909117929092169190911780825560c0840151919060ff60a81b1916600160a81b836001811115612ad157634e487b7160e01b600052602160045260246000fd5b021790555060e0820151600582015561010082015160068201805460ff19169115159190911790556101208201516007820155610140820151600882015561016082015160098201556101808201518051612b3691600a84019160209091019061355c565b506101a09190910151600b90910155612b5161010982612c4b565b509998505050505050505050565b6000610b32610105546132be565b6000805b8251811015612c35576000805b8560200151811015612c115785604001518181518110612bae57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316858481518110612bdf57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415612bff5760019150612c11565b80612c09816143dc565b915050612b7e565b5080612c22576000925050506118a3565b5080612c2d816143dc565b915050612b71565b5060019392505050565b60006118ef838361319a565b60006118ef83836130cb565b6000610ac7826132ba565b60006118ef8383613308565b6000610b3261010254612f8d565b612c8582610b5b565b612c91816107b86125b7565b610b978383613115565b600054610100900460ff1680612cb4575060005460ff16155b612cd05760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015612cfb576000805460ff1961ff0019909116610100171660011790555b612d03613361565b612d0b613361565b612d13613361565b612d1b613361565b8015612d2d576000805461ff00191690555b50565b600054610100900460ff1680612d49575060005460ff16155b612d655760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015612d90576000805460ff1961ff0019909116610100171660011790555b612d98613361565b612d1b6133d4565b610b7f8282613452565b60009081526001919091016020526040902054151590565b60606000612dd183600261432a565b612ddc9060026141de565b67ffffffffffffffff811115612e0257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e2c576020820181803683370190505b509050600360fc1b81600081518110612e5557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e9257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612eb684600261432a565b612ec19060016141de565b90505b6001811115612f55576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612f0357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612f2757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612f4e81614390565b9050612ec4565b5083156118ef5760405162461bcd60e51b815260040161078290613b85565b6001600160e01b031981166301ffc9a760e01b14919050565b60008061010060009054906101000a90046001600160a01b03166001600160a01b031663b7d002076040518163ffffffff1660e01b815260040160206040518083038186803b158015612fdf57600080fd5b505afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301791906136ec565b90506130256006600a61425c565b61302f828561432a565b61303a90600461432a565b6118ef91906141f6565b61304e82826118f6565b611fab5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556130876125b7565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006130d78383612daa565b61310d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556118a3565b5060006118a3565b61311f82826118f6565b15611fab5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556131566125b7565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156132a75760006131be600183614349565b85549091506000906131d290600190614349565b905060008660000182815481106131f957634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061322a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526001890190915260409020849055865487908061326b57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506118a3565b60009150506118a3565b80546001019055565b5490565b60006132cc6006600a61425c565b6132d86012600a61425c565b61010754610106546132ea908661432a565b6132f491906141f6565b6132fe919061432a565b610ac791906141f6565b8154600090821061332b5760405162461bcd60e51b815260040161078290613b43565b82600001828154811061334e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600054610100900460ff168061337a575060005460ff16155b6133965760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015612d1b576000805460ff1961ff0019909116610100171660011790558015612d2d576000805461ff001916905550565b600054610100900460ff16806133ed575060005460ff16155b6134095760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015613434576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191690558015612d2d576000805461ff001916905550565b611fab8282613044565b604051806101c001604052806000815260200160008152602001606081526020016000815260200160001515815260200160006001600160a01b03168152602001600060018111156134be57634e487b7160e01b600052602160045260246000fd5b81526020016000815260200160001515815260200160008152602001600081526020016000815260200160608152602001600081525090565b82805482825590600052602060002090810192821561354c579160200282015b8281111561354c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613517565b506135589291506135d0565b5090565b828054613568906143a7565b90600052602060002090601f01602090048101928261358a576000855561354c565b82601f106135a357805160ff191683800117855561354c565b8280016001018555821561354c579182015b8281111561354c5782518255916020019190600101906135b5565b5b8082111561355857600081556001016135d1565b8035610aca81614423565b600060208284031215613601578081fd5b81356118ef81614423565b60006020828403121561361d578081fd5b81516118ef81614423565b600060208284031215613639578081fd5b81516118ef81614438565b600060208284031215613655578081fd5b5035919050565b6000806040838503121561366e578081fd5b82359150602083013561368081614423565b809150509250929050565b6000806040838503121561369d578182fd5b50508035926020909101359150565b6000602082840312156136bd578081fd5b81356001600160e01b0319811681146118ef578182fd5b60006101a082840312156136e6578081fd5b50919050565b6000602082840312156136fd578081fd5b5051919050565b60008060408385031215613716578182fd5b8235915060208084013567ffffffffffffffff80821115613735578384fd5b818601915086601f830112613748578384fd5b81358181111561375a5761375a61440d565b838102604051858282010181811085821117156137795761377961440d565b604052828152858101935084860182860187018b1015613797578788fd5b8795505b838610156137c0576137ac816135e5565b85526001959095019493860193860161379b565b508096505050505050509250929050565b600080600080600080600060c0888a0312156137eb578283fd5b8735965060208801359550604088013561380481614438565b9450606088013560028110613817578384fd5b9350608088013567ffffffffffffffff80821115613833578485fd5b818a0191508a601f830112613846578485fd5b813581811115613854578586fd5b8b6020828501011115613865578586fd5b60208301955080945050505060a0880135905092959891949750929550565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156138c95781516001600160a01b0316875295820195908201906001016138a4565b509495945050505050565b15159052565b600281106138f857634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452613914816020860160208601614360565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613960816017850160208801614360565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613991816028840160208801614360565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613b0e57603f1989840301855281516101c0815185528882015189860152878201518189870152613a4982870182613891565b9150506060808301518187015250608080830151613a69828801826138d4565b505060a080830151613a7d82880182613884565b505060c080830151613a91828801826138da565b505060e0828101519086015261010080830151613ab0828801826138d4565b50506101208281015190860152610140808301519086015261016080830151908601526101808083015186830382880152613aeb83826138fc565b6101a0948501519790940196909652505094870194925090860190600101613a12565b509098975050505050505050565b901515815260200190565b90815260200190565b6000602082526118ef60208301846138fc565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526028908201527f4242543a207374616b65732073686f756c6420626520696e206e61746976652060408201526763757272656e637960c01b606082015260800190565b60208082526027908201527f4242543a20696e76616c6964206d6178206e756d626572206f66207061727469604082015266636970616e747360c81b606082015260800190565b60208082526039908201527f4242543a2063616e6e6f74207265706f72742077696e6e6572206265666f726560408201527f207374616b696e672077696e646f7720697320636c6f73656400000000000000606082015260800190565b6020808252601490820152734242543a20696e76616c696420696e646578657360601b604082015260600190565b6020808252601c908201527f4242543a20726f6f6d206973206e6f74206167656420656e6f75676800000000604082015260600190565b60208082526018908201527f4242543a20726f6f6d20616c7265616479206c6f636b65640000000000000000604082015260600190565b60208082526038908201527f4242543a206f6e65206f72206d6f7265206f66207265706f727465642077696e60408201527f6e65727320617265206e6f74207061727469636970616e740000000000000000606082015260800190565b6020808252601d908201527f4242543a20636f6c6c656374696f6e206973206e6f7420616374697665000000604082015260600190565b60208082526025908201527f4242543a204e6f7420656e6f75676820534e4b20666f7220726f6f6d2063726560408201526430ba34b7b760d91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526022908201527f4242543a206e6f206d6f7265207061727469636970616e747320706f737369626040820152616c6560f01b606082015260800190565b6020808252601590820152744242543a20756e737570706f72746564206d6f646560581b604082015260600190565b60208082526017908201527f4242543a20726f6f6d206973206e6f74206c6f636b6564000000000000000000604082015260600190565b6020808252601d908201527f4242543a206e6f7420656e6f75676820534e4b20666f72207374616b65000000604082015260600190565b6020808252601f908201527f4242543a206e6f7420656e6f7567682066756e647320666f72207374616b6500604082015260600190565b60208082526015908201527421212a1d103737ba1030903937b7b69037bbb732b960591b604082015260600190565b6020808252601e908201527f4242543a20696e76616c6964206e756d626572206f662077696e6e6572730000604082015260600190565b6020808252601c908201527f4242543a207374616b65732073686f756c6420626520696e20534e4b00000000604082015260600190565b6020808252601a908201527f4242543a207374616b696e672077696e646f7720636c6f736564000000000000604082015260600190565b60208082526027908201527f4242543a2072657175697265645374616b65206973206c657373207468616e206040820152661b5a5b9a5b585b60ca1b606082015260800190565b60208082526017908201527f4242543a20726f6f6d206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252601590820152744242543a20726f6f6d206973206e6f74206672656560581b604082015260600190565b60208082526029908201527f4242543a206e6f7420656e6f756768206e61746976652063757272656e637920604082015268666f72207374616b6560b81b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526141c86040830184613891565b949350505050565b918252602082015260400190565b600082198211156141f1576141f16143f7565b500190565b60008261421157634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116142285750614253565b81870482111561423a5761423a6143f7565b8086161561424757918102915b9490941c938002614219565b94509492505050565b60006118ef6000198484600082614275575060016118ef565b81614282575060006118ef565b816001811461429857600281146142a2576142cf565b60019150506118ef565b60ff8411156142b3576142b36143f7565b6001841b9150848211156142c9576142c96143f7565b506118ef565b5060208310610133831016604e8410600b8410161715614302575081810a838111156142fd576142fd6143f7565b6118ef565b61430f8484846001614216565b808604821115614321576143216143f7565b02949350505050565b6000816000190483118215151615614344576143446143f7565b500290565b60008282101561435b5761435b6143f7565b500390565b60005b8381101561437b578181015183820152602001614363565b8381111561438a576000848401525b50505050565b60008161439f5761439f6143f7565b506000190190565b6002810460018216806143bb57607f821691505b602082108114156136e657634e487b7160e01b600052602260045260246000fd5b60006000198214156143f0576143f06143f7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612d2d57600080fd5b8015158114612d2d57600080fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220becbb41520baafa113f1b2e12e82024dd3adaaeef3005d18b25b2c07d686861e64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c80639010d07c11610144578063cb741d14116100b6578063e06ff9c61161007a578063e06ff9c6146106bc578063e358df8f146106dc578063e63c6bf0146106fc578063ef2f1eeb1461070f578063f4f232631461072f578063f6c9b7441461074457610267565b8063cb741d1414610619578063ceb3ea6214610639578063d547741f14610659578063d8df056014610679578063d9ca1adc1461069c57610267565b8063a217fddf11610108578063a217fddf1461057a578063b70862411461058f578063bc12b716146105a4578063c1b931be146105c4578063c68ae885146105d9578063ca15c873146105f957610267565b80639010d07c146104e357806391d14854146105105780639447b1a4146105305780639847931f146105455780639d06c3091461055a57610267565b806336568abe116101dd57806367dbbca7116101a157806367dbbca714610439578063773ee7d01461044c5780637d6498521461046c578063834e5eaa146104995780638b2d2237146104ae5780638d320ca2146104c357610267565b806336568abe146103ba5780633b458f6e146103da5780634309ae12146103fa5780634f8f2b011461040f5780635c975abb1461042457610267565b806317c8884d1161022f57806317c8884d1461031b57806319eab0831461033b5780631e6e4e0414610350578063248a9ca3146103655780632acf73e8146103855780632f2ff15d1461039a57610267565b8063012ce5011461026c57806301ffc9a71461028e5780630d090fbb146102c45780630ef0a52f146102e6578063166ad63414610306575b600080fd5b34801561027857600080fd5b5061028c610287366004613644565b610759565b005b34801561029a57600080fd5b506102ae6102a93660046136ac565b610aa2565b6040516102bb9190613b1c565b60405180910390f35b3480156102d057600080fd5b506102d9610acf565b6040516102bb9190613b27565b3480156102f257600080fd5b5061028c61030136600461368b565b610ad6565b34801561031257600080fd5b506102d9610aff565b34801561032757600080fd5b5061028c610336366004613644565b610b06565b34801561034757600080fd5b506102d9610b28565b34801561035c57600080fd5b506102d9610b37565b34801561037157600080fd5b506102d9610380366004613644565b610b5b565b34801561039157600080fd5b506102d9610b70565b3480156103a657600080fd5b5061028c6103b536600461365c565b610b75565b3480156103c657600080fd5b5061028c6103d536600461365c565b610b9c565b3480156103e657600080fd5b5061028c6103f53660046137d1565b610bbe565b34801561040657600080fd5b506102d9610c14565b34801561041b57600080fd5b506102d9610c38565b34801561043057600080fd5b506102ae610c42565b61028c6104473660046137d1565b610c4b565b34801561045857600080fd5b5061028c610467366004613704565b610d8d565b34801561047857600080fd5b5061048c61048736600461368b565b6115b2565b6040516102bb91906139ee565b3480156104a557600080fd5b506102d96118a9565b3480156104ba57600080fd5b506102d96118b0565b3480156104cf57600080fd5b5061028c6104de366004613644565b6118b5565b3480156104ef57600080fd5b506105036104fe36600461368b565b6118d7565b6040516102bb919061399d565b34801561051c57600080fd5b506102ae61052b36600461365c565b6118f6565b34801561053c57600080fd5b506102d9611921565b34801561055157600080fd5b506102d9611928565b34801561056657600080fd5b5061028c610575366004613644565b611932565b34801561058657600080fd5b506102d9611a00565b34801561059b57600080fd5b506102d9611a05565b3480156105b057600080fd5b5061028c6105bf366004613644565b611a0c565b3480156105d057600080fd5b506102d9611a2e565b3480156105e557600080fd5b5061028c6105f4366004613644565b611a40565b34801561060557600080fd5b506102d9610614366004613644565b611ca8565b34801561062557600080fd5b5061028c610634366004613644565b611cbf565b34801561064557600080fd5b5061028c610654366004613644565b611d6f565b34801561066557600080fd5b5061028c61067436600461365c565b611d91565b34801561068557600080fd5b5061068e611d9b565b6040516102bb9291906141d0565b3480156106a857600080fd5b5061028c6106b73660046136d4565b611da7565b3480156106c857600080fd5b5061048c6106d736600461368b565b611faf565b3480156106e857600080fd5b5061028c6106f7366004613644565b61229c565b61028c61070a366004613644565b6122be565b34801561071b57600080fd5b5061028c61072a366004613644565b6123e8565b34801561073b57600080fd5b506102d9612591565b34801561075057600080fd5b506102d961259e565b80610766610109826125ab565b61078b5760405162461bcd60e51b81526004016107829061409a565b60405180910390fd5b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e6107bd816107b86125b7565b6125bb565b600083815261010860205260409020600481015460ff1661096e57600681015460ff166108d45760005b81600101548110156108ce5760fd546002830180546001600160a01b039092169163a9059cbb91908490811061082d57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460038501546040516001600160e01b031960e085901b168152610869926001600160a01b031691906004016139b1565b602060405180830381600087803b15801561088357600080fd5b505af1158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190613628565b50806108c6816143dc565b9150506107e7565b50610969565b60fd54600480830154600984015460405163a9059cbb60e01b81526001600160a01b039485169463a9059cbb946109159461010090049091169291016139b1565b602060405180830381600087803b15801561092f57600080fd5b505af1158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190613628565b505b610a49565b600681015460ff16610a035760005b8160010154811015610967578160020181815481106109ac57634e487b7160e01b600052603260045260246000fd5b600091825260208220015460038401546040516001600160a01b039092169281156108fc029290818181858888f193505050501580156109f0573d6000803e3d6000fd5b50806109fb816143dc565b91505061097d565b600481015460098201546040516101009092046001600160a01b0316916108fc82150291906000818181858888f19350505050158015610a47573d6000803e3d6000fd5b505b4260078201556000600882018190556001820181905560098201556040517f0efda3452a76bf3b550355556930eba4bd2b56b2bc81b6c0eb56c4679a6a064c90610a94908690613b27565b60405180910390a150505050565b60006001600160e01b03198216635a05180f60e01b1480610ac75750610ac78261261f565b90505b919050565b6101025490565b600080516020614447833981519152610af1816107b86125b7565b506101069190915561010755565b6101055490565b600080516020614447833981519152610b21816107b86125b7565b5061010255565b6000610b32612644565b905090565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc79290565b60009081526065602052604090206001015490565b606490565b610b7f8282612652565b6000828152609760205260409020610b979082612671565b505050565b610ba68282612686565b6000828152609760205260409020610b9790826126c8565b6000610bcf888888888888886126dd565b90507fdeb4915464f2fab35f9ed95b8c2dc62a1af9edc45ebc42643517a7893e49bca88133604051610c02929190614198565b60405180910390a15050505050505050565b7f4edebb69cd9d6569902dabdec7c91c11f65df00335e42b9a2c13432f7bb3ff0e90565b6000610b32612b5f565b60c95460ff1690565b84158015610cda575060fd546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610c8890339030908b906004016139ca565b602060405180830381600087803b158015610ca257600080fd5b505af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190613628565b80610cf157506001851515148015610cf157508534145b610d0d5760405162461bcd60e51b815260040161078290613f48565b6000610d1e888888888888886126dd565b6000818152610108602052604090819020600981018a905560068101805460ff191660011790559051919250907f1a90e66d0456e3af5e76c3cfe0c1da5f6676ea4d3e51556d86fd0d1a6ad2dd0990610d7a9084903390614198565b60405180910390a1505050505050505050565b81610d9a610109826125ab565b610db65760405162461bcd60e51b81526004016107829061409a565b7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc792610de3816107b86125b7565b60008481526101086020908152604080832081516101c08101835281548152600182015481850152600282018054845181870281018701865281815292959394860193830182828015610e5f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e41575b505050918352505060038201546020820152600482015460ff808216151560408401526001600160a01b036101008304166060840152608090920191600160a81b909104166001811115610ec357634e487b7160e01b600052602160045260246000fd5b6001811115610ee257634e487b7160e01b600052602160045260246000fd5b815260058201546020820152600682015460ff16151560408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c090920191610f30906143a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5c906143a7565b8015610fa95780601f10610f7e57610100808354040283529160200191610fa9565b820191906000526020600020905b815481529060010190602001808311610f8c57829003601f168201915b50505050508152602001600b82015481525050905061010354816101200151610fd291906141de565b4211610ff05760405162461bcd60e51b815260040161078290613c49565b600184511015801561100757508060200151845111155b6110235760405162461bcd60e51b815260040161078290613fae565b61102d8185612b6d565b151560011461104e5760405162461bcd60e51b815260040161078290613d42565b6000606461010154836101600151611066919061432a565b61107091906141f6565b90506000806000846101a001516000146111b15760fe546101a0860151604051631cce59cb60e01b81526001600160a01b0390921691631cce59cb916110b891600401613b27565b60206040518083038186803b1580156110d057600080fd5b505afa1580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110891906136ec565b60fe546101a08701516040516351b529e360e11b81529294506001600160a01b039091169163a36a53c69161113f91600401613b27565b60206040518083038186803b15801561115757600080fd5b505afa15801561116b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118f919061360c565b90506064828661016001516111a4919061432a565b6111ae91906141f6565b92505b6000885184868861016001516111c79190614349565b6111d19190614349565b6111db91906141f6565b60808701519091506112755760fd5460fc5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261121d9291169089906004016139b1565b602060405180830381600087803b15801561123757600080fd5b505af115801561124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126f9190613628565b506112b1565b60fc546040516001600160a01b039091169086156108fc029087906000818181858888f193505050501580156112af573d6000803e3d6000fd5b505b6101a086015115801590611344575060fe546101a08701516040516382afd23b60e01b81526001600160a01b03909216916382afd23b916112f491600401613b27565b60206040518083038186803b15801561130c57600080fd5b505afa158015611320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113449190613628565b156114145760808601516113dc5760fd5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061138490859088906004016139b1565b602060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d69190613628565b50611414565b6040516001600160a01b0383169085156108fc029086906000818181858888f19350505050158015611412573d6000803e3d6000fd5b505b60005b89518110156115525760808701516114de5760fd548a516001600160a01b039091169063a9059cbb908c908490811061146057634e487b7160e01b600052603260045260246000fd5b6020026020010151846040518363ffffffff1660e01b81526004016114869291906139b1565b602060405180830381600087803b1580156114a057600080fd5b505af11580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190613628565b50611540565b8981815181106114fe57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166108fc839081150290604051600060405180830381858888f1935050505015801561153e573d6000803e3d6000fd5b505b8061154a816143dc565b915050611417565b5061155f6101098b612c3f565b5061156c61010b8b612c4b565b507f9514dcc966c415c220874c23fac50f236d9bab82d9d1c6a2e00790c215145d3a8a8a60405161159e9291906141af565b60405180910390a150505050505050505050565b606081831080156115cd57506115c9610109612c57565b8211155b6115e95760405162461bcd60e51b815260040161078290613ca6565b60006115f58484614349565b67ffffffffffffffff81111561161b57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561165457816020015b61164161345c565b8152602001906001900390816116395790505b509050835b8381101561189f57610108600061167261010984612c62565b8152602001908152602001600020604051806101c00160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156116f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116db575b505050918352505060038201546020820152600482015460ff808216151560408401526001600160a01b036101008304166060840152608090920191600160a81b90910416600181111561175d57634e487b7160e01b600052602160045260246000fd5b600181111561177c57634e487b7160e01b600052602160045260246000fd5b815260058201546020820152600682015460ff16151560408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916117ca906143a7565b80601f01602080910402602001604051908101604052809291908181526020018280546117f6906143a7565b80156118435780601f1061181857610100808354040283529160200191611843565b820191906000526020600020905b81548152906001019060200180831161182657829003601f168201915b50505050508152602001600b820154815250508286836118639190614349565b8151811061188157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611897906143dc565b915050611659565b5090505b92915050565b6101045490565b600290565b6000805160206144478339815191526118d0816107b86125b7565b5061010355565b60008281526097602052604081206118ef9083612c62565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101015490565b6000610b32612c6e565b8061193f610109826125ab565b61195b5760405162461bcd60e51b81526004016107829061409a565b600082815261010860205260409020600481015461010090046001600160a01b0316331461199b5760405162461bcd60e51b815260040161078290613f7f565b6008810154156119bd5760405162461bcd60e51b815260040161078290613d0b565b4260088201556040517f76e8d3f2e1eda7b2aff7a471cc350013f132caca7b60b6c43bc09f525414b60f906119f3908590613b27565b60405180910390a1505050565b600081565b6101035490565b600080516020614447833981519152611a27816107b86125b7565b5061010555565b60008051602061444783398151915290565b80611a4d610109826125ab565b611a695760405162461bcd60e51b81526004016107829061409a565b60008181526101086020526040902060080154611a985760405162461bcd60e51b815260040161078290613eda565b6101035460008281526101086020526040902060080154611ab991906141de565b421115611ad85760405162461bcd60e51b81526004016107829061401c565b600081815261010860205260409020600281015460019091015410611b0f5760405162461bcd60e51b815260040161078290613e69565b600082815261010860205260409020600481015460ff1615611b435760405162461bcd60e51b815260040161078290613bba565b60fd5460038201546040516323b872dd60e01b81526001600160a01b03909216916323b872dd91611b7a91339130916004016139ca565b602060405180830381600087803b158015611b9457600080fd5b505af1158015611ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcc9190613628565b611be85760405162461bcd60e51b815260040161078290613f11565b3381600201826001015481548110611c1057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001816001016000828254611c5391906141de565b90915550506003810154600982018054600090611c719084906141de565b90915550506040517ff12a66daa955e8255b989ee232c8ad1f6d294f4448b87f72b497295e54758a4f906119f39085903390614198565b6000818152609760205260408120610ac790612c57565b80611ccc610109826125ab565b611ce85760405162461bcd60e51b81526004016107829061409a565b6101045460008381526101086020526040902060070154611d0991906141de565b4211611d275760405162461bcd60e51b815260040161078290613cd4565b611d3361010983612c3f565b507f90a6e7b3e793c835ae7bd0cdb2cafd5f03b11e536eef9eb6ad1791cb82bf0d3882604051611d639190613b27565b60405180910390a15050565b600080516020614447833981519152611d8a816107b86125b7565b5061010155565b610ba68282612c7c565b61010654610107549091565b600054610100900460ff1680611dc0575060005460ff16155b611ddc5760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015611e07576000805460ff1961ff0019909116610100171660011790555b611e0f612c9b565b611e17612d30565b611e2e6000611e2960208501856135f0565b612da0565b611e5f7f11cf46bea1094f63335637b879e8021ce59a9008b10e90c59d17337675ebc792611e2960208501856135f0565b611e71610120830161010084016135f0565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055611ea3610140830161012084016135f0565b60fd80546001600160a01b0319166001600160a01b0392909216919091179055611ed5610160830161014084016135f0565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055611f07610180830161016084016135f0565b61010080546001600160a01b0319166001600160a01b0392909216919091179055611f3a6101a0830161018084016135f0565b60fe80546001600160a01b0319166001600160a01b039290921691909117905560208201356101015560408201356101025560608201356101035560808201356101045560a08201356101055560c08201356101065560e0820135610107558015611fab576000805461ff00191690555b5050565b60608183108015611fca5750611fc6610109612c57565b8211155b611fe65760405162461bcd60e51b815260040161078290613ca6565b6000611ff28484614349565b67ffffffffffffffff81111561201857634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561205157816020015b61203e61345c565b8152602001906001900390816120365790505b509050835b8381101561189f57610108600061206f61010b84612c62565b8152602001908152602001600020604051806101c00160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156120f657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120d8575b505050918352505060038201546020820152600482015460ff808216151560408401526001600160a01b036101008304166060840152608090920191600160a81b90910416600181111561215a57634e487b7160e01b600052602160045260246000fd5b600181111561217957634e487b7160e01b600052602160045260246000fd5b815260058201546020820152600682015460ff16151560408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916121c7906143a7565b80601f01602080910402602001604051908101604052809291908181526020018280546121f3906143a7565b80156122405780601f1061221557610100808354040283529160200191612240565b820191906000526020600020905b81548152906001019060200180831161222357829003601f168201915b50505050508152602001600b820154815250508286836122609190614349565b8151811061227e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080612294906143dc565b915050612056565b6000805160206144478339815191526122b7816107b86125b7565b5061010455565b806122cb610109826125ab565b6122e75760405162461bcd60e51b81526004016107829061409a565b600081815261010860205260409020600801546123165760405162461bcd60e51b815260040161078290613eda565b610103546000828152610108602052604090206008015461233791906141de565b4211156123565760405162461bcd60e51b81526004016107829061401c565b60008181526101086020526040902060028101546001909101541061238d5760405162461bcd60e51b815260040161078290613e69565b600082815261010860205260409020600481015460ff1615156001146123c55760405162461bcd60e51b815260040161078290613fe5565b80600301543414611be85760405162461bcd60e51b815260040161078290614100565b806123f5610109826125ab565b6124115760405162461bcd60e51b81526004016107829061409a565b600081815261010860205260409020600801546124405760405162461bcd60e51b815260040161078290613eda565b610103546000828152610108602052604090206008015461246191906141de565b4211156124805760405162461bcd60e51b81526004016107829061401c565b6000818152610108602052604090206002810154600190910154106124b75760405162461bcd60e51b815260040161078290613e69565b600082815261010860205260409020600681015460ff1615156001146124ef5760405162461bcd60e51b8152600401610782906140d1565b338160020182600101548154811061251757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600181600101600082825461255a91906141de565b90915550506040517fad05497db7681a74140530daeedc0d0178492f9de1518990947e7cf27c83de59906119f39085903390614198565b6000610b3261010b612c57565b6000610b32610109612c57565b60006118ef8383612daa565b3390565b6125c582826118f6565b611fab576125dd816001600160a01b03166014612dc2565b6125e8836020612dc2565b6040516020016125f9929190613928565b60408051601f198184030181529082905262461bcd60e51b825261078291600401613b30565b60006001600160e01b03198216637965db0b60e01b1480610ac75750610ac782612f74565b6000610b3261010554612f8d565b61265b82610b5b565b612667816107b86125b7565b610b978383613044565b60006118ef836001600160a01b0384166130cb565b61268e6125b7565b6001600160a01b0316816001600160a01b0316146126be5760405162461bcd60e51b815260040161078290614149565b611fab8282613115565b60006118ef836001600160a01b03841661319a565b60008180158061277257508015801590612772575060fe546040516382afd23b60e01b81526001600160a01b03909116906382afd23b90612722908490600401613b27565b60206040518083038186803b15801561273a57600080fd5b505afa15801561274e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127729190613628565b61278e5760405162461bcd60e51b815260040161078290613d9f565b60008660018111156127b057634e487b7160e01b600052602160045260246000fd5b146127cd5760405162461bcd60e51b815260040161078290613eab565b600289101580156127df575060648911155b6127fb5760405162461bcd60e51b815260040161078290613c02565b86158015612810575061280c612644565b8810155b8061282f5750600187151514801561282f575061282b612b5f565b8810155b61284b5760405162461bcd60e51b815260040161078290614053565b60fd5460ff546001600160a01b03918216916323b872dd9133911661286e612c6e565b6040518463ffffffff1660e01b815260040161288c939291906139ca565b602060405180830381600087803b1580156128a657600080fd5b505af11580156128ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128de9190613628565b6128fa5760405162461bcd60e51b815260040161078290613dd6565b61290460fb6132b1565b600061291060fb6132ba565b9050604051806101c00160405280828152602001600081526020018b67ffffffffffffffff81111561295257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561297b578160200160208202803683370190505b508152602081018b905289151560408201523360608201526080018860018111156129b657634e487b7160e01b600052602160045260246000fd5b815260200160018152602001600015158152602001428152602001600081526020016000815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060209182018790528381526101088252604090819020835181558383015160018201559083015180519192612a54926002850192909101906134f7565b5060608201516003820155608082015160048201805460a08501516001600160a01b031661010002610100600160a81b031993151560ff1990921691909117929092169190911780825560c0840151919060ff60a81b1916600160a81b836001811115612ad157634e487b7160e01b600052602160045260246000fd5b021790555060e0820151600582015561010082015160068201805460ff19169115159190911790556101208201516007820155610140820151600882015561016082015160098201556101808201518051612b3691600a84019160209091019061355c565b506101a09190910151600b90910155612b5161010982612c4b565b509998505050505050505050565b6000610b32610105546132be565b6000805b8251811015612c35576000805b8560200151811015612c115785604001518181518110612bae57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316858481518110612bdf57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415612bff5760019150612c11565b80612c09816143dc565b915050612b7e565b5080612c22576000925050506118a3565b5080612c2d816143dc565b915050612b71565b5060019392505050565b60006118ef838361319a565b60006118ef83836130cb565b6000610ac7826132ba565b60006118ef8383613308565b6000610b3261010254612f8d565b612c8582610b5b565b612c91816107b86125b7565b610b978383613115565b600054610100900460ff1680612cb4575060005460ff16155b612cd05760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015612cfb576000805460ff1961ff0019909116610100171660011790555b612d03613361565b612d0b613361565b612d13613361565b612d1b613361565b8015612d2d576000805461ff00191690555b50565b600054610100900460ff1680612d49575060005460ff16155b612d655760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015612d90576000805460ff1961ff0019909116610100171660011790555b612d98613361565b612d1b6133d4565b610b7f8282613452565b60009081526001919091016020526040902054151590565b60606000612dd183600261432a565b612ddc9060026141de565b67ffffffffffffffff811115612e0257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612e2c576020820181803683370190505b509050600360fc1b81600081518110612e5557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e9257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612eb684600261432a565b612ec19060016141de565b90505b6001811115612f55576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612f0357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612f2757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612f4e81614390565b9050612ec4565b5083156118ef5760405162461bcd60e51b815260040161078290613b85565b6001600160e01b031981166301ffc9a760e01b14919050565b60008061010060009054906101000a90046001600160a01b03166001600160a01b031663b7d002076040518163ffffffff1660e01b815260040160206040518083038186803b158015612fdf57600080fd5b505afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301791906136ec565b90506130256006600a61425c565b61302f828561432a565b61303a90600461432a565b6118ef91906141f6565b61304e82826118f6565b611fab5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556130876125b7565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006130d78383612daa565b61310d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556118a3565b5060006118a3565b61311f82826118f6565b15611fab5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556131566125b7565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156132a75760006131be600183614349565b85549091506000906131d290600190614349565b905060008660000182815481106131f957634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061322a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526001890190915260409020849055865487908061326b57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506118a3565b60009150506118a3565b80546001019055565b5490565b60006132cc6006600a61425c565b6132d86012600a61425c565b61010754610106546132ea908661432a565b6132f491906141f6565b6132fe919061432a565b610ac791906141f6565b8154600090821061332b5760405162461bcd60e51b815260040161078290613b43565b82600001828154811061334e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600054610100900460ff168061337a575060005460ff16155b6133965760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015612d1b576000805460ff1961ff0019909116610100171660011790558015612d2d576000805461ff001916905550565b600054610100900460ff16806133ed575060005460ff16155b6134095760405162461bcd60e51b815260040161078290613e1b565b600054610100900460ff16158015613434576000805460ff1961ff0019909116610100171660011790555b60c9805460ff191690558015612d2d576000805461ff001916905550565b611fab8282613044565b604051806101c001604052806000815260200160008152602001606081526020016000815260200160001515815260200160006001600160a01b03168152602001600060018111156134be57634e487b7160e01b600052602160045260246000fd5b81526020016000815260200160001515815260200160008152602001600081526020016000815260200160608152602001600081525090565b82805482825590600052602060002090810192821561354c579160200282015b8281111561354c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613517565b506135589291506135d0565b5090565b828054613568906143a7565b90600052602060002090601f01602090048101928261358a576000855561354c565b82601f106135a357805160ff191683800117855561354c565b8280016001018555821561354c579182015b8281111561354c5782518255916020019190600101906135b5565b5b8082111561355857600081556001016135d1565b8035610aca81614423565b600060208284031215613601578081fd5b81356118ef81614423565b60006020828403121561361d578081fd5b81516118ef81614423565b600060208284031215613639578081fd5b81516118ef81614438565b600060208284031215613655578081fd5b5035919050565b6000806040838503121561366e578081fd5b82359150602083013561368081614423565b809150509250929050565b6000806040838503121561369d578182fd5b50508035926020909101359150565b6000602082840312156136bd578081fd5b81356001600160e01b0319811681146118ef578182fd5b60006101a082840312156136e6578081fd5b50919050565b6000602082840312156136fd578081fd5b5051919050565b60008060408385031215613716578182fd5b8235915060208084013567ffffffffffffffff80821115613735578384fd5b818601915086601f830112613748578384fd5b81358181111561375a5761375a61440d565b838102604051858282010181811085821117156137795761377961440d565b604052828152858101935084860182860187018b1015613797578788fd5b8795505b838610156137c0576137ac816135e5565b85526001959095019493860193860161379b565b508096505050505050509250929050565b600080600080600080600060c0888a0312156137eb578283fd5b8735965060208801359550604088013561380481614438565b9450606088013560028110613817578384fd5b9350608088013567ffffffffffffffff80821115613833578485fd5b818a0191508a601f830112613846578485fd5b813581811115613854578586fd5b8b6020828501011115613865578586fd5b60208301955080945050505060a0880135905092959891949750929550565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156138c95781516001600160a01b0316875295820195908201906001016138a4565b509495945050505050565b15159052565b600281106138f857634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452613914816020860160208601614360565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613960816017850160208801614360565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613991816028840160208801614360565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613b0e57603f1989840301855281516101c0815185528882015189860152878201518189870152613a4982870182613891565b9150506060808301518187015250608080830151613a69828801826138d4565b505060a080830151613a7d82880182613884565b505060c080830151613a91828801826138da565b505060e0828101519086015261010080830151613ab0828801826138d4565b50506101208281015190860152610140808301519086015261016080830151908601526101808083015186830382880152613aeb83826138fc565b6101a0948501519790940196909652505094870194925090860190600101613a12565b509098975050505050505050565b901515815260200190565b90815260200190565b6000602082526118ef60208301846138fc565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526028908201527f4242543a207374616b65732073686f756c6420626520696e206e61746976652060408201526763757272656e637960c01b606082015260800190565b60208082526027908201527f4242543a20696e76616c6964206d6178206e756d626572206f66207061727469604082015266636970616e747360c81b606082015260800190565b60208082526039908201527f4242543a2063616e6e6f74207265706f72742077696e6e6572206265666f726560408201527f207374616b696e672077696e646f7720697320636c6f73656400000000000000606082015260800190565b6020808252601490820152734242543a20696e76616c696420696e646578657360601b604082015260600190565b6020808252601c908201527f4242543a20726f6f6d206973206e6f74206167656420656e6f75676800000000604082015260600190565b60208082526018908201527f4242543a20726f6f6d20616c7265616479206c6f636b65640000000000000000604082015260600190565b60208082526038908201527f4242543a206f6e65206f72206d6f7265206f66207265706f727465642077696e60408201527f6e65727320617265206e6f74207061727469636970616e740000000000000000606082015260800190565b6020808252601d908201527f4242543a20636f6c6c656374696f6e206973206e6f7420616374697665000000604082015260600190565b60208082526025908201527f4242543a204e6f7420656e6f75676820534e4b20666f7220726f6f6d2063726560408201526430ba34b7b760d91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526022908201527f4242543a206e6f206d6f7265207061727469636970616e747320706f737369626040820152616c6560f01b606082015260800190565b6020808252601590820152744242543a20756e737570706f72746564206d6f646560581b604082015260600190565b60208082526017908201527f4242543a20726f6f6d206973206e6f74206c6f636b6564000000000000000000604082015260600190565b6020808252601d908201527f4242543a206e6f7420656e6f75676820534e4b20666f72207374616b65000000604082015260600190565b6020808252601f908201527f4242543a206e6f7420656e6f7567682066756e647320666f72207374616b6500604082015260600190565b60208082526015908201527421212a1d103737ba1030903937b7b69037bbb732b960591b604082015260600190565b6020808252601e908201527f4242543a20696e76616c6964206e756d626572206f662077696e6e6572730000604082015260600190565b6020808252601c908201527f4242543a207374616b65732073686f756c6420626520696e20534e4b00000000604082015260600190565b6020808252601a908201527f4242543a207374616b696e672077696e646f7720636c6f736564000000000000604082015260600190565b60208082526027908201527f4242543a2072657175697265645374616b65206973206c657373207468616e206040820152661b5a5b9a5b585b60ca1b606082015260800190565b60208082526017908201527f4242543a20726f6f6d206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252601590820152744242543a20726f6f6d206973206e6f74206672656560581b604082015260600190565b60208082526029908201527f4242543a206e6f7420656e6f756768206e61746976652063757272656e637920604082015268666f72207374616b6560b81b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b9182526001600160a01b0316602082015260400190565b6000838252604060208301526141c86040830184613891565b949350505050565b918252602082015260400190565b600082198211156141f1576141f16143f7565b500190565b60008261421157634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116142285750614253565b81870482111561423a5761423a6143f7565b8086161561424757918102915b9490941c938002614219565b94509492505050565b60006118ef6000198484600082614275575060016118ef565b81614282575060006118ef565b816001811461429857600281146142a2576142cf565b60019150506118ef565b60ff8411156142b3576142b36143f7565b6001841b9150848211156142c9576142c96143f7565b506118ef565b5060208310610133831016604e8410600b8410161715614302575081810a838111156142fd576142fd6143f7565b6118ef565b61430f8484846001614216565b808604821115614321576143216143f7565b02949350505050565b6000816000190483118215151615614344576143446143f7565b500290565b60008282101561435b5761435b6143f7565b500390565b60005b8381101561437b578181015183820152602001614363565b8381111561438a576000848401525b50505050565b60008161439f5761439f6143f7565b506000190190565b6002810460018216806143bb57607f821691505b602082108114156136e657634e487b7160e01b600052602260045260246000fd5b60006000198214156143f0576143f06143f7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612d2d57600080fd5b8015158114612d2d57600080fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220becbb41520baafa113f1b2e12e82024dd3adaaeef3005d18b25b2c07d686861e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2658,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)"
      },
      {
        "astId": 615,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 62,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3206_storage)"
      },
      {
        "astId": 219,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 814,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 905,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9638,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_roomIds",
        "offset": 0,
        "slot": "251",
        "type": "t_struct(Counter)4707_storage"
      },
      {
        "astId": 9640,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_foundersAddress",
        "offset": 0,
        "slot": "252",
        "type": "t_address_payable"
      },
      {
        "astId": 9643,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_skill",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(ISkillToken)13411"
      },
      {
        "astId": 9646,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_collectionList",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(ICollectionList)13103"
      },
      {
        "astId": 9648,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_ecosystem",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 9651,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_uniswap",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IUniswapUSDCSkill)13949"
      },
      {
        "astId": 9653,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_winningFeeInPercents",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 9655,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_roomCreationPriceInUSDC",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 9657,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_stakingWindowInSeconds",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 9659,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_activeRoomDeletionDelayInSeconds",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 9661,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_minimalStakeInUSDC",
        "offset": 0,
        "slot": "261",
        "type": "t_uint256"
      },
      {
        "astId": 9663,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_native2usdcNumerator",
        "offset": 0,
        "slot": "262",
        "type": "t_uint256"
      },
      {
        "astId": 9665,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_native2usdcDenominator",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      },
      {
        "astId": 9670,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_rooms",
        "offset": 0,
        "slot": "264",
        "type": "t_mapping(t_uint256,t_struct(Room)12606_storage)"
      },
      {
        "astId": 9673,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_activeRoomIds",
        "offset": 0,
        "slot": "265",
        "type": "t_struct(UintSet)5211_storage"
      },
      {
        "astId": 9676,
        "contract": "contracts/BigBoyTable.sol:BigBoyTable",
        "label": "_finishedRoomIds",
        "offset": 0,
        "slot": "267",
        "type": "t_struct(UintSet)5211_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICollectionList)13103": {
        "encoding": "inplace",
        "label": "contract ICollectionList",
        "numberOfBytes": "20"
      },
      "t_contract(ISkillToken)13411": {
        "encoding": "inplace",
        "label": "contract ISkillToken",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapUSDCSkill)13949": {
        "encoding": "inplace",
        "label": "contract IUniswapUSDCSkill",
        "numberOfBytes": "20"
      },
      "t_enum(ROOM_MODE)12575": {
        "encoding": "inplace",
        "label": "enum IBigBoyTable.ROOM_MODE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3206_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3206_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)302_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Room)12606_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBigBoyTable.Room)",
        "numberOfBytes": "32",
        "value": "t_struct(Room)12606_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3206_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3205,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2931_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)4707_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4706,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)302_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 299,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 301,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Room)12606_storage": {
        "encoding": "inplace",
        "label": "struct IBigBoyTable.Room",
        "members": [
          {
            "astId": 12577,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12579,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "participantCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12582,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "participants",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address_payable)dyn_storage"
          },
          {
            "astId": 12584,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "requiredStakeAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12586,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "isStakeInNativeCurrency",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 12588,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "owner",
            "offset": 1,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 12591,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "roomMode",
            "offset": 21,
            "slot": "4",
            "type": "t_enum(ROOM_MODE)12575"
          },
          {
            "astId": 12593,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "rounds",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12595,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "canJoinForFree",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 12597,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "createdAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12599,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "lockedAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12601,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "totalStake",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12603,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "pwdRef",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 12605,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "collectionId",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Set)2931_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 2926,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2930,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4809_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4804,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4808,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)5211_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 5210,
            "contract": "contracts/BigBoyTable.sol:BigBoyTable",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4809_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}